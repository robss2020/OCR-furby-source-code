----------------------- Page 1-----------------------

TITLE PAGE
INTERACTIVE TOY
(FURBY•ASM - Version 25)
INVENTOR: Dave Hampton
Attorney Docket No. 64799
FITCH, EVEN, TABIN & FLANNERY
Suite 900
135 South LaSalle Street
Chicago, Illinois
Telephone (312) 372-7842
60603-4277
----------------------- Page 2-----------------------

; 11till11111111111111111111111111111111111111111111111111111lllillllil
mu
?•
• i SPC81A Source Code (Version 25)
;•
Written by: Dave Hampton / W* e Schulz
*
. Date: July 30, 1998
.•
a
. a Copyright (C) 1996,1997,1998 by Sounds Amazing!
a
.t All rights reserved.
a;
tmmmimmtmmimmmmmtmmmmmmmmmm
mu
remember if there is a borrow carry is CLEARED
also SEC
SBC
if the two numbers are equal you still get a negative
?;
result
.tttltttllitttltttttttitltttiittttttttttttlttttllttttttiltllttltttlltttt
mu
MODIFICATION LIST :
i ;
Furby29/30/31/32
Final testing for shipment of code on 8/2/98.
Tables updated
sequential tab
New diag5.asm.-Light s never 3.asm getting (if light first oscentry stalls ,fixed it.wont hang
; ..or sperd updated, wake up/name fix
t
system).
;;
Furby33
In motor brake routine, turn mot* ra off before turning reverse
braking pulse on to save transistors.
;;;j
Furby34
Cleanup start code and wake routines
Light sensor goes max dark and stays there to reff time, then
call sleep macro anc shut down.
Furby35
Adds four new easter eggs,BURP ATTACK, SAY NAME, TWINkLE SONG,
and ROOSTER LOVES YOL. Also add new names.
;;;;
I r s::::::::::::::::t i::::::::
A-l
----------------------- Page 3-----------------------

; Release 3
;; File "testR3a-
; 1. Light sensor has a hysteresis point of continually triggering
sensor.
; 2. Light sensor decrements two instead of one on nungry counter.
; 3. Diagnos 'r
; 4. When a tuioy 'eceives the I.R. sleep command he sends the same
command
de for light sensor wont trigger very easily.
; out before goi* to sleep.
;
5. When hungry is >w enough to trigger sick counter, each sensor
deducts two instead of one for each hit.
;
6. When diagnostics complete c^ear memory, reset hungry & sick to FF
randomly choose new name an voice, then write EEPROM before
going to sleep. Also extend EEPROM diagnostic to test all locations
for pass/fail of device.
; ;;
1. Add new light routine
8. Change hide and seek egg to light,light,light,tummy.
9. Change sick/hungry counter so that it can only get so sick and
not continue down to zero. (MAX_SICK)
;
;10. In diagnostics, motor position test first goes forward
continuously
until the front switch is pressed, then goes reverse continuously
until the front switch is pressed again, and then does normal
« * » i
;
position
; calibration stopping at the calibration switch.
On power up we still use tilt and invert to generate startup random
numbers, but if feed switch is pressed for cold boot, we use it to
generate random numbers , because it is controlled by the user where
the tilt and invert are more flaky.
No matter what a^e, 25% of time he randomly pulls speech from age
to generate more Furbish at older ages.
;11•
;; ;
12.
;
Twinkle song egg
When song is complete, if both front and back switches are pressed
we goto deep sleep. That means only the invert can wake us up, not
the tilt switch.
;13.
;; .
•
llllv4
; ;;;
A-2
----------------------- Page 4-----------------------

•$s
; Actual numeric value for TI pitch control
bit 7 set * subtract value from current course value
clr * add value to cur ent course value
bit 6 set = select music pitch table
clr = select normal speech pitch table
bit 0
-5 value to change course value (no change * 0)
?? ;
A math routine in ’say_0 * converts the value for or -
; if <80 then subtracts from 80 to get the minus version of 00
; ie, if number is 70 then TI gets sent 10 (which is -10)
; If number is 80 or > 80 then get sent literal as positive.
; NOTE: MAX POSITIVE IS 8F (+16 from normal /oice of 00)
MAX NEGATIVE is 2F (-47 from normal voice of 00)
;This is a difference of 80h - 2Fh or 51h
; 8Fh is hi voice
; 2Fh lo voice ( very low)
(8f is very squeeeeeke)
; The math routine in 'i>ay_0 * allows a f-decimal number in the speech
table.
; A value of 80 * no change or 00 sent to TI
; 81 = 1
; 8f * *16
/ lvalue of 7F = -1 from nonr^.voice
;70 = -16
*.
; The voice selection should take into consideration that the hi voice
selection plus an aditional offset is never greater than 8f
Or a low voice minus offset never less than 2f.
;
;( 3) hi voice
;(-6) mid voice
;(-15) low voice
Voi***
Jc ce2
Voice3
EQU 83h
EQU 7Ah
EQU 71h
;;;; we converted to a random selection table, but since all voice
tables
use the equate plus some offset, we i th* change in the SAY_0
routine. We always assign voice 3 whicn is th* lowest, and based on
the random power up pitch selection, the ram location 'Rvoice *
;;;
holds
; the number to add to the voice+offset received from the macro
cable.
Voice EQU Voice3 ;pitch (choose Voicel, Voice2,
Voice3)(voice2=norm)
Select Voice3 since it is the lowest and then add the difference to
get
; Voice2 or Voice3. Here we assign that difference to an equate to be
; used in the voice table that is randomly selected on power up.
EQU 18 ;Voice3 «• 18d * Vcicel
EQU 09 ;Voice3 09d * Voice2
S_voicel
S_voice2
A-3
----------------------- Page 5-----------------------

• ' , * r.:* "'i*.'!-?Tr-vr*l I- -nr ^
S_voice3 £QU 0 ;Voice3 OOd = Voice3 *I
; ;
Motor speed pulse width :
; Motor_on * power to motor, Motor_off is none.
Mpu1se_on EQU 16
Mpulse_off EQU 16
?;
;calibration switch forward direction
;calibration switch forward direction
Cal__pos_fwd EQU
Cal_pos_rev EQU
134
134
;;;
JOAAAAAAAXAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAAAXA,?
. 3 PORTS
; * SPC40A has : 16 I/O pins
PORTIA 4 I/O pins 0-3
PORT_C 4 I/O pins 0-3
;> PORTED 8 I/O pins 0-7
. >
. 3 RAM
. 3
;» SPC40A has : 128 bytes of RAM
j * from $80 $FF
. 3
. 3 ROM
SPC40A has :
; > BANKO user ROM from $0600 - $7FFF
;* BA’TKl user ROM from $8000 - $FFF9
. J
. 3
.3 VECTORS
vector $7FFA / $7FFB *
$7FFC / $7FFD »
vector $7FFE / $7FFF *
OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc
PORTS 1
;» SPC120A has : 17 I/O pins 1
.» PORTIA 4 I/O pins 0-3 *
;> PORT_E 4 I/O pins 0,1,2,4,5 1
; » PORT_C 4 I/O pins 0-3 input only *
;» PORT_D 8 I/O pins 0-7 *
; » NMI
; * RESET vector
; > IRQ
;;;
»
. 3
7 » RAM
; > SPC120A has : 128 bytes of RAM
; > from $80 $FF
? >
7 » ROM
; > SPC120A has :
A
-4
----------------------- Page 6-----------------------

m
7 * BANKO user RO
;* BANK1 user RC
; » BANK2 user RC
;» BANK3 user RC
$0600 - $7FFA *
$8000 - $FFFF
$10000 - $17FFF
$1A000 - $1FFFF
.a
;*
;» VECTORS
;» NMI
; > RESET vector $7FFC / $7FFD
IRQ
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACl
vector $7FFA / $7FFB
vector $7FFE / $7FFF
A
; unuseable areas in rom
8000H AX DFFFH should be skiped (Dummy area)
7FFA
;SPC40A:
bank 0
bank 1
* 600
; = 8000 - DFFF reserved , start 8 E000 FFFA
;SPC80A: 10000H AA 13FFFH should be skiped (Dummy area)
bank 0
; bank 1
; bank 2
= 600 7FFA
« 8000
3 10000-13FFF reserved , start at 14000
;
FFFA
17FFF
;SPC120A: 18000H AA 19FFFH should be skiped (Dummy area)
* 600 - 7FFA
3 8000 - FFFA
= 10000 - 17FFF
= 18000 - 19FFF reserved , start at 1A000 - 1FFFA
;SPC120A:
bank 0
bank 1
bank 2
bank 3
7 ;;
7SPC256A: ;SPC256A: Non dummy area
.*
;SPC512A: ;SPC512A: Non dummy area
;.
CODE
.SYNTAX 6502
.LINKLIST
.SYMBOLS
;AAAAAAAAAAAAAAAAAAA PORT DIRECTION CONTROL REGISTER
AAAAAAAAAAAAAAAAA/AAAAAA
Ports_dir
(4 I/O pins) controlled with each bit of this register
you can't control each pin separately, only as a nibble
0 » input / 1 = output
EWU 00 ; (write only)
;7
? 7 6 5 4 3 2 1 0 (REGISTER
BITS)
(PORT)
(PORT BITS)
; D D C C B B A A
; 7654 3210 7654 3210 7654 3210 7654 3210
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
; AAAAAAAAAAAAAAAAAA PORT CONFIGURATION CONTROL REGISTER
AAAAA*AAAAAAAAAAAA
AS
----------------------- Page 7-----------------------

based on if the port pin is input or output
?
Ports_con EQU 01 ; (write only)
; (4 I/O pins) controlled with each bit ol this register
; 7 6 5 4 3 2 1 0 (REGISTER
BITS)
; D D C B A (PORT)
(PORT BITS)
C B A
; 7654 3210 7654 3210 7654 3210 7654 3210
; port_a INPUTS can be either:
; 0 t float 1 » pulled high
port_a OUTPUTS can be either:
0 = buffer 1 = upper (4) bits Open drain Pmos (source)
lower (4) bits Open drain Nmos (sink)
i;
port_b INPUTS can be either:
; 0 = float 1 « pulled low
port_b OUTPUTS can be either:
0 = buffer 1 = upper (4) bits Open drain Nmos (sink)
lower (4) bits Open drain Nmos (sink)
port_c INPUTS can be either:
0 * float 1 * pulled high
port_r OUTPUTS can be either:
0 = b^tfer 1 = upper (4) bits Open drain Pmos (source)
lower (4) bits Open drain Nmos (sink)
port_d INPUTS can be either:
0 float 1 = pulled low
ported OUTPUTS can be « ither:
0 a buffer 1 a Open irain Pmos (source)
;AAAAAAAAAAAAAAAAAAAAAA>AAAAAAAAAAAAAAAAAAAAAAAAAAAA£AAAAAAAAAAAAAAAAAAA
AAAAA
;AJUUU5LAAAAAAAAAAAAAAAAAAAAAA I/O PORTS
Port_A 02H ; (read/write) for TI & speech recgr.
CPU’s
Data_D0
DataJDl
Data_D2
Data_D3
EQU
EQU 01H ;bit 0 data nible port
EQU 02H ;
EQU 04H ?
EQU 08H ;
03H ;bO/bl * I/O b4/b5 = inp only
:1H ;B0 - TI reset control
02H ;B1 - hand shake to TI
;B4 - I.R. Rec" data
20H ;B5 - TI wants data
Port_B
TI
TI—_CTS init
IR_IN
TI_RTS
EQU
EQU
EQU
EQU 10H
EQU
04H f read/W’-ite)
;CO - lo when mo*
02H ;Cl - moto.
;C2 - back touch
;C3 - front touch
Po~t_C EQU
Motor_cal
Pos_sen
Touch_bck
Touci
^frnt
;
crosses switch
ical sensor (intt Cl)
EQU 01H
EQU
EQU 04H
EQU 08H
A-6
----------------------- Page 8-----------------------

PortJD
Ball_si.de
Bal3_invert EQU
Ligh^_in
Mic_in
Power_on
Motor_led
Motor_lt
Motor_rt
05H ; (read/write)
DO - hi when on any side (TILT)
D1 - hi when inverted
D2 - hi when bright light hits sensor
;D3 - hi pulse microphone input
;D4 - power to rest of circuit
;D5 - motor I.R. led driver
;D6 - motor drive left (forward)
;D7 - motor drive right (reverse)
EQU
EQU 01H
02H
EQU 04H
EQU 08K
EQU 10H
EQU 20H
EQU 40H
EQU 80H
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA DATA LATCH PORT_D
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAA
; (read)
; read to latch data from port_d, used for wake-up on pin change
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
AAAAA
Latch_D EQU 06H
;AAAAAAAAAAAAAAAAAAAAAAAAA BANK SELECTION REGISTER
AAAAAAAAAAAAAAAAAAAAAAAAAA
Bank ; (read/write) x x x x x x x b
7 6 5 4 3 2 1 0
E Q U 0 7H
; 0 * bank 0, 1 = bank 1
; only two banks in SPC40a
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUA
AAAAA
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAA WAKE UP
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA*
Wake_up (read/write) x x x x x x x w
7 6 5 4 3 2 1..0
EQU OSH ;
• w=(0*disable, l=enable wake-up on port_d change)
; read to see if wake-up, or normal reset
this is the on
; Always reset stack -y source on wake forup a.wake-up
;AAAAAAAAAAAAAft\£AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
; ;
AAAAAAAAAAAA? AAAAAAAAAAAAAA SLEEP
AAAAAAAAAAAAAAA *" AAAAAAAAAA AAAAAAAAAA
Sleep Kw 09H ; (write) x x x x x x x s
; 7 6 5 4 3 2 1 0
; s«(0*don't care, l=s
- *
; writting 1 t^ bitO, i as sleep
AAAAA ;AAAAAAAAAAAAXAAAAAAAA, JUU^AAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA TIMER A CONTROL REGISTER
AAAAAAAAAAAAAAAAAAAAAAAAAA
; this needs more work to understand DMH
TMA_CQN EQU OBH ; (write)
;;
7 6 5 4 3 2 1 0
m x x x
;;7
; m= Timer one mode (0=Timer,l=Counter)
A-7
----------------------- Page 9-----------------------

J
Bit3: IE1 Ai IE1= 0: Counter clock* external clock from IOC2
Bit2: T1 A'
Bitl: IEO A'
BitO: TO AO IE0= 0: Counter clock* external clock from IOC2
= 1, TO* 0: counter clock* CPUCLK/4
TO* Is counter clock* CPUCLK/64
;
* 1, Tl= 0: counter clock* CPUCLK/8192
Tl* 1: counter clock* CPUCLK/6553v
;;;;
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAAAAA INTERRUPTS
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Interrupts EQU ODH ; (read/write)
J
7 6 5 4 3 2 1 0
w i n a b 3 2 1 e
; ;
w = (0=watch dog ON, power-on default) (l=watch dog OFF)
m = (0=Timer A generates NMI INT, l*Timer A generates IRQ INT)
a = (0=Timer A interrupt off, l=Timer A interrupt on)
b * (Oa'Iimer B interrupt off, 1=Timer B interrupt on)
3 * (0*CIJ CLK/1024 interrupt off, 1*CPU CLK/1024 interrupt
on)
2 = (0=CPU CLK/8192 interrupt off. 1=CPU CLK/8192 interrupt
on)
; 1 * (0=CPU CLK/65536 interrupt off , 1*CPU CLK/65536* interrupt
on)
e * (0*external interrupt off, l*external interrupt on)
rising edge, from port_c bitl
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,VSLAAAAAAA
AAAAA
;; ;
AAAAAAAAAAAAAAAAAAAAAXAAAAAAA TIMERS
AAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAA
; There are two 12bits timers.
; Timer A can be either a timer or a counter , (as set by TIMER_CON)
; Timpr B can only be used as a timer.
; y
Tillers count-up and on overflow from 0FFF to 0000, this carry bit will
create an interrupt if the corresponding bit is set in INTERRUPTS
register.
; The timer will *je auto reloaded with the user setup value, and
start
; count-up again.
;
• • *
;;
Counter will resit by user loading «00 into register TMA_LSB and
TMA_MSB.
; Counter registers can be read on- t »-*ly, this will nut affect
register
; values, or set them.
t i t
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, vAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA TIMLH A (low byte
) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
TMA_LSB EQU 10K (read/write)
?;
all 8bits valid (lower 8bits of 12bit timer)
AS
----------------------- Page 10-----------------------

;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAXAAAAAAAAAAAAAAA TIMER A (high byte)
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
TMA_MSB
; read
EQU 11H (read/write)
x x x x 11 10 9 8
7 6 5 4 3 2 1 0
timer upper 4bits
;
rite timer upper 4bits
register bit
xx t c 11 10 9 8
7 6 5 4 3 2 1 0
t=(0=speech mode, l=Tone mode)
this connects the AUDA pin to either
the DAC. , or Timer generated square wave
; c=(0=CPU clock. 1=CPU clock/4:
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAXAA
; AAAAAAAAAAAAAAAAAAAAAAAA TIMER B (low byte
) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
TMB__LSB E:TJ 12H
; all 8bits valid (lower Sfcits of 12bit timer)
;AAAAAAAAAAAAAAAAAAJ AAAAAAAAAAAAA.iAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.AAAAA.AA~
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA TIMER B (high byte)
AAAAAAAAAAAAAAAAAAAAAA;..AAAA
TMB_MSB
; read
EQU 13H
x x x x 11 10 9 8
7 6 5 4 3 2 1 0
timer upper 4bite
write timer upper 4bits
register bit
x x t c 11 10 9 8
7 6 5 4 3 2 1 0
t=(0=speech mode, l=Tone mode)
this connects the AUDB pin to either
the DAC2, or Timer generated square wave
; c=(0=CPU clock, 1=CPU clock/4.
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/ AAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAAA D/A converters
AAAAAAAAAAAAAAAAA.AAAAAAAAAAAAAAAA
EQU 14H ; (write)
; (write)
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
DAC1
DAC2 EQU 15H
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
this needs more work to understand DMH
ADCoutputPort16H:
;
16H
DAC
.ctrl EQU 16H
; <
A-9
----------------------- Page 11-----------------------

Bit7: I/O 0: Disable ADC; 1: Enable ADC
Bit6: I/O
Bit5; I/O
Bit4: I/O
Bit3: I/O
Bit2: I/O
Bitl: I/O
BitO: I/O
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAX>AXAXXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
XAAAA
;;OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA * Operating equate definition *UA JLAAA^
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAU
;EQdef
; ; ;
to calculate sampl
; CPU clk/sample rat*
; Hi & Lo timer reg coii
; FFF
tor
« FFF
divisor = valu» oa 1 hi U lo reg.
;ex: 6mHZ elk = 166nSEC
start Tracker
;/* here is son. definition chnge of time interrupt constant •/Tracker
;SystemClock:
same
EQU 6000000 .•Select 6000000Hz it will be the
;as before
•.
SystemClock: Select 3579545Hz while we ate
use that
EQU 3579545
;crystal
TimeA_low:
definition
TirneA_hi:
EQU <(4096~(SystemClock/5859)) ;put constant
EQU >(4096-(SystemClock/5859))
TimeB_low:
TimeB hi:
<(4096
-(SystemClock/1465))
>(4096
-(SystemClock/1465))
EQU
EQU
; end Tracker
Port_def EQU A7h ;D hi=out.D lo»in, / C hi*out.C lo=inp
;B hi=inp,B logout / A hi=out ,A lo=out
Con._ def 50H
;C hi*out buffer, C lo*in p il hi
;B hi*in hi-Z , B logout buffer
;A hi=out buffer, A lo=out buffer
EQU ;D hi*out buffer, D lo*in pull lo
Intt__dfIt EQU DOh ,- sets interrupt reg * no /atchdog,irq
; timer B , and EXt port C bit 1 = off
run EQU 1s
;
A-10
----------------------- Page 12-----------------------

; Send a braking pulse to stop motor drift, and this EQU is a decimal
number
that determines how many times through the 2.9 mSec loop (how many
loops)
; the brake pulse is on. If attempting to make single count jumps, the
; brake pulse needs to be between 26 and 30. For any jump greater than
10
» braking between 22 and 80 is acceptable. ( Long jumps are not critical
; but short jump will begin to oscillate if braking is too great.)
; 60 long fc 20 short work at 3.6v and no pulse width
Dnft_long EQU
Drift_shc~t EQU
60 ;number times thru intt before clearing pulse
25 ;
; set this with a number from 0
sensors
; for the sequential increments. If it times cut the table pointer
; goes back to the start, else each trigger increments through the
table.
255 to determine timeout of all
; NOTE: this time includes the mctor/speech execution time !!!
Global_time EQU 16 ; 1= 742 mSEC ;; 255 = 1 .3 seconds
;;
This determines how long Firby wait* with no sensor activity, then
; calls the Bored_table for a random speech selection.
; Us a number between 1 & 255. Should probably not be less than 10.
; SHOULD BE > 10 SEC TO ALLOW TIME FOR TRAINING OF SENSORS
Bored_reld EQU 40 ; 1= 742 mSEC ;; 255 = 189.3 seconds
; ;
Each sensor has a sequential random sp. t which must equal 16.
; Each sensor has a different assignment.
; The tables are formatted with the first X assignments random
; and the remaining as sequential.
Seq_front
Ran_front
EQU 8
EQU 6
Seq_back
Ran_back
EQU 9
EQU 7
Seq_tilt 10
Ran
^tilt
EQU
EQU 6
Seq^invert
Ran_invert
EQU 8
EQU 8
Seq_sound
Ran_sound
EQU 0
EQU 16
All
----------------------- Page 13-----------------------

Seq_light
Ran__light
EQU 0
EQU 16
Seq_feed
Ran_£eed
EQU 8
EQU 8
Seq_wake
Ran_wake
EQU 0
EQU 16
Seq_bored 7
Ran_bored
EQU
EQU 9
Seq_hunger
Ran_hunger
EQU 5
EQU 11
Seq__sick
Ran_cick
EQU 4
EQU 12
/ rev furbllja
; Each sensor also determines how often it is random cr sequential
; as in 50/50 or 60/40 etc.
/ These entries are subtracted from the random nurber generated
; and determine the split , (the larger here, the mere likely sequential
pick >
Tilt_split EQU
Invert_split
Front_split EQU
Back__split EQU
Feed__split EQU
Sound_split EQU
Light_split EQU
Bored_split EQU
Hunger__split
Sick__split EQU
8Oh
EQU eoh ;
80h
80h
8Oh *.
80h
80h
80h
EQU 80h
80h ;
/ at any age, below this number when a
random number is picked will cause him
to pull from the age 1 table. More Furbish.
Randonuage EQU 30h
;; ;
Leam_chg EQU 31 / amount to inc or dec training of words
;
/amount to increase 'Hungry * for each feeding
/ below thiB starts complaining about hunger
/ below this starts complaining about sickness
/ below this only complains about sickness
/ cant go below this when really sick
Food
Need_food
Sick_reff
Really_sick EQU COh
Max_sick EQU 8Oh
EQU 20h
EQU 80h
EQU 6Oh
/ subtract X amount for each sensor trigger
/subtract X caount for each sensor trigger
Hungry__dec
Sick_dec
EQU 01
EQU 01
;
/ turn speech word active off
/ bit 2 off - lar word sent to TI
Nt_word
Nt_last
EQU FEH
EQU FBH
A-12
----------------------- Page 14-----------------------

Nt__term
Clr_spch
CTS_lo
EQU F7h ;bit 3 off -terminator to speech TI
FCH ;clears spch__activ 6 word
^activ
EQU FDH /makes TI__CTS go lo
EQU
/clears motor fwd bit
FEh
FBh
/turns both motor lines off (hi)
jbit 7 lo
;bit 6 lo
/clears motor pulse on req
/clear IRQ stat
DFh
100
Motor_rev EQU
Motor_inactv
Motor__ntseek
Motor_off EQU
Motor_revs EQU
Motor_fwds EQU
Ntmot
.
on EQU
Nt_IRQwi EQU
Nt_Motor_led
Motor_led_rst
FDH
/kill motor activ bit
/kill motor seek bit
EQU
EQU
COh
7FH
BFh
DFh
F7h
/ motor opto led off
/ X • 2.9 millSec for shut off time
EQU
EQU
zcks motor speed only on wake up
/clears 2nd part of motor speed test
Nt_Init_jmotor
NT_Init_Mspeed
EQU FBh
EQU F7h
/ number of IRQ to count opto pulse speed
/value to adjust speed to
Opto_spd_reld
SpeedLreff EQU
EQU 80
30
Nt_jnacro_actv EQU 7Fh /clears request
Not_bside EQU
Not__binvrt EQU
Not_tch_bk EQU
Not_tch_ft EQU
Not_feed EQU
Sound_re1oad
Snd_cyc1e_r1ed
/ clear ball side done flag
/clear ball invert done flag
/ clear touch back sense done flag
/clear touch back sense done flag
/clear feed sense done flag
/ X * 742 milisec time between trigger
/sound sense referrence cycle timer
F7h
EFh
BFh
DFh
FDh
EQU 05
EQU 02
;
Light_reload EQU 07 /X • 742 milisec until new reff level set
Nt_Slot_dn EQU FEh /clr IR slot low detected
/ turns reff off
FEh
Nt_lt_reff EQU
Nt_lght_stat
EFh
EQU /clears light bright status to dim status
Bright k Dim equates have been moved to the light include file.
/ light sensor trigger > reff lev*l
/ Light sensor trigger < reff level
•• •
9 9 4
/ / / Bright EQU
/ ;/Dim
05
EQU 05
?;
Qik_sna__reload
/Nt__srd_reff
Nt._ do_.snd EQU
Nt_snd_stat ECU
EQU 01 ;
DFh /kill sound reff level bit
/clears sound state change req
/clears Sound_stat
EQU
FEh
FBh
»
/kills fortune teller mode
FDh
/kills Hide k seek game mode
/kill8 simon say game mode
Nt_fortune EQU FEh
Nt_Rap
Nt_hideseek EQU
Nt_aimon EQU
Nt_do_tummy EQU
Nt_ do_back EQU
Nt_do__feed EQU
Nt__do_tilt EQU
Nt_do_invert
Nt_do_lt_brt
EQU /kills R~p mode
FBh
*7h
/clears sensor change req
/clears sensor change req
/ clears sensor change req
/clears sensor change req
7Fh
FDh
F7h
EFh
DFh
BFh
/clears sensor change req
/clears sensor change req
EQU
EQU
A-iJ
----------------------- Page 15-----------------------

Nt__do_lt_dim EQU FBh :clears sensor change req
;
FEh ;clears game mode bits
;clears req for 2 tal.e instead of 4
/clears random/seque tial status
Nt_temp_gaml
Nt_half_age EQU BFh
Nt_randm EQU 7Fh
EQU
; 1= 742 mFE
GameT_reload EQU 24 - ;; 255 * 189.3 -econds
OAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAXA)UvXAAAAAAAAAAAAAi
* Variable definition
XAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.^AUAAXAXAAAAAAAO
Rdef
(Ram = $£0 to $FF)
; DO NOT CHANGE RAM ASSIGNMENTS (X pointer used as offsett)
*• The next group of RAM locations can be used by any
sensor routine but cannot be used to save data.
TD4P ONLY !
;
koball
TEMPO equ 80h
TEMPI
TEMP2
TEMP3
TEMi-4
IN DAT
equ 61h
equ 82h
equ 83h
equ 84h
equ 85h
; ••• end koball
;* END TEMP RAM
;what function is in process
87h
88H
89H
Task_ptr 66h
Port_A_image
Port_B_Image
Port_D_Image
EQU
EQU
EQU output port image
EQU output port image
;
/speech word lo adrs
hi "
8Ah
8Bh
jsaysent word pointer
Word_lo
Word_hi
Saysent__lo EQU
Saysent_hi EQU
Bank_ptr EQU
Which_word EQU
S?:OUp
Tx_data
E"U
EQU . *
8CH
8DH
which bank words are in
which word or saysent to call
/which saysent group table
8EH
8FH
EQU 90H
EQU 91H
/ holds table number of motor positon
93H / which motor group table
Which_motor EQU 92h
Mgroup
Motor_lo
Motptr_lo
Motptr_hi
Which_delay EQU
Intt_Temp
Drift_fwd
Drift_rev
Pot_timeL
EQU
EQU 94H
EQU 95h table pointer to get motor position
EQU 96H
97H how much time between motor calls
EQU 98H
EQU 99h time motor reverses to stop drift
EQU 9Ah
EQU 9Bh motor uses to compare against current positon
moved to hi ram that is not cleared on power up
jPot_timeL2
;
/holds motor power off pulse time
9Dh
9Eh
/need majority cnt to declare a valid slot
Moff_len EQU 9Ch
Mon_len
Motor_pulsel
Slot_vote EQU 9Fh
/ holdr motor power pulse time
/motor pulse timer
EQU
EQU
A 14
----------------------- Page 16-----------------------

> *otor_lecL.timer
Mot_speed_cnt
Mot_opto_cnt
Cal_switch_cnt
motorstopee equ
Drift_counter
EQU AOh how long after motion done led on for IR
EQU Alh motor speed test
EQU A2h
used to eliminate noisy reads
;times wheel count when stopping
A5h
EQU A3h
A4h
EQU ;decides how much braking pulse to apply
;
Mili_sec
Cycle_timer EQU
Senaor_timer
Bored_timer EQU
;used in calc pot position by timer
;bypasses intt port c updates to motor
A8h
;time with no activity to random speech
EQU A6h
A7h
EQU ;times between sensor trigger
A9h
;which speech/motor call is next
;which speech/motor call is next
ACh
ADh
;which speech/motor call is next
Invrt_count EQU AAh
Tilt_count EQU
Tchfmt_count
Tchbck_count
Feed_count EQU
ABh
;which speech/xnotor call is next
;which speech/motor call is next
EQU
EQU
AEh
AFh ;last IR sample data to compare to next
;used in IRQ to create 2.8mSec timers
Last_IR
Wait_time EQU
EQU
BOh
Blh ;Light sense* routines
;which speech/motor call is next
;holds previou. sample
Light_timer EQU
Lght__count EQU
Light_reff EQU
B2h
B3h
;
;time to set new reff level
;which speech/motor call is next
Sound_timer EQU B4h
Sound_count EQU B5h
B6h ;set every 742 miliseconds
;table pointer
Milisec_flag
Macro_Lo
Macro_Hi
Egsr_cnt
EQU
F?U B7h
EQU B8h ;
EQU B9h ;easter egg table count pointer
? Koball code rev B
EQU BAh
EQU BBh
EQU BCh
HCEL_LO
HCEL_HI
BIT_CT
end koball
Ligi _shift EQU BDh ;( was TMA_INT ) used for threshold change
J
;prevents random number twice in a row
;sequential selection for bored table
;general use also used for wake up
Prev__random EQU
Bored_count EQU
TEMPS
BEh
BFh
EQU COh
;use in sensor training routines
C2h
;use in sensor training routines
Temp_ID2 EQU Clh
Temp_ID
Leam_temp EQU CEQU 3h ;use in sensor training routines
EQU C4h ;holds last call to see if sleep or IR req
EQU C5h
Req__macro_lo
Req_jmacro_hi
;sequential counter for sick speech table
;sequential counter for hunger speech table
Sickr__count EQU C6h
Hungr_count EQU C7h
A-I5
----------------------- Page 17-----------------------

Motor_pulse2 EQU C8h /motor pulse timer
DO NOT CHANGE BIT ORDER
Stat_0
Want_name
Lt_prev_dn EQU
Init_/&otor EQU
Init_J4speed EQU
Train__Bk_prev
Say_new_name
REl dark sleep
Dark__s1eep_prev
gotosleep
Equ C9h /System status
0 *set forces system to say Fumy's name
0 * done flag for quick light changes
1 * on wakeup do motor speed/batt test
3 * 2nd part of motor speed test
/bit 4 » set when 2 back sw hit in a row
/ bit 5 = only happens on cold boot
/bit 6 a set -dark level sends to sleep
/bit 7 = if set on wake up thendont
EQU 01H bit
02K bit
04H bit
08H bit
EQU 10H
EQU 20H
EQU 40H
EQU 80H
;
Stat_l
Word_activ
Say_activ
Word__end
Word_terir
Up_light
Snd_reff
Half_age
Randn\__sel
EQU CAH /system status
0 = set during any speech
1 = when saysent is in process
2 = set when sending FF word end to TI
3 = set to send 3 iffh to end speech
4 *set when shift is incnnntg
5 = set for new referrenc cycle
6 a set for 2 tables of age instead of 4.
7 =decides random/sequential for tables
EQU 01H bit
EQU 02H bit
bit
bit
EQU 04H
EQU 08H
EQU 10H bit
EQU 20H bit
EQU 40H bit
EQU 80H lit
Stat_2
Motor_actv
Motor_fwd
Motor_seek
Bside_dn
Binvrt_dn
Tchft_ dn
Tchbk_dn
Macro__actv
EQU CBH /system status more
0 a set = motor in motion
1 = set=fwd clr=rev
2 = seeking to next position
3 = set = previously flaged
4 = set- prev done
5 * -
6 * “
7 =set when macro in process
EQU 01H bit
bit
bit
EQU 02H
EQU 04H
bit
bit
bit
EQU 3H
EQU 10H
EQU 20H
EQU 40H bit
EQU 80H bit
Stat_3
Lght_stat
Feed_dn
Sound_stat
IRQ_dn
Lt_reff
Motor_on
M_forward
M_reverse
EQU CCh /system status
0 = setabright clr = dim
/bit 1 = set- prev done
2 « "
/ bit 3 = set when IRQ occurs by IRQ
/ bit 4 =set for light sense reff cycle
5 = set=motor pulse power on
6 e lr * move motor forward
7 =clr * move motor reverse
EQU 01H /bit
EQU 02H
EQU 04H /bit
EQU 08H
EQU 10H
EQU 20H bit
EQU 4GH bit
EQU 80H bit
; ; j
Following bit maps are reserved for easter egg / games
Stat_4
Do_snd
Do_lght_brt EQU
Do_lght_dim EQU
Do_tummy
Dojback
CDh / system task request state
/ bit 0 * set when sound > prev reff level
/bit 1 * set when light > prev reff level
/ bit 2 « set when light < prev reff level
? bit 3 » set when front touch triggered
10H
EQU
EQU 01H
02H
04H
EQU 08H
EQU / bit 4 * u#t when back touch triggered
A-16
----------------------- Page 18-----------------------

Do
.feed
Do_tilt
Do_invert
20H
40H
;bit 7 = set when inverted sensor triggered
;bit 5 = set when feed sensor triggered
;bit 6 * set when tilt sensor triggered
EQU
EQU
EQU 80H
;
Stat_5
temp_gaml
temp__gam2
t«rop_gam3
temp_gam4
ternp__gam5
tenjp_gam6
temp__gam7
tewp_gam8
Equ CEh ;game status
01H ;bit 0 =used in game play
02H ;bit 0 a * *
04H / bit 1
06H ;oit 3 *
10H ;bit 4 »
20H ;bit 5 a
40H ;bit 6 =
80H ;bit 7 a
EQU
EQU
EQU
EQU
EQU
EQU
EQU
EQU
;
Game__l
Fortune
,.mode
Rap_jnode EQU
Hideseek_jnode
mode
Simonsayjmode
mode
Burp_jnode EQU
Name
.jnode EQU
Twinkle_mode
Rooster_mode
EQU CFh ;system game status
;bit 0 =set a furby in fortune teller mode
;bit 0 =set = furby in RAP SONG mode
04H
EQU 01H
02H
EQU ;bit 1 =set a furby in hide & seek game
EQU 08H ;bit 3 aset = furby in simon says game
;bit 4 aset a mode
;bit 5 a
40H
80H
-7H
20H
;bit 6 *
;bit 7 a
EQU
EQU
;
;easter egg disqualified when clear
;bit 0 a fortune teller
02h
04h
Qualifyl:
DO fortune
DQ_rap
DQ_hide
DQ simon
DO burp
IX) name
DQ_twinkle
DO rooster
EQU DOh
EQU Olh
;bit 1 = rap song
;bit 2 a hide and seek
;bit 3 = simon says
lOh
20h
;bit 6 = sings song
;bit 7 a rooster loves you
EQU
EQU
EQU 08h
;bit 4 = burp attack
;bit 5 = says his name
EQU
EQU
EQU 40h
EQU 80h
;
THIS GROUP OF RAM IS SAVED IN EEPROM
; Need to read these from EEPROM and do test for false data
-age" uses bit 7 to extend the "age_counter " to 9 bits, and this
; is saved in EERPOm also.
;"AGE * MUST BE IN Dlh BECAUSE EEPROM READ & WRITE USE THE EQU FOR START
RAM.
/ age a 0-3 (4 total)
;inc on motor action,rolls over & inc age
Age EQU Dlh
Age .counter EQU D2h
D3h ;holds 1-6 pointer to firby's name
EQU P4h ;which * one of three voices
D5h / counter from wheel I.R. sensor
EQU D6h
EQU D7h
EQU D8h
EQU D9h
Name EQU
Rvoice
Pot_tiroeL2 EQU
Hungry_counter
Sick__counter
Seed .1
Seed_2
/ holds hungry/full counter
/ healthy/sick counter
/ only seed 1 & seed 2 are saved
/ These are used for training each sensor. There is a word number which
A-17
----------------------- Page 19-----------------------

; is 1-16 for the sesnor table macro list and a ram for count which
; determines how often to call the learned word.
....DO NOT CHANGE ORDER RAM adrs by Xreg offset
Tilt_learned
Tilt_lm_cnt
;which word trained
;count determines how often called
EQU DAh
EQU DBh
12
FeedL.1earned
Feed__lm_.cnt
EQU DCh ;which word trained
;count determines how often called
3
EQU DDh 4
Light_leamed
Light_lm_cnt
;which word trained
;count determine now often called
EQU DEh 5
EQU DFh 6
Dark_learned 7
Dark_lm_cnt
EOh ;which word trained
;count determines how often called
EQU
EQU Elh 8
Front__learned
Front_lra_cnt
;which word trained
;count determines how often called
EQU E2h 9
EQU E3h 10
Sound__1earned
Sound_lm_cnt
E4h ;which word trained
;count determines how often called
EQU 11
EQU E5h 12
;which word trained
;count determines how often called
Wake_learned
Wake_lrn_cnt
EQU Efh 13
EQU E7h 14
Invert_learned
Invert_lrn_cnt
;which word trained
;count determines how often called
EQU E8h 15
EQU E9h 16
; next is equates defining which ram to use for each sensor
; according to the sensor ram defined above, (compare to numbers above)
* Tilt_ID
definitions
Feed_ID
Light_ID
Dark_ID
Front_ID
Sour.d_ID
Wake_ID
Invert_ID
Back_ID
EQU 00 defines what offset for above.ram
EQU 02
EQU 04
EQU 06
EQU 08
EQU 10
EQU 12 .
EQU 14
EQU EEh ;special value triggers learn mode
;*;
For power on test, WE only clear ram to E9h and use EAh for a
; messenger to the warm boot routine. We always clear ram and initialize
; registers on power up, but if it is a warm boot then read EEPROM
; and setup ram locations. Location EAH is set or cleared during power
up
; and then the stack can use it during normal run.
Warm_cold EQU EDh
Spcl_seedl EQU EEh
Spcl_seed2 EQU EFh
Deep_sleep EQU FOh 0=no deep sleep llh is. (tilt wont wakeup)
; Need to allow stack growth down ( EAh- FFH )
A-18
----------------------- Page 20-----------------------

Stacktop EQU FFH ;Stack Top
;*
**
;*
**
***
•••
ORG 00H
BLKW 300H.00H .- Fill 0000 AAA 05FFH= 00
tfAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
^i
a P R O G R A M S T A R T S H E R E a
J * a
; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO
ORG 0600H
RESET:
Include Wake2.asm ;asm file
; end Tracker
; For power on test, WE only clear ram to E9h and use EAh for a
; messenger to the warm boot routine. We always clear ram and initialize
; registers on power up. but if it is a warm boot then read E'PROM
; and setup ram locations. Location EAH is set or cleared duri. 7 power
up
I and then the stack can use it during normal run.
Clear RAM to 00H
;
; data for fill
; start at ram location
«00H
•E9H
LDA
LDX
RAMClear:
; base 00 # offset x
; next ram location
; check for end
; branch, not finished
; fill done
STA 00,X
DEX
•7FH
RAMClear
CPX
BNE
A-i9
----------------------- Page 21-----------------------

Main:
InitIO:
LDA •01 ;turn DAC on
STA DAC_ctrl ;DAC control
•Port_def
Ports_dir
;aet direction control
;load reg
LDA
STA
*Con_def
Pcrt8_con
;«et configuration
;load reg
LDA
STA
•00 ;set for bank 0
;set it
;disable vakeup control
LDA
Bank
•00K
Wdke
.up
•OOh
Sleep
STA
LDA
STA
;disable sleep control
;set dont care
LDA
STA
•Intt_dfIt
Interrupts
;Initialize timers, etc.
;lead reg
LDA
STA
•OOH
TMA_CCN
#TimeA_low
TMA_LSB
;set timer mode
;set reg
;get preset timer for interrupts
;load
LDA
STA
LDA
STA
•TimeA_hi
THAJKSB
;get hi byte for preset
;1oad it
LDA
STA
;get preset timer for interrupts
;load
;get hi byte for preset
;load it
•T*xneB_low
TMB_LSB
•TimcB_hi
TKB_MSB
LDA
STA
LDA
STA
•COh ;preset status for motors off
Stat_3
LDA
STA
;init ports
;output
•OOH
Port_A
LDA
STA
•33H ;init ports
Port_B_Image
?ort_B
LDA
STA ;ram. image
STA ;output
;init ports
;output
LDA •ora
STA Port_C
•D0H ;mit ports
Port_D_Image
Port_D
LDA
STA ;ram usage
STA ;output
;milisec timer reload value
LDA STA •Mili FFh_sec .- also preset IRC timer
CLI ;Enable IRQ
A-20
----------------------- Page 22-----------------------

JSR Kick_IRQ ;wait for interrupt to restarr
JSR TI_reset ;go init TI (uses •Cycle.Limer *)
; Preset motor speed, assuming mid batt^y life, we set the pulse width
; so that the motor wont be running at 6 volts and bum out. We then
; predict what the pulse width should be for any voltage.
LDA #Mpulse_on ;preset motor speed
LDA #11
STA Mon_len ;set motor on pulse timing
LDA #05
STA Moff_len
;;
set motor off pulse timing
;• 'Diagrvstico and calibration Routine
ttttttittVAtttlttltttitltttttlttittttti llittttittttttltttiltttlittt
9
;
Include Diag7.asm ;asm file
Only called by diagnostic speech routines •*•••••••
; Be sure to set *MACRG_HI * and all calls are in that 128 byte block.
Diag_jnacro:
STA Macro_Lc
LDA
to diag call
CLC
ADC Macro_Lo
STA Macro_Lo
LDA #01
STA Macro_Hi
•JSR Get_jnacro
JSR Notrdy
;save In byte of Macro table entry
#0b8h ;#9Oh , offset to adrs- 400 added
;aud in offset
;update
;get hi byte aars 400 * 190h
;save hi b* te of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
RTS ;yo !
; Enter with Areg holding how many 30 mili second delay cycles
Half_delay:
STA TEMPI ;save timer
Half d2:
;set 1/2 sec (y * 2.9 mSec)
STA LDA •Cycle 10 _timer ;set it
Half_d3:
;ck if done
;loop
Cycle_timer
Half_d3
TEMPI
Half_d2
LDA
BNE
DEC ;
BNE ;loop
RTS ; done
A-21
----------------------- Page 23-----------------------

Test_byp: ;We assume diagnostic only runs on coldboot
LDA #FFh ;initialize word training variable
STA Temp_ID
LDA «FFh
STA Hungry_counter
STA Sick_counter
?
;preset furby's health
; ;
We ait here and wait for tilt to go away, and just keep incrementing
; counter un-il it does. This becomes the new random generator seed.
Init_md:
INC TEMPI ;random counter
;get switches
;check tilt & invert sw
;loop til gone
;get new seed
;stuff it
LDA Port_D
AND •03
Init_md
TEMPI
Spcl_seedl
Seed_l
BNE
LDA
STA
STA ;also load for cold boot
; Use feed sw to generate a better random number
Get_feed
Stat__4
•Do_£eed
Feed_rnd'
End_coldinit
JSF ;go test sensor
LDA ;get system
;ck sw
;if feed sw then cold boot
AND
BNE
JMP ;else do warm boot
Feed_md:
;random counter
;system
;clear any prev feed sw senses
;update
INC TEMPI
Stat_4
•DFh
Stat_4
Get_feed
Stat_4
•Do_feed
Feed__md
TEMPI
Spcl_seedl
Seed_l
LDA
AND
STA
JSR ;go test sensor
LDA ;get system
;ck sw
;wait for feed to go away
;get new seed
;stuff it
AND
BNE
LDA
STA
STA ;also load for cold boot
;; IF this is a cold boot , reset command then clear EEPROM and
? chose a new name and voice.
Do_colcLboot:
LDA «00
STA Warnv_cold ;flag cold boot
A-22
----------------------- Page 24-----------------------

LDA Stat_0
ORA •Say_new_narr.e
STA Stat_0
system
make system say new name
NOTE :::
VOICE AND NAME SLECTION MUST HAPPEN BEFORE EEPROM WRITE OR
THEY WILL ALWAYS COME UP 00 because ram just got cleared!!!!!!
; Random voice selection here
#80h
IN DAT
;ge random/sequential split
;save for random routine
LDA
STA
#00 ;make sure only gives random
;get number of random selections
;go get random selection
LDX
#10h
Ran_seq
LDA
JSR
TAX
Voice_table,X
Rvoice
;get new voice
;set new voice pitch
LDA
STA
;
; On power up or reset, Furby must go select a new name ahw how
cute.
• i #
JSR Random
AND #lFh
STA Name
*
;get 32 possible
;set new r.ume pointer
JSR Do_EE_write ;write the EEPROM
End_coldinit:
ititttttttittttttittttlttiiltliltttttttttttttttttiitttttttlitiiitltj.it
;• 'Special initialization prior to normal run mode
;• Jump to Wanr._boot when portD wakes us up
jfiiiiiifiiiiiiiiiifiiiiiiiffiiiiiiiiiifiiiiiiiffmiiifiiifiiifiimii
Wamuboot: ;no nal tart when Port_D wakes UP up.
JSR SJBEfri M_READ ;read data to ram
;Eprom__read_byp:
; If light osc fails, or too dark and that sends us to sleep, we
; set 'Dark_sl^ep_prev' and save it in EEPROM in '5eed_2'.
; when the sleep routine executes,(00 01 bated on this bit)
; When we wake up we recover this bit and it becomes the previous done
; flag back in 'Stat_0', so that if the osc is
A-23
----------------------- Page 25-----------------------

; still dark or failed, Furby wont go back to sleep.
LDA Seed_2
BEQ No_prevsleep
LDA Stat_0
;from EEPROM
;juxnp if none
;system
#Dark_sleep_prev ;prev done
;update
ORA
STA Stat_Q
No_jprevsleep:
LDA Spcl_seedl
STA Seed_l
;recover start up random number
;set generator
Pot_timeL2 is save in ram through sleep mode and then reloaded *
Pot_timeL which is the working register for the motor position.
This allows startup routines to clear ram without forgetting the
last motor position.
LDA Pot_timeL2 ;get current count
ST/ Pot_ imeL ;save in motor routine counter
; Get age and make sure it is not greater than 3 (age4)
LDA Age
AND *83h
;get current age
•.
preserve bit 7 which is 9th age counter bit
•# #* •4 •i •# and insure age not >3
STA Age ;set system
;
*Bored_reld ;reset timer
Bored_time'- ;
LDA
STA
LDA *03 ;set timer
STA Last_IR ;timer stops IR from hearing own IR xmit
;go get light level sample
;get new count
Light_reff ;update system
Get_light
TEMPI
JSR
LDA
STA
;
;decide if warm or cold boot
;ck for warm boot
;jump if is
Warm_cold
*llh
Nonzero
LDA
CMP
BEQ
A-24
----------------------- Page 26-----------------------

#00
Macro_Lo
Macro_Hi
Get_macro
Notrdy
LDA ;point to macro 0 (SENDS TO SLEEP POSITION)
STA
STA
JSR ;go start motor/speech
JSR ;Do / get status for speech and motor
No_zero:
;preset motor speed
;set motor on pulse timing
LDA #11
STA Mon_len
#05 ;set motor to 3/4 speed for speed test
;set motor off pulse timing
L
~*A
STA Moff_len
;
;clear all system sensor requests
/update
LDA •00
STA Stat_4
; Currently uses 4 tables, one for each age.
LDA Stat_0 ;system
ORA #Init_motor / flag motor to do speed test
ORA #Init_Mspeed
STA Stat_0
;2nd part of test
;update
; ;
Do wake up routine :
•Global.,time :reset timer to trigger sensor learning
Sensor_timer •
Ida
STA
;get random/sequential split
/save fcr random routine
#80h
IN_DAT
LDA
STA
/make sure only gives random
;get number of random selections
/ go get random selection
;g«rt decision
#00h
#10h
Ran_seq
TEMPI
LDX
LDA
JSR
LDA
/save decision
/which ram location for learnea word count
IN_DAT
•Wake_ID
STA
LDA
(offset)
Start_learn /go record training info
/get back word to speak
JSR
LDA IN_DAT
;do age calculation for table entry
;age offset
Wakeup_Sl ,X /get new sound/word
Macro_Lo
Decid_age
TEMPO
JSR
LDX
LDA
STA /save lo byte of Macro table entry
INX
Wakeup_Sl,X / get new sound/word
Macro_Hi
Start__macro /go start speech
LDA
STA / save hi byte of Macro table entry'
JMP
A-25
----------------------- Page 27-----------------------

ttlittttttittiiiltllttittitllttttitttiittttttiiiitttiittiititiliitttt
• ‘IDLE Routine •
tllttltttttttttttlttttlttttttUttttltltlttttilltlltUlttttttUlltttii
Idle:
; Idle routine is the time slice task master (TSTM) ugh!
; We must call each routine and interleave with a call to speech
; to insure we never miss a TI request for data.
JSR Notrdy ;Do / get status for speech and motor
;;
THis bit is set when light sensor is darker than ’Dark_sleep'
Stat_0
#P£Q_dark_s1eep
No_dark_req ;jump if not
LDA ;system.
AND ;ck for req
BEQ
Stat_0
«BFh
Stat_0
LDA ;system
AND ;kill req
STA ;update
#A6h
Macro_Lo
«00h
Macro_Hi
Start_macro ;go say it
LDA ;sleep macro
STA
LDA ;sleep macro
STA ;
JMP
No__dark_req:
; When any sensor or timer calls the "start_macrop routine, the
; Macro_Lo & Macr ~_Hi are saved. Everyone jumps back to Idle and when
; speech/motor routines are finished , this routine will look at the
; macros that were used and execute another function if a match is
found.
Checks for his name first, then any IR to send, and finally, the sleep
commands. THe temp macro buffers are cleared before
;
Spcl_Namel:
LDX «00 ;offset
Spcl_Name2:
;ck lo byte
;ck for end of table (note 255 cant execute)
;done if is
LDA Ck_Name_table,X
CMP #FFh
Spcl_IRl
Req_macro_lo
Not_Name2
BEQ
CMP ;ck against last speech request
;jump if not
;to hi byte
BNE
INX
;ck hi byte
;ck against last speech request
Ck__Name_table,X
Req_macro_hi
LDA
CMP
A-26
----------------------- Page 28-----------------------

BNE Not_Name3
Say_Sname
;}Uinp if not
JKP ;speak it
Not_Name2:
INX
Not_Name3:
INX
JMP Spcl_Name2 ;loop til done
Say_Sname:
Stat_0
•DFh
Stat_0
LDA
;kill req for startup new name
;update
AND
STA
LDA Name ;current setting for table offset
CLC
ROL A ;21s comp
TAX
Name_table,X
Kacro_Lo
;get lo byte
;save lo byte of Macro tawle entry
LDA
STA
INX ;
;get hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
Name_table,X
Macro_Hi
Get_macro
Notrdy
LDA
0
STA
JSR
JSR
Spcl_IRl:
LDX •00 ;offset
Spcl_IR2:
;ck lo byte
;ck for end of table (note 255 cant execute)
IRxmit_table,X
•FFh
Spcl_IR_dn ;done if is
Req_macro_lo
Not_IRxmit2 ;jump if not
;to hi byte
LDA
CMP
BEQ
CMP ;ck against last speech request
BNE «.
INX
;ck hi byte
;ck against last speech request
IRxmit_table,X
Reqjmacro_hi
Not__IRxmit3 ;3ump if not
;point to IR table
LDA
CMP
BNE
IN}'
IRxnut_table,X
TEMP2
•FDh
TEMPI
Xmit_TI
LDA ;
;xmit temp rrm
;TI command for IR xmit
STA
LDA
STA ;
JSR ;go send it
•Bored_reld ;reset bored timer
Bored_timer ;
LDA
STA
LDA •03 ;set turner
STA Last IR ;timer stops IR from hearing its own IR
xmit
JMP Spcl__IR^dn ;done - ola
Not_IRxmit2.*
INX ;lo byte
Not_IRxmit3:
jhi byte
;xmit pointer
;loop til done
INX
INX
JMP Spcl_IR2
Spcl_IR_dn:
;
A-27
----------------------- Page 29-----------------------

;
Spcl_jmacrol:
LDX «00 ;cffset
Spcl_sleepl:
Sleepy_table,X
•FFh
LDA ;ck lo byte
CMP ;ck for end of table (note 255 cant execute)
Ck_macro_dn ;done if is
Req_jnacro_lo
Not_sleepy2 ;jump if not
;to hi byte
BEQ
CMP ;ck against last speech request
BNE
INX
Sleepy__table,X
Req_macro_hi
Not_sleepy.a ;jump if not
;ck hi byte
;ck against last speech request
LDA
CMP
BNE
LDA «00 ;clear macro pointers for wake up
Req_macro_lo
Req_jnacro_hi
STA
STA
;mod F-rels2 ;
Before going to sleep send sleep cmnd to all others.
LDA #15
STA TEMP2
LDA «FDh
STA TEMPI
JSR XmitJTI
xxnit temr ram
TI command for IR xmit
;go send it
;need to wait >600 milisec before going to sleep because we arent using
;busy flags from TI and need to make sure it is done transmitting the
;I.R. code, the sleep routine kills the TI and it would never send the
cmnd.
#25 ;how many 30 milisec cycles to call
;do 30milisec delay cycles
LDA
JSR Half_delay
;end mod
JMP GoToSleep ;nity-night
Not_sleepy2:
INX ;
Not_sleepy3:
INX ;
JMP Spcl_sleepl ;loop til done
Ck_macrc_dn.
LDA «00
STA Req__macro_lo
STA Req_macro_hi
JMP Test_new_name
;clear macro pointers for wake up
;on to task master
; ;
;;; j;; SLEEP TABLE & IR table MOVE TO INCLUDE FILE LATER
Sleepy_table:
DW 91 ;hangout
166 ;wake up
;wake up
;wake up
;wake up
DW
DW 167
DW 168
DW 169
A
-28
----------------------- Page 30-----------------------

258 /Back sw
/Back sw
/Back sw
DW
DW 259
DW 260
403 ;IR
413 ;IR
429 ;IR
DW
DW
DW
DB FFh,FFh ;FF FF is table terminator
IRxmit_table:
;trigger macro
;which IR command to call ( 0 - Of )
;trigger macro
;which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ crigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0 - Of )
jtrigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call i 0 - Of )
;trigger macro
/which IR command to call ( 0 - Of )
/ from rooster wake up
DW
DB 00
DW 13
DB 00
DW 17
DB no
DW 19
DB 00
DW 26
DB 00
DW 29
DB 00
DW 33
DB 00
DW 34
DE 00
DW 44
DB 00
DW 45
DB 00
DW 48
DB 00
DW 50
DB 0C
DW 55
DB 00
DW 60
DB 00
DW 149
DB 00
352 trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of )
DW
DB 01
DW 363
DB 01
DW 393
DB 01
/ trigger macro
/which IR command to call ( 0 - Of )
/trigger macro
/which IR command to call ( 0 - Of )
DW 248
DB 02
DW 313
DB 02
86 / trigger macro
/which IR command to call
z trigger macro
/which IR command to call
/ trigger macro
DW
DB 03 0 - Of )
DW 93
DB 03 0 - Of )
DW 339
A
-29
----------------------- Page 31-----------------------

03 ;which IR command to call ( 0 - Of J
/ trigger macro
;which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0
- Of )
DB
DW 344
DB 03
DW 351
DB 03
404 ztrigger macro
/ which IR command to call ( 0
- Of )
/trigger macro
/which IR command to call ( 0
- Of )
DW
DB 04
DW 405
DB 04
293 / trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call { 0 - Of )
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0
DW
DB 05
DW 394
DB 05
DW 406
DB 05
DW 414
DB 05
DW 422
r*B 05 Of )
395 / trigger macro
/ which IR command to call ( 0
/ trigger macro
/ which IR command to call ( 0
- Of )
/ trigger macro
/which IR command to call ( 0 - Of )
DW
DB 06 Of )
DW 421
DB 06
DW 423
DB 06
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
DW 296
DB 07
DW 41b
DB 07
DW 416
DB 07
288 / trigger macro
/ which IR command to call { 0 - Of )
DW
DB 08
/ trigger macro
/ which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/ which IR command to call ( 0
/ trigger macro
/which IR command to call ( 0 - Of )
/trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR comma..d to call ( 0
ztrigger macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Tf )
/ trigger macro
DW 11
DB 09
DW 12
DB 09
DW 27
DB 09 Of )
DW 42
DB 09
DW 57
DB 09
DW 235
DB 09
DW 236
DB 09
DW 237
DB 09 Of )
DW 238
DB 09
DW 261
DB 09
DW 262
A-30
----------------------- Page 32-----------------------

I
/which IR command to call ( 0 - Of )
;trigger macro
;which IR command to call ( 0 - Of )
;trigger macro
;which IR command to call { 0 - Of )
DB 09
DW 396
DB 09
DW 409
DB 09
;trigger macro
;which IR command to call
;trigger macro
;which IR command to call
;trigger macro
;which IR command to call
DW 399
10 0
DB - Of )
DW 407
DB 10 0 - Of )
DW 408
DB 10 0 - Of )
;trigger macro
;which IR command ” to call ( 0 - Of )
;trigger macro
;which IR command to call ( 0 - Of )
/ trigger macro
;which IR command to call ( 0 - Of )
;trigger macro
;which IR command to call ( 0 - Of )
;trigger macro
;which IR command to call ( 0 - Of )
;trigger macro
/which IR command to call { 0 - Of )
/ trigg r macro
/which IR command to call ( 0 - Of )
/ trigger macro
/which IR command to call ( 0 - Of )
DW 272
DB 11
DW 273
DB 11
DW 274
DB 11
DW 275
DB 11
DW 400
DB 11
DW 418
DB 11
DW 425
DB 11
DW 426
DB 11
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of )
DW 336
DB 12
DW 342 .*
DB 12
DW 401
DB 12
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of J
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Cf )
DW 92
DB 13
DW 411
DB 13
DW 419
DB 13
DW 427
DB 13
trigger macro
which IR comma- d to call ( 0 - Of )
trigger macro
which IR command to call ( 0 - Of )
trigger macro
which IR command to call ( 0 ~ Of )
trigger macro
which IR command to call ( 0 - Of )
DW 291
DB 14
DW 402
DB 14
DW 412
DB 14
DW 428
DB 14
z trigger macro
/which IR command to call
/ trigger macro
/which IR command to call
/ trigger macro
DW 256
DB 15 0 - Of )
DW 257
DB 15 0 - Of >
DW 420
A-31
----------------------- Page 33-----------------------

DB 15 ;which IR command to call ( 0 - Of )
;mod F-rels2 ; send sleep if recv sleep on IR
;trigger macro
;which IR command to call ( 0 - Of )
;trigger uacro
;which IR command to call ( 0 - Of )
DW 403
DB 15
DW 413
DB 15
; end mod
DB FFh,FFh ;FF FF is table terminator
Ck_Name_table:
DW 97
DW 248
DW 393
DW 414
DW 149
DW 305
DW 404
DW 421
DB FFh,FFh ;FF FF is table terminator
; ;
Say name
Test_new_name:
Stat_0
#Say_new_name
Nosayname
Stat_0
»DFh
Stat_0
LDA ;system
;wake system say new name
;bypass li clear
AND
BEQ
LDA
;kill req for startup new name
;update
AND
STA
LDA Name ;current setting for table offset
CLC
ROL A r 2's comp
TAX
;get lo byte
;save lo byte of Macro table entry
Name__table,X
Macro Lo
LDA
STA
INX ; V
;get hi byte •
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
Name_table,X
Macro_Hi
Get_macro
Notrdy
LDA
STA
JSR
JSR
Nosayname:
below routines run at 742 mSec loops
; Timer B sets 'Milisec_flag * each 742 miliseconds
;
A-32
----------------------- Page 34-----------------------

Updt_timer:
LDA Mil ;sec_flag
TimerL__dn ;bypass if 0
;clear it
;if >0 then 742 mili seconds have passed
BEQ
LDA «00
STA Milisec__flag ;reset
Sensor_timer
TimerLl
Sensor_timer
;get current timer • 742.cec sec
;do nothing if 0
LDA
BEQ
DEC ;-l
TimerLl:
Light_timer ;get current timer • 742mSec sec
TimerL2
Light_timer ;-l
LDA
BEQ ;do nothing if 0
DEC
TimerL2 J
Sound_timer ;get current timer • 742roSec sec
TimerL3
Sound_timer ;-l
LDA
BEQ ;do nothing if 0
DEC
TimerL3:
Bored_timer ;get current timer * 742mSec
TimerL4
Bored_timer ;-l
LDA
BEQ ;do nothing if 0
DEC
TimerL4:
;get current timer * 742roSec
;do nothing if 0
;-1
Last_IR
TimerL5
Last_IR
LDA
BEQ
DEC
TimerL5:
TimerL_dn:
Task_ptr
Task_ptr
.• 1
;get it
INC
LDA
CLC
ck if off end
jump if <9
reset pointer
SBC #08
BCC Ck_tsk_A
LDA #01
STA Task__ptr
Ck_tsk_A:
If too sick then no game play9 9 9
CLC ;
Sick_counter ;how sick is he
#Really_sick
Ck_t*sk_egg ;do egg if not
Ck_bored
LDA
6BC ;
BCS
JMP ;bypass if too sick
Scan all gam* mode pointers to determine if any are active.
Continue to execute the first active game found, and ti.*t game always
allows the task list to be scaned for sensor input. If no games are
active, then check task 0 to determine if the correct sensor sequence
is occuring which will initiate the next game.
; ;
Ck_task_egg:
?get game active bits
;move bit 0 to earn'
;check next if not activ
LDA Game_l
ROR A
BCC Ck_g2
A-33
----------------------- Page 35-----------------------

JMP Game_fortune ;jump if active
Ck_g2:
ROR A ;bit 1
;check next if not activ
;jump if active
- BCC Ck_g3
Game
JMP .Rap
Ck_g3:
ROR Ibit 2
;check next if not activ
;jump if active
A
Ck_g4
Game_hideseek
BCC
CMP
Ck_g4:
FOR ;bit 3
;check next if not activ
;jump if active
A
Ck_g5
Game_siraon
BCC
JMP
Ck_g5:
;bit 4
;check next if not activ
;jump if active
ROR A
Ck__g6
Game_Burp
BCC
JMP
Ck_g6:
;bit 5
;check next if not activ
;jump if active
ROR A
Ck_g7
Game name
BCC
JMP
Ck_g7:
;bit 6
;check next if not activ
;jump if active
ROR A
Ck_g8
Game__twinkle
BCC
JMP
Ck_g8:
;bit 7
;check next if not activ
;jump if.active
ROR A
Ck_g9
Game__rooster
BCC
JMP
Ck_g9:
none active
;
; Task 0 : scans all active requests from sensors looking for a trigger.
; If any are set then scan through the game select tables for each game
; looking for a match, and increment the counter each time a succesive
; match is found. If one is not in sequence, then that counter is reset
to
; zero. Since all counters are independent, then the first one to
completion
; wins and all others are zeroed.
All sensor triggers are in one status byte so we can create a number
based on who has been triggered (we ignore the I.R. sensor).
The following bits are in Stat_4 and are set when they are triggered
by the ind,,- '1^ual sensor routines :
; 00 = none
; Cl B Loud sound
; 02 * Light change brighter
; 04 * Light change darker
; 08 s Front tummy switch
; 10 m Back switch
; 20 * Feed switch
; 40 « Tilt switch
A
-34
----------------------- Page 36-----------------------

; 8n = Invert switch
; We assi i a single bit per game or egg senario. Each time a
; sensor
; a match.-#Iftriggered a particular , we increment sensor doesnt the counter match, and thentest set all its eggs for
disqualified
; bit and move on. If at any time all bits are set, then clear counter
to
; zero and start over. WHen a table gets an FF then that egg is
executed.
; Each time a sensor is triggered, the system timer is reset. Thi6 timer
; called 'Sensor_timer'is reset with 'Global_time ’ equate. This timer is
also
; used for the random sequential selection of sensor responses. If this
; timer goes to zero before an egg is complete, ie, Furby has not been
played
; with, then clear all disqualified bits, and counters.
; Currently there are 24 possible eggs. (3 bytes)
;Qualifyl ;
;DQ_fortune EQU
;DQ_rap
;DQ__hide EQU
;DQ_sirnon EQU
;DQ_burp EQU
;DQ_name EQU
;DQ_twinkle EQU
;DQ_rooste- EQU
;bit 0 = fortune teller
;bit 1 = rap song
;bit 2 = hide and seek
;bit 3 = simon says
;bit 4 = burp attack
;Lit 5 = say name
;bit 6 = sing song
;bit 7 = rooster-love you
01
EQU 02
04
08
10
20
40
80
;Qualify2;
bit 0 =
bit 1 =
bit 2 =
bit 3 =
bit 4 =
bit 5 =
bit 6 B
bit 7 =
;;;;removed due to lack of RAM
;? ;
Test triggers here
Ck_game:
;ck if no action for a while
;ck if no action for a while
;jump if system active
;go reset all other triggers and game pointers
£unsor__timer
Bored_timer
Ck_gamactv
Clear__games
; LDA
LDA
BNE
JSR
Ck_gamactv:
LDA
CMP
;test if all are disqualified
•compare activ bits only
;jump if some or all still active
;test if all are disqualified
;compare activ bits only
;jump if some or all still active
;go reset all otxer triggers and game pointers
Qualifyl
•FFh
Ck_anysens
Qualify2
#00h
Ck
^anysens
Clear_games
BNE
i LDA
; CMP
; BNE
JSR
Ck_anysens:
LDA ;ck if any sensor is triggered
;go ck games if any set
;bypass if none
Stat_4
Ck_gaml
Ck_^>ored
BNE
JMP
A-35
----------------------- Page 37-----------------------

;
Ck_gaml: ;fortune teller
Egg_cnt
Qualifyl
#DQ_fortune ;check if dis-qualified bit
;bail out if is
;get current data
;compare against sensor trigger
;if set then good compare
;update game qualification
#DQ_fortune ;set dis-qualified bit
Qualifyl
Ck_gam2
LDX ;get current count
LDA :update game qualification
AND
Ck_gam2
Fortune_table,X
Stat_4
Ck_gamla
Qualifyl
BNE
LDA
AND
BNE
LDA
ORA
/update system
/check next egg
STA
JMP
Ck_gamla:
Fortune_table+l,X ;get current +1 to see if end of egg
/ test if end of table and start of game
/ jump if not at end
Clear_games ;go reset all other triggers and game painters
/get system
/start game mode
;update
LDA
CMP #FFh
BNE Ck_gom2
JSR
LDA Game_l
t»Fortune_mode
Game 1
Idle
ORA
STA
JMP ;done
Ck_gam2: / Rap mode
Qualifyl
#DQ_rap
Ck_gam3
Rap_table,X / get current data
Stat_4
Ck_gam2a
Qualifyl
#DQ_rap
Qualifyl
Ck_gam3
/update game qualification
/ check if dis-qualified bit
/ bail out if is
LDA
AND
BNE
LDA
/compare against sensor trigger
/ if set then good compare
/update game qualification
/ set dis-qualified bit
/update system
/check next egg
AND
BNE
LDA
ORA
STA
JMP
Ck_gam2a:
/get current data +1 to see if end of egg
/ test if end of table and start of gam*
/ jump if not at end
Clear_games /go reset all other triggers and game pointers
Gome_l
#Rap__mode
Game_l
Idle
Rap_table+1,X
#FFh
LDA
CMP
BNE Ck_gom3
JSR
LDA / get system
/ start game mode
/ update
ORA
STA
JMP / done
/ Hide and seek
Qualifyl
#DQ_hide
Ck_gam4
Hseek_table,X
Stat_4
Ck_gam3a /
Qualifyl
#DQ__hide
Qualifyl /
Ck_gam4
Ck_gam3:
/update game qualification
/ check if dis-qualified bit
/bail out if is
/ get current data
/compare against sensor trigger
if set then good compare
update game qualification
set dis-qualified bit
update system
/check nect egg
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck__gamia:
Hseek_table+1,X
HFFh
/get current data to see if end of egg
/ test if end of table and start of game
/jump if not at end
Clear_games /go reset all other triggers and game point
LDA
CMP
BNE Ck_gam4
JSR
A-36
----------------------- Page 38-----------------------

LDA Game 1 ;get system
;start game mode
;update
#Hideseek_mode
Game
„
l
Idle
ORA
STA
JMP ;done
;
/ Simon says
Qualifyl
#DQ simon
Ck_gam5
Simon_table,X
Stat_4
Ck_gam4a
Qualifyl
#DQ_simon
Qualifyl
Ck_gam5
C g xm4;
;update game qualification
;check if dis-qualified bit
;bail out if is
;get current data
;compare against sensor trigger
;if set then good compare
;update game qualification
;set dis-qualified bit
;update system
;check next egg
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam4a •
;get current data 1 to see if end of egg
;test if end of table and start of game
;jump if not at end
Clear_geur.es ;gc reset all other triggers and game pointers
Game_l
#Simonsay_mode
Game_l
#00
Suat_5
Idle
Simon_table+1,X
#FFh
LDA
CMP
BNE Ck_gam5
JSR
LDA ;get system
;start game mode
;update
;clear all pointers
;system
ORA
STA
LDA
STA
JMP ;dene
Ck_gam5: ; Burp attack
Qualifyl
iDO burp
Ck_gam6
Burp_tabl X
Stat_4
Ck_gam5a
Qualifyl.
#DQ burp
Qualifyl
Ck_gam6
/update game qualification
/ check if dis-qualified bit
/ bail out if is
/get current data
/compare against sensor trigger
/ if set then good compare
/update game qualification
/set dis-qualified bit
/update system
/check next egg
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam5a:
/get current data +1 to see if end of egg
/ test if end of table and start of game
/jump if not at end
Clear_games / jo reset all other ^riggers and game pointers
Game_l
#Burp_mode
Game_l
#00
Stat_5
Idle
Burp_tables1,X
#FFh
LDA
CMP
BNE Ck_gam6
JSR
LDA / get system
/start game mode
/update
/clear all pointers
/ system
ORA
STA
LDA
STA
JMP Z done
Ck_gam6: / say name
Qualifyl
ttDQ name
Ck_gam7
Name_egg,X
Stat_4
Ck_gam6a
Qualifyl
IDO name
/update game qualification
/check if dis-qualified bit
/bail out if is
/get current data
/compare against sensor trigger
/ if set then good compare
/update game qualification
/set dis-qualified bit
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
A-J7
----------------------- Page 39-----------------------

Qualify !
Ck_gam7
STA ;update system
JMP ;check next egg
Ck_gam6a:
Name_egg+1,X
#FFh
;get current data +1 to see if end of egg
;test if end of table and start of game
jjurop if not at end
Clear_games ;go reset all other triggers and game pointers
Game__l
#Name_mode
Game_l
#00
Stat_5
Idle
LDA
CMP
BNE Ck_gam*7
JSR
LDA ;get system
;start game mode
;update
;clear all pointers
;system
ORA
STA
LDA
STA
JMP ;done
Ck_gam7: ; twinkle song
Qualifyl
#DQ_twinkle ;check if dis-qualified bit
;bail out if is
LDA ;update game qualification
AND
Ck_gamS
Twinkle_egg,X
Stat_4
Ck_gam.7a
Qualifyl
#DQ_twi kle ;set dis-qualified bit
;update system
;check next egg
BNE
;get current data
;compare against sensor trigger
;if set then good compare
;update game qu^.lification
LDA
AND
BN]
LDA
ORA
Qualifyl
Ck_gamB
STA
JMP
Ck_gam7a:
;get current data -*-1 to see if end of egg
;test if end of table and start of game
;jump if not at end
Clear__games ;go reset all other triggers and game pointers
Game_l
#Twink1e mode
Twinkle_egg*1,X
#FFh
LDA
CMP
BNE Ck_gam8
JSR
LDA ;get system
;start game mode
;update
;clear all pointers
;system
ORA
S* A Garoe_l
LDA #00
Stat_5
Idle
STA
JMP ;done
; roos * er lov^s you
Qualifyl
#DQ_rooster ;check if dis-qualified bit
Ck_gam9
Rooster_egg,X
Stat_4
Ck_gam8a
Qualifyl
Ck
„gam8:
LDA ;update game qualification
ANT
BNL ;bail out if is
LDA ;get current uata
;compare against Bensor trigger
;if set then good compare
;update game qualification
#DQ_rooster ;set dis-qualified bit
;update system
;check next egg
AND
BNE
LDA
ORA
Qualifyl
Ck_gam9
STA
JMP
Ck_gam8a:
;get current data +1 to see if end of egg
;test if end of table and start of game
;jump if not at end
Clear_games ;go reset all other triggers and game pointers
Game_l
#Rooster_mode
Game_l
#00
Stat_5
Idle
LDA Rooster_egg+1 # X
CMP #FFh
bNE Ck_gam9
JSR
LDA ;get system
;start game mode
;update
;clear all pointers
;system
ORA
STA
LDA
STA
JMP ;done
A-38
----------------------- Page 40-----------------------

Ck_gam9:
Ck_gamend:
zincs on any ser.sor trigger
;get
INC Egg_cnt
LDA Egg_cnt
CLC
;limit max to 10 for error checking
/continue if less
/ reset all
#10
Cge2
Clear_games
SBC
BCC
JSK
Cge2:
/clear all sensor triggers this pass
/ready for next pass of sensor t.iggers
/done with easter egg test
LDA •00
Stat_4
Ck_bored
STA
JMP
Clear_a1l_gam:
LDA #00
STA Game_l
/ STA Game_2
/ clear all game enabled bits
Clear_games:
LDA #00
STA Egg_cnt
STA Stat_4
STA Stat_5
STA Qualifyl
/ STA Qualify2
/cl#a. counter
/clear game status
/ clear game status
/clear all dis-qualify bits
/clear all dis-qualify bits
RTS ;done
00 * none
01 = Loud sound
02 = Light change brighter
04 = Light change darker
08 = Front tummy switch
10 = Back switch
20 * Feed switch
40 * Tilt switch
80 = Invert switch
These look up tables provide the sequence of sensor triggers required
to enter that specific game mode. FFh is always the last byte)
Fortune_table:
DB 04h,04h,lOh,FFh /lght,lght,back
Rap__table:
DB Olh,Olh,Olh,Olh,FFh /snd,snd ,snd,snd
Hseek_table:
DB 04h,04h,04h,08h,FFh / light,light,light,frnt
Simon_table:
DB 08h,lOh,Olh,04h,FFh / fmt,back,snd,1ght
Burp__table:
A-39
----------------------- Page 41-----------------------

DB 20h,20h,20h,10h,FFh ;feed,f ed,feed,back
Nazne_egg:
DB J8h,08h,08h,1Oh,FFh ;fmt,fmt,frr.t,back
Twinkle_egg:
DB Olh,Olh,Olh,lOh,FFh /snd,end,snd,back
Rooster
^
p'
3 7:
DB 04h,04h,04h,lOh,FFh ;light,light,light,back
Normal task scan of sensers and timers.
Ck_bored:
LDA Bored_t
- mt.r ;ck if bored ... =0
BNE Cktskl ;jump if not bored
/ Currently uses 4 tables, one for each age.
#Bored_split
IN DAT
;get random/sequential split
;save for random routine
LD/
STA
#Seq_bored ;get number of sequential selections
#Ran_bored ;get number of randoms
Rar._.i eq ;go decide random/sequential
Bored_ran ;Random mode when carry SET
LDX
LDA
JSR
BcS
Bored
.couni ,-ave current
Bored_count ;if not then next table entry
Bored_count ;get
LDX
INC
LDA
CLC
#Seq_bo ed-1
Bored_s^de
SBC ;ck if > assignment
;jump if <
/ reset to 1st entry of sequential
BCC
LDA #00
STA Borcd_count
Bored_s. de:
TXA / current count
Bored__ran:
JSR /do age calculation for table entry
/age offset
/get new sound/word
/save lo byte of Macro table entry
Decid_age
TEMPO
Bored_Sl.X
Macro_Lo
LDX
LDA
STA
INX
Bored_Sl,X
Macro_Hi
Start_macro
/get n ti sound/word
/save hi byte of Macro talle entry
/go set group/table pointer for motor & speh
LDA
STA
JMP
;
Ck_tskl:
LDA Task_ptr ;
/decide which
/ jump if not
/ Ck ball witch side sense
CMP #01
Ck_tsk4
CK_tilt
BNE
JMP
Ck_tsk4:
/decide which
/jump it not
CMP «02
BNE Ck__tsk5
A-40
----------------------- Page 42-----------------------

JMP Ck__invert ;Ck ball switch inverted sense
Ck__tsk5:
#03 ;decide which
;jump if not
;Ck Touch switch back sensor
CMP
Ck_tsk6
Ck_back
BNE
JMP
Ck_tsk6:
•04 ;decide which
;juxnp if not
CMP
Ck_tsk7
Ck_IR
BNE
JMP ;Ck IR input
Ck_tsk7:
;decide which
;jump if not
;Ck Feed sensor
CMP #05
Ck_tsk8
Ck_feed
BNE
JMP
Ck_tsk8:
•06 ;decide which
;jump if not
;Ck Light sensor
CMP
Ck_tsk9
Ck_
-ight
BNE
JMP
Ck_tsk9:
#07 ;decide which
;jump if not
;Ck Front touch switch
CMP
Ck_tskl0
Ck_front
BNE
JMP
Ck_tskl0:
;decide which
;jump if not
;Ck Mic input
CMP #08
Ck_tskend
Ck_sound
BNE
JMP
Ck_tskend:
JMP Idle ;no task
*.
; This rtn tests for motor and speech activity and only services them
to allow each request to finish, and then returns to task routine.
I As long as motor active, we continually reload the motor led timer
; to keep the optical counter alive and when all activity is complete,
; the IRQ will turn led off when timer goes to 00.
Notrdy:
;go do speech
;go do motor
Task_l
Task__2
JSR
JSR
Stat_l
•Wc'd_activ ;Test for spch word active
;jump if not done
;update
•Say_activ ;ck for saysent active
Notrdy2
LDA ;get system
AND
Notrdy2
Stat_l
BNE
LDA
AND
BNE
Stat_2
#Motor_seek ;ck motor request
;jump if set
;get system
#Motor_actv ;ck motor in motion
Notrdy2
LDA ;get system
AND
Notrdy2
Stat__2
BNE
LDA
AND
BNE
Drift_fwd ;motor drift counter 0 when done
Notrdy2
LDA
BNE
A-41
----------------------- Page 43-----------------------

Drift__rev
Notrdy2
LDA
BNE
LDA Stat__2
•Macro_actv ;ck for flag request
Notrdy_dn
Ck_Macro
Notrdy2
/system
AND
;bail if none
;decide if more chaining in process
/continue
BEQ
JSR
JMP
Notrdy_dn:
RTS /only leave when everyone done
Notrdy2:
/get led timer reload
/how long the motor stays on
/loop
•Motor_led__rst
Motor_led_timer
Notrdy
LDA
STA
JMP
Task 1:
LDA Stat_l
AND #Word_activ
BNE W_activ
iMore_spch:
LDA Stat_l
AND #Say_activ
BEQ EndTask_l
JSR Do_nextsent
JMP EndTask_l
W__activ:
LDA Port_B
AND *TI_RTS
fc.iE EndTask_l
JSR Do_spch
/ get system
/ Test for spch word active
/jump if not done
/update
;ck for say-ent active
/ nothing going on, ck next task
/continue on with saysent
/ Next task
/get TI req/Vusy line
/ get bit
/ if no speech then ck motor
/go send next byte to TI
EndTask__l:
RTS
;;
Task 2:
Motor Routines
get next motor data
Ck_jnotor:
Stat_2
#Motor_actv
Ck_jaot2
Do_motor
LDA /get system
/ck motor in motion
z done
/not donv
- so check position
AND
BEQ
JMP
Ck__mot2:
Stat_2
•Motor_seek
NMM_out
/get sys.em
/ck motor request
/ jump if rone
LDA
AND
BEQ
Next_motor:
J LDA Drift__fwd /motor drift counter 0 when done
A-42
----------------------- Page 44-----------------------

BNE NMM_out
LDA Drift_rev
BNE NMM out
;wait til 0
; ;
;wait til 0
; Set a timer and ck counter 'motorstoped * (incremented with wheel
count)
to see if it changed. When it stops changing then the motor has
stopped.
;
motorstoped ;ck for 0
NMM_out
TEMPI
Pot__timeL
Motoredone
Pot_timeL
TEMPI
#15
motorstoped ;
NMM_out
LDA
;wait till 0
;get last motor count
;ck if changed
;jump if same (motor finally stopped)
;get current
BNE
LDA
CMP
BEQ
LDA
STA ;
LDA ;reset timer (8)
STA
JMP ;wait another cycle
Motor_done:
LDA
BNE
Cycle_timer ;get step timer
NMK
.
out ;wait til 0
STA Drift_counter ;use as a temp register
JSR Motor_data ;get data
LDA #00
STA TEMPI ;reset
;get data (use for lbyte table (DB)),.
;is it table end (dont inc off end)
Motor_lo
•FFh
Motor_pause ;more
Stat_2
#Motor_ntseek
Stat_2
LDA
CMP
BNE
LDA ;get system
;clear seek flag
;update system
AND
STA
NMM_out:
JMP Endtask_2 ;seek complete
Motor_pause:
LDA Motor_lo
BNE More_jnotor
JMP Motor_killend
;check for pause request on this step (00)
;more
;set cycle timer and ait for next motor
step
;j
To initialize the motor call table, the originator loads ’Which_motor'
; with the pointer and calls 'Decidejmotor'.
Ck_Macro:
JSR Next_macro ;get data
Which
^jaotor ;save motor seek pointer
Next_jnacro ;get data
Mgroup
•OOh
STA
JSR
;save high byte
jcheck for end of macro
;do it if not 0
STA
CMP
BNE GoOnacro
Whichjnotor ;ck lo byte for 0
•OOh
LDA
CMP ;check for end of macro
A-43
----------------------- Page 45-----------------------

BNE Got_macro ;do it if not 0 else must be end command
End_jnacro:
LDA Stat_2
AND #Nt_jnacro_actv
STA Stat_2
;get system
;clear request
;update
•Bored_reld ;reset bored l imer
Bored_timer ;
; LDA
; STA
No_jnacro:
RTS ;done
Next_raacro:
LDX #00H
(Macro .Lo,X)
Macro
.Lo
Mac_dat2
Macro
.Hi
LDA ;get speech/motor table request
INC ;next
;jmp in no roll over
;rolled over so hi !
BNE
INC
Mac_dat2:
RTS
Gotjnacro;
; The speech and motor pointer table pointer from the sensor table ,
are
; a 1-999 decimal number. The assemble converts to two 8 bit numbers and
; this creates a one of four group of 128 byte pointers in each group.
; We also do 2's offset for table lookup.
;do motor
Which_motor ;move hi bit to carry
Mgroup
CLC
ROL
ROL ;move carry into one of four grovo ptr
Which_motor ;offset
Which
.
word ;set speech group pointers
Mgroup ;offset
Sgroup
Decide_motor
Say .O
LDA
STA
LDA
STA
;start motor routine
;start speech routine
;fcack to task master
JSR
JSR
RTS
;
More_jmotor:
LDA
ORA
Stat_3
#Motor_on
Stat
.3
Mon_len
Motor__pulse ;set timer
;system
;flag on mode
;update
;get length of on pulse
STA
LDA
STA
Stat
LDA .2 ,get system
#Motor_actv ;set motor in motion
Stat
.2
ORA
STA ;update
Mcalc
.lo:
? When motor stops, if the IR detector is on the slot in the wheel , no
; action is reeded. If passed the slot, when the next motion command
occurs,
if the direction is the same as the last motion, no action is needed.
J If the direction is opposit to last motion then we decrement or
Ar44
----------------------- Page 46-----------------------

; increment, based on new direction, to compensate for the slot which
; will be counted twice.
Motor_lo
Pot_timeL
Tst_fwdmore ;jump if not 0
Stat_2
#Motor_inactv
Stat_2
Endtask 2
LDA /get data
CMP ;ck for same
BNE
LDA /get system
;clear activ flag
/update system
AND
STA
JMP /bail out
Tst_fwdmore:
CLC
•get current position
/if borrow then dec command
Pot_timeL
Go_rev
SBC
BCC
Go_fwd:
LDA Port_C / get IR detector
•Po8_sen
Go__fwd2
Stat_2
iMotor_ fwd
Gc_fwd2
Pot__timeL2
AND ;
/ bypass if sensor is over slot in wheel
/gen system
/get direction motor was last headed
/if set then new direction is same as last
/compensate for counter direction reversal
BEQ
LDA
AND
BNE
DEC
Go__fwd2:
Stat_2
•Motor_fwd
•Motor_actv / set motor in motion
Stat__2
Stat_3
#Motor_off
#Motor_fwds /move motor in fwd dir
/go finish port setup
LDA /get system
ORA /set = motor fwd (inc)
ORA
STA /update system
LDA /get current status
ORA / turn both motors off
AND
JMP End_rev *.
;
Go_rev:
LDA Port_C /get IR detector
#Pos_sen
Go_rev2
Stat_2
*Motor_fwd
Go_rev2
Pot_timeL2
AND ;
/ bypass if sensor is over slot in wheel
/get system
/get direction motor was last headed
/if clr then new direction is same as last
/ compensate for counter direction reverral
BEQ
LDA
AND
BEQ
INC
Go_rev2:
LDA
AND
Stat_2 /get system
»Motor_rev / clear fwd flag
#Motor_actv /set motor in motion
/update system
•get current status
/ turn both motors off
•Motor_revs /move motor in rev dir
ORA
STA Stat_2
Stat_3
•Motor_off
LDA
ORA
AND
End_rev:
STA Stat_3
JMP Endtash_.2 /done
Do_motor:
/(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( it (((
/ motor speed control
A-45
----------------------- Page 47-----------------------

; jmp Byp_jnotorS3
LDA Stat_0
•Init_Mspeed
Byp_jnotorS3 ;only runs on wake up
Stat_0
•Init_motor ;ck if motor to do speed test
Byp_jEQotorS2 ;only runs on wake up
Stat_0
#Nt_Init_motor
StatO
;system
AND ;ck if motor to do speed test
BEQ
LDA ;system
AND
BEQ
LDA ;system
;done
;update
AND
STA
LDA «00 ;reset opto speed counter
;setit
;get timer value for speed test
;set it
STA Mot_opto_cnt
#Opto_spd_reld
Mot_speed_cnt
LDA
STA
Byp_motorS2:
Mot_speed_cnt
Byp_motorS3 ;do nothing if >0
LDA / get timer
BNE
LDX ;get wheel count during speed test
;get motor on pulse width
;on time
;max cycle time on+off
Mot_opto_cnt
Motor_speed,X
Mon_len
#Mpulse_on*l
LDA
STA
LDA
CLC
Mon_len
Moff_len
Byp_motorS3 ;jump
SBC ;get crop1rant
STA ;
BCS if not neg
LDA »00
STA Moff_len J
••
LDA Stat_0
«NT_Init__Mspeed
Stat 0
;system
;clear motor to do speed test
/update
AND
STA
Byp_motorS3:
;)) > ))))))))))))))))) ))))))))))) ) ))))))) ))) ))))) ) )) ) ) ))))))))))) ))))
; On power up we preset Mon^len to 11 and Moff_len to 5. This prevents
; the motor from destroying itself when the batteries are 6.4v.
; This also gives a timed count on the speed test of -7 difference.
/ so I adjusted the table to compensate for the shift.
/ Compare motor position to see if at destination yet
;get direction
;set=inc clr=dec
LDA Stat_2
AND «Motor_fwd
BEQ Motor_dec ;
;bit was set so motor in inc condition
FCalc_lo:
/get data
z carry=0
LDA Motor_lo
CLC
A-46
----------------------- Page 48-----------------------

SBC Pot_timeL
BCC Motor_killfwd
JMP Endmotor
;table - current cap time
;jump if resul: is negative
;wait till there & pulse for speed
; Reverse direction..
Motor_dec:
LDA Pot_timeL
CLC
SBC Motor_lo
BCC Motor_killrev
JMP Endmotor
; go reverse
;destination
;carry=0
;table position to seek to
;jump if result negative
;wait till there & pulse for speed
Motor_ki11fwd:
;ck how far we travled
;prep for drift table
LDA Drift_counter
TAX
CLC
;ck if less than 20 steps
;jump if less
SBC «20
M_killf2
«Drift_long ;long delay if >10 steps
M__killf3
BCC
LDA
JMP ;go fini
M_killf2:
;get brake pulse
;short delay if < 10 steps
Drift_table,X
#Drift_short
LDA
t LDA
M_killf3:
Drift_rev
Motor_killena
STA ;save
JMP ;go shut down motor
;
Motor_killrev:
LDA Drift
..
counter
TAX
CLC
SBC «20
;ck how far we travled
prep for drift table
ck if less than 20 steps
M_killr2 jump if less
•Drift_long ;long delay if >10 steps
M killr3
BCC
LDA
JMF go fini
M_killr2:
;get brake pulse
;short delay if < 10 steps
Drift_table,X
«Drift_short
LDA
; LDA
M_killr3:
STA Drift_fwd ;save
Motor_killend:
Stat_3
«Motor_off
Stat_3
Stat_2
•Hotor_inactv
Stat_2
;get current status
;turn both motors off
;update
;get system
;clear activ flag
;update system
Which_delay ;time til next read
Cycle_timer ;reset it
«00
LDA
ORA
STA
LDA
AND
STA
LDA
STA
LDA
TEMPI ;used to test motor drift between seeks
Endtask_2
STA
JMP ;
Drift table controls the magnitude of braking pulse applied.
If the distance just travled is less than 20 then use that number
to point into table and get new brake pulse length.
Drift_table:
J DB 24,30,32,34,35,38,40,44,48,54,56
A-41
----------------------- Page 49-----------------------

; DB 58,60,60,60,60,60,60,60,60,60,60
20,22,24,27,30,32,34,36,38
46,48,50,52,54,56,58,60,60,60,60,60
DB
; DB
25,26,27,28,30,32,34,36,38,42,<5
48,51,54,57,60,60,60,60,60,60,60
DB
DB
;;
On wake up when the motor moves from position 0 to 134, we
; time it and increment a counter which is used to access this table
; and get the motor on pulse value.
; Refer to power up preset pulse width for table pointers
Motor_speed:
Mpul8e_on,Mpulse_on,Mpu1se_on
DB Mpulse__on,Mpulse_on,Mpulse_on
DB Mpulse__on,Mpulse__on,Mpulse_on
Mpu1se_on,Mpu1se_on,Mpu1se_on
Mpu1se_on,Mpu1se_on,Mpu1se_on
Mpu1se_on,Mpu1se_on,Mpu1se_on
DB Mpulse_on,Mpulse__on,Mpulse_on
Mpu1se_on,Mpu1se_on,Mpu1se_on
Mpu16e_on,Mpu1se_on,Mpu1se_on-1
DB Mpulse_on-2,Mpulse_on-3,Mpulse_on-4
DB Mpulse_on-5,Mpulse_on-5,Mpulse_on-6
DB Mpulse_on-7,Mpulse_on-8,Mpulse_on-9
DB Mpulse_on-9,Mpu1se_on-9,Mpu1se_on-9
DB Mpu1se_on-9,Mpu1se_on-9,Mpu1se_on-9
DB Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
DB Mpulse_on-9,Mpulse_on-9,Mpulse_on~9
DB Mpulse_on-9,Mpuise_on-9.Mpulse_on-9
DB Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
DB
DB
DB
DB ; f,10
DB
DB
;lb,lc
This finds the 16 bit adrs of the table and points the motor
Decide_motor:
LDX Which_motor /offset ptr
/get current group pointer
/is it table group 4
•jump if is
/ is it table group 3
•jump if is
/is it table group 2
/jump if is
/ table group 1
LDA Mgroup
CMP «03
BEQ Dec_jnot4
CMP «02
BEQ r>ec__mot3
CMP «01
BEQ Dec_mot2
Dec_jnotl:
Motor__grpl,X /get lo pointer
Motptr_lo /working buffer
;X*1
LDA
STA
INX
Motor_grpl,X /get hi pointer
Dec_jnot_end /go finish load
LDA
JMP
Dec_mot2: «
A-48
----------------------- Page 50-----------------------

LDA Motor_grp2,X
Motptr_lo
;get lo pointer
•.
working buffer
;X+1
ST?
INX
LDA Motor__grp2,X
Decjnot_end ;go finish load
;get hi pointer
JMP
Dec_jnot3: ;
LDA Motor_grp3,X
Motptr_lo ;working buffer
;X*1
;get lo pointer
STA
INX
Motor_grp3,X ;get hi pointer
Dec_mot_end ;go finish load
LDA
JMP
Dec_mot4: ?
;get lo pointer
•.
working buffer
;X*1
Motor_grp4,X
Motptr_lo
LDA
STA
INX
LDA Motnr_rtrn4'v ;get hi pointer
Dec_jnot_end:
STA Motptr_hi
LDA Stat_2
•.
working buffer
;system
#Motor_seek ;flag system
Stat_2
•Motor_led_rst
Motor_led_timer
ORA
•.
update
;get meto led timer reload
;how long the motor IR led stays on
STA
LDA
STA
More_jnu11i_m:
;lst time only get 1st byte (delay)
;get data
Motor_data
Motor_lo
Which_delay ;motor delay control
;done
JSR
LDA
STA
RTS
Get next motor data from table according to indirect pointer.
; NOTE: we are now using DB statments in the motor table
so were back to single byte format.
•.
;
Motor__data:
LDX *00H
(Motptr_lo.X) ;Get the motor data
;lo byte
;next
•.
jmp in no roll over
•.
rolled over so hi !
LDA
STA Motor_lo
INC Motptr_lo
BNE Mot_dat2
INC Motptr_hi
Mot_dat2:
RTS
Test motor puls© timnr and alternate on & off to keep motor speed
; constant through battery deterioration.
;
Endmotor:
Motor__pulse ;ck pulse timer
.- jump if not done
LDA
Endtask_2
Stat_3
•Motor_on
anotor_off
Stat_3
#Motor_on
Stat_3
Mon
^len
Motor_pulse ;set timer
BNE
LDA system
;is it an power on pulse
;jump if uu pulse (set)
;system
;flag on mod.?
•.
update
;get length of on pulse
;m
;m AND
BNE
;m LDA
ORA
STA
Jtt LDA
;m STA
A-49
----------------------- Page 51-----------------------

;mPls_fwd:
LDA Stat_2 ;get system
#Motor_fwd ;ck if set * motor fwd (inc)
Pls_rev
Stat 3
AND
BEQ ;else go reverse
? get current status
;tum both motors off
LDA
ORA #Motor_off
#Motor_fwds ;move motor in fwd dir
;go finish port setup
;m
AND
JMP PIsend
;mPls_rev:
;m LDA Stat_3
;m ORA #Motor_off
;ra AND
;mPlsend:
;m STA Stat_3
;m JMP Endtask_2
;mEmotor_off:
;m LDA Stat__3
AND INtttOt on
;get current status
;turn both motors off
#Motor_revs ;move motor in rev dir
;done
;must be on so turn off
;system
;set to power off pulse
;update
;get length of off pulse
;m
Stat_3
Moff_len
Motor_pulse ;set timer
Stat 3
;m STA
;m LDA
;m STA
LDA ;get current status
;turn both motors off
;update
;m
#Motor_off
Stat 3
;m ORA
STA
Endtask_2:
RTS ;back to Idle rtn
;;;
Start motor/speech from macro table
; Because of conflicts in diagnostic routines, this routine has been
; changed to a subroutine. All normal sensors jump here, diags- call
; direct.
Start_roacro:
LDA #Bored_reld ;reset bored timer
STA Bored_timer ;
LDA Macro_Lo ;save for sleepy & IR tests
RecL_macro_lo
Macro__Hi
Req_jnacro_hi
STA ;
LDA ;save for sleepy & IR tests
STA ;
JSR Get__m*cro
JMP Idle ;done
Get_macro:
; Motor noise is triggering sound sensor hardware, so this sets the
; previously sound done flag, and the system will not respond to the
; sound sensor until the sound trigger line goes low and clears prev
done.
LDA Stat_3
ORA #Sound_stat ;
STA Stat_3
/system
;set prev dn
; end sound flag
A-50
----------------------- Page 52-----------------------

INC Age_counter ;rolls over to inc age
BNE Same_age ;jump if no roll over
; ;
AGE INCRMNT uses bit 7 to double age counter
LDA Age
AND #80h
;get bit 7 - set « counter rolled over twice
;get bit 7
BNE Roll_age ;bit 7 set so inc age
LDA Age
#80h ;set bit 7 for next counter roll over
;update
;done
ORA
STA Age
JMP Same_age
Roll_age:
INC Age ;just grew up some
LDA Age
AND #07h ;clear bit 7
STA Age
CLC
•03 make sure it isnt > 3
jump if <4
max age
SBC (0-3 age)
BCC Same_age
LDA #03
STA Age
Same_age:
end age
Stat_2
#Macro_actv
Stat 2
LDA ;system
;flag request
;update
;do speech
;move hi bit to carry & get 2 * s offset
;move c*rry into one of four group ptr
ORA
STA
CLC
ROL Macro_Lo
ROL Macro_Hi
;offset ptr
;get current group pointer
;is it table group 4
;jump if is
;is it table group 3
Dec_jnacro3 ;jump ii is
;is it table group 2
Dec_jnacro2 ?jump if is
;table group 1
Macro
.Lo
Macro_Hi
#03
Dec_jnacro4
#02
LDX
LDA
CMP
BEQ
CMP
BEQ
CMP •01
BEQ
Dec_joacrol:
;get lo pointer
;working buffer
;X+1
Macro_grpl,X
Macro_Lo
LDA
STA
INX
;get hi pointer
;go finish load
Macro_grpl,X
Dec_macro_end
LDA
JMP
Dec_jaacro2:
LDA
STA
;get lo pointer
;working buffer
;X+l
Macro_grp2,X
Macro__Lo
INX
;get hi pointer
;go finish load
Macro_grp2,X
Dec_macro_end
LDA
JMP
Dec_jnacro3:
;get lo pointer
/ working buffer
;X+1
Macro_grp3,X
Macro_Lo
LDA
STA
INX
A-51
----------------------- Page 53-----------------------

LDA Macro_grp3.X
JMP Dec_jnacro_end
;get hi pointer
;go finish load
Dec_jaacro4:
LDA Macro__grp4,X
Macro_Lo
;get lo pointer
;working buffer
;X+l
STA
INX
LDA Macro_grp4,X
Dec_jroacro_end:
STA Macro_Hi ;working buffer
RTS
;get hi pointer
*
;;;;; ;;
This group of speech fit misc routines are used for the various game
; play modes, triggered by the easter egg.
; REMEMBER TO CLEAR GAME ACTIVE STATUS WHEN DONE
NOTE: Otomah should have a delay before the word to seperate this game
from the speech generated by the last sensor that triggered
this game.
;using macro 84 for 1st word
;hi byte adrs 84 = 054h
Otoraah_lo EQU #54h
Otomah__hi EQU #00
;using macro 102 for delay between speech
;hi byte adrs 102 = 066h
Fortdelay_lo
Fortdelay_hi
#66h
#00h
EQU
EQU
Game_fortune:
LDA Stat_5
AND #temp_gaml
BNE Oanufort2
LDA Stat_5
ORA #temp_gaml
STA Stat_5
;flag used at start of g«une
;see if prev done
;jump if done
;flag used at start of game
;set prev done
;update
#Otomah_lo
Macro_Lo
#0tomah_hi
Macro_Hi
Get_jnacro
Notrdy
;get macro lo byte
;save lo byte of Macro tabj.e entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
LDA
STA
LDA
STA
JSR
JSR
#GameT_re1oad
Sensor_timer
LDA ;reset game timer
STA
Ganufort2:
JSR Test_all_sens ;go check all sensors
A-52
----------------------- Page 54-----------------------

LDA Stat_4
AND «Do_back
BNE Ganufort4
/get sensor status
/ck if back sw req
jump if requested
LDA Stat__4
#Do_inv^. i
Gam_fort3
;get sensor status
?ck if tilt sw req
;jump if not requested
AND
BEQ
Gant_fort2a:
Clear_all_gam
End_all_games
JSR /go clear all status, cancle game
JMP ;done go say "me done"
Garnetort3:
Sensor_timer
Gam_fort2a /clear all if timed out
/ wait for switch
LDA /ck for no action timeout
BEQ
JMP Idle
Gan\_fort4:
LDA Stat_4
#Nt__do_back /back sw req
Stat_4
/ get sensor status
AND
STA /clear req
*GameT_reload
Sensor_timer
LDA / reset game timer
STA ;
•Fortdelay_lo
Macro_Lo
«Fortde3 ay_hi
Macro_Hi
Get_macro
Notrdy
LDA / get macro lo byte
/save lo byte of Macro table entry
/ get macro hi ^yte
/save hi byte of Macro table entry
/go start motor/speech
/Do / get status for speech and motor
STA
LDA
STA
JSR
JSR
Stat_l
«Half_age
Stat_l
LDA /get system
/ force table 1 or 2 in "Decid_age"
/update
ORA
STA
«80h
IN_LAT
/get random/sequential split
/save for random routine
LDA
STA
/make sure only gives random
/get number of random selections
/ go decide random/sequential
LDX #Gu
LDA •lOh
JSR n_seq
Acc holds random number 0-F
Decid_age
TEMPO
Fortyes_Sl,X
Macro_Lo
Req_macro_lo
/do age calculation for table entry
/age offset
JSR
LDX
/ get lo byte
/save lo byte of Macro table entry
/ save for game
LDA
STA
STA
INX ;
/ get hi byte
/save hi byte of Macro table entry
/save for game
LDA Fortyes_Sl,X
Macro_Hi
Req_jnacro_hi
STA
STA
LDX «00 /offset
Fort_Name2:
Ck_Fort_name,X
#FFh
Fort_Name_dn
Macro_Lo
/ck lo byte
jck for end of table (note 255 cant execute)
/done if is
/ck against last speech request
LDA
CMP
BEQ
CMP
A-53
----------------------- Page 55-----------------------

BNE Not__Fort2 ;jump if not
INX ;to hi byte
Ck_Fort_name,X
Macro_Hi
Not_Fort3
Say_Fortname
LDA ;ck hi byte
;ck against last speech request
;jump if not
;speak it
CMP
BNE
JMP
Not__Fort2:
INX
Not_Fort3:
INX
JMP Fort_Name2 ;loop til done
Say_Fortnamo:
LDA Name ;current setting for table offs*
CLC
ROL A ;2 *s ccsap
TAX
Name_table.X
Macro_Lo
LDA ;get 1c byte
STA ;save 1c byte of Macro table entry
INX
ge V bite
;save h_ of Macro table entry
;go star or speech
get status for speech and motor
Name_table,X
Macro_Hi
Get_macro
Notrdy
LDA
STA
JSR
JSR ;Dc
Req_macro_lo
Macro_Lo
Req_macro_hi
Macro__Hi
LDA ;recover for game
;set game speech
;reccver for game
;set game speech
STA
LDA
STA
Fort_Name_dn:
JMP Start_macro ;go set group/table pointer for motor & speh
*.
; compare macro to see if we are going to call Furby’s name first.
Ck_Fort_name:
DW 69
DW 11
DB FFh.FFh ;FF FF is table terminator
;;
Game_Rap:
JMP Do_rap ;lst time thru
Grap_2:
Simon_timer ;decrement bored timer
Bored_timer ;system elapsed time
Rap_over
Te*;t_all_sens
Stat_4
Grap_2
•Do_snd
Do_rap
JSR
LDA
BEQ ;jump if 0
JSR ;go check all sensors
LDA ;get sensors
;loop if none
;ck for mic
;any other sensor stops game
BEQ
AND
BNE
Rap_over:
JSR Clear._ all_.gam
End_a11_games
;go clear all status, cancle games
JMP ;done go say "me done"
A-54
----------------------- Page 56-----------------------

Do_rap:
LDA •00 ;clear all sensor tlags
Stat_4
iGameT_re1oad
Bored_timer ;reset
•80h
STA
LDA ;get reload
STA
;get randean/sequential split
;save for random routine
/make sure only gives random
;get number of random selections
;go get random selection
;get decision
;got 1 of 4 decision
LDA
STA IN_DAT
tOOh
•lOh
Ran_seq
TEMPI
#03h
LDX
LDA
JSR
LDA
AND
CLC
ROL A ;2's offsett
TAX
;get macro lo byte
;save lo byte of Macro table entry
LDA Rapsong,X
STA Macro__Lo
INX
/get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
;loop
LDA Rapsong,X
Macro_Hi
Get_macro
Notrdy
Grap__2
STA
JSR
JSR
JMP
Rapsong:
DW 395 /macro RAP song pointer
DW 396
DW 407 ?
DW 416 ;
;;
/using macro 475 for startp "hide me" speh
/hi byte adrs 475 * lDBh
HidePeek_lo EQU
HidePeek_hi EQU ••DBh Olh
•D8h / using macro 472 for "nana nana nana
•Ulh /hi byte adrs 472 * lD8h
Hidsklost_lo
Hidsklost_hi
EQU
EQU
/using macro 439 for ‘whopee
/hi byte adrs 439 = lB7h
Hidskwon_lo EQU
Hidskwon_hi EQU ••Olh B7h
Game__hideseek:
/set timer for 1 min (80 • .742)
STA LDA •HCEL 80 LO /use temp ram for timer
LDA Name /current setting for table offset
CLC
ROL A /2's comp
TAX
/get lo byte
/save lo byte of Macro table entry
Name_table,X
Macro_Lo
LDA
STA
INX
/get hi byte
;save hi byte of Macro table entry
;go start motor/speech
/Do / get status for speech and motor
Name_table,X
Macro_Hi
Get_macro
Notrdy
LDA
STA
JSR
JSR
A-55
----------------------- Page 57-----------------------

LDA #HidePeek_lo
STA Macro
„Lo
LDA »HidePeek_hi
STA Macro_Hi
JSR Get_macro
JSR Notrdy
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
Gandhide2:
JSR HideS_timex ;go dec bored timer without Idle
Test_all_seas
Stat_4
JSR ;go check all sensors
;get all switches
*Do_invert ;ck if inverted
Gan\_hide2a ;jump if not inverted
Gandhide9
Clear_all_gam
End_all_gnines
LDA
AND
BEQ
JMP ;abort game and call game lost speech
;go clear all status, cancle games
;done go say "me done"
;
JSR
JMP
Gan\_hide2a:
LDA HCEL_LO
Ganuhide2
;ck for no action timeout
BNE ;wait till done to start game
LDA »00 ;clear all sensor flags
STA Stat_4
»242
HCELLO
LDA ;set timer for 3 min (242 • .742)
STA ;reset
Ganuhide4:
»80h ;get random/sequential split
;save for random routine
;make sure only gives random
;get number of random selection? (O-Of)
;go decide random
.and nnot >16
LDA
STA IN_fAT
LDX »00
»10h
Ran_seq
#0F
LDA
JSR
AND
TAX
Hide_time,X ;get random timer for speech
Sensor_timer
LDA
STA
GanuhideS:
Test_all_sens
Stat_4
»Do_tilt
Ganv_hide8
JSR ;go check all sensors
;get sensor status
;ck if tilt sw req
;jump if requested
LDA
AND
BNE
HideS_timer ;go dec bored timer U sensor_timer
;get elapsed
JSR
LDA HCEL_LO
BEQ Gandhide9 ;game over
Sensor_timer
GamJhideS
LDA ;get random speech timer
BNE ;loop till done
; GO SAY RANDOM WORDS TO HELP FIND HIM
«80h
IN_DAT
•OOh
#10h
Rai._seq
TEMPI
LDA ;get random/sequential split
;save for random routine
,- make sure only gives random
;get number of random selections
;go get random selection
;get decision
STA
LDX
LDA
JSR
LDA
A
-56
----------------------- Page 58-----------------------

CLC
ROL A ;2's offsett
TAX
Hideseek,X
Macro
.Lo
? get macro lo byte
;save lo byte of Macro table entry
LDA
STA
INX
Hideseek,X
Macro
.Hi
Get_jmacro
Notrdy
Gam_hide4
? get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
oDA
STA
JSR
JSR
JMP
GanuhideB: ;GAME WON SPEECH
JSR Clear_all .gam ? go clear all status , cancel game
•Hidskwon__lo
Macro
.Lo
#Hidskwon_hi
Macro
^
Ho.
Start_jnacro ;go set group/table pointer for motor & spch
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
LDA
STA
LDA
STA
JMP
Gan\_hide9: ;GAME LOST SPEECH
;go clear all status, cancel game
;number of times to call *nana *
Clear
.
all
JSR .gam
LDA •03
STA HCEL
.
HI
Gan\_hide9a:
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
;loop
•Hidsklost .lo
Macro
.
Lo
#Hidsklost_hi
Macro_Hi
Cet _macro
Notrdy
HCEL
.
HI
GaaL.hide9a
Idle
LDA
STA
LDA
STA
JSR .*
JSR
DEC
BNE ;
JMP ;done
HideS
.
timer:
Milisec .flag ;if >0 then 742 mili seconds have passed
HideS__tdn ;bypass if 0
;clear it
LDA
BEQ
LDA •00
Milisec
.flag
HCEL
.
LO
HideS_t2
HCEL_LO
;reset
;get current timer * 742mSec sec
;do nothing if 0
;-1
STA
LDA
BEQ
DEC
HideS_t2:
;get current timer * 742mSec sec
;do nothing if 0
Sensor_timer
Hides
.tdn
Sensor
.timer
LDA
BEQ
DEC ;-l
HideS
.
tdn:
RTS ;
;for random time between calls whe.i hiding
;5 sec (x * ,742)
Hide
.time:
DB 6
DB 7
DB 8
DB 9
DB 10
A-57
----------------------- Page 59-----------------------

DB 11
DB 12
DB 13
DB 14
DB 15
DB 16
DB 17
DB 18
DB 19
DB 20 ;15 sec
DB 10
Hideseek: ;table of sound when Furby is hiding & waiting to be found
DW 437
DW 438
DW 95
DW 96
DW 97
DW 451
DW 452
DW 437
DW 437
DW 438
DW 95
DW 96
DW 97
DW 451
DW 452
DW 438
Furby - Says ;;;;
; Four byte of ram allocated for game and 5th byte is game counter.
; On start, get 4 random numbers and set the game counter to 4
sequences.
; Furby plays the 4 sounds and waits for the sensors to respond. If its
; ’wrong, then start over at beginning and if it is right then say
whoppee
j and increment to 5 sounds until all 16. If 16 correct then get
; 4 new random numbers and continue with 16 sequences.
; The invert switch bails out of the game.
Simondelay_1o
Simondelay_hi
»66h
#0Oh
;using macro 102 for delay between speech
;hi byte adrs 102 = 066h
EQU
EQU
Listen
^jme^lo
Listen_jne_hi
EQU DAh ;on start up he say "Listen Me"
EQU Olh ;macro 474 = IDAh
Simon_fmt_lo
"tickle"
Simon_fmt_hi
EQU #AEh ;using macro 430 for simon chooses
EQU tOlh ;hi byte adrs 430 = lAEh
Simon_back_lo
Simon_back_hi
tAFh
tOlh
;using m c r o 431 for simon chooses
;hi byte adrs 431 = lAFh
EQU "pet
EQU
A-58
----------------------- Page 60-----------------------

Simon_snd_lo
Simon_snd_hi
#BOh ;using macro 432 for simon chooses 'sound
#01h ;hi byte adrs 432 * IBOh
EQU
EQU
Simon_lght_lo
Simon_lght_hi
#Blh ;using macro 433 for simon chooses "light
*01h ;hi byte adrs 433 = lBlh
EQU
EQU
Skeyfmt_lo EQU
Skeyfmt_hi EQU
;using macro 15 for user feed back
;uae for "front"
•OFh
#00h
Skeybck_lo EQU
Skeybck_hi EQU
*B2h
#01h
;uaing macro 434 for user feed back
;use for "back"
Skeylght_lo EQU
Skeylght_hi EQU
•B3h
tOlh
;using macro 435 for user feed back
;use for "light"
Skeysnd_lo EQU
Skeysnd_hi EQU
*B4h
•Olh
;using macro 436 for user feed back
;use for "sound"
Simonlost_lo
Simonlost_hi
EQU #D8h ; lost game is macro 472
EQU *01
Available ram not in use during this game
HCEL__LO Counter of which sensor were on
Random play ram 1
~ • Random play ram 2
Random play ram 3
Random play ram 4
HCEL_HI
BIT_CT -
Task_ptr
Bored_count
;TEMP5 Random save ram 1 ( was TMA_INT ) TEMP5 used in
•RAN_SEQ'
?Temp_ID2
;Temp_ID
;Learn_temp Random save ram 4
Random save ram 2
Random save ram 3
Game_simon:
; do delay before start of game
*Simondelay_lo
Macro_Lo
iSimonde1ay__hi
Macro_Hi
Get _joacro
Notrdy
;get macro lo byte
;save lo byte of Macro table entry
;get macro lo byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
LDA
STA
LDA
STA
JSR
JSR
LDA Name ;current setting for table offset
CLC
ROL A ;2's comp
TAX
;get lo byte
;save lo byte of Macro table entry
Name_table,X
Macro_Lo
LDA
STA
INX ;
;get hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
Name_table,X
Macro__Hi
Get_macro
Notrdy
LDA
STA
JSR
JSR
A-59
----------------------- Page 61-----------------------

#Listen_jme__lo
Macro_Lo
•Listen_meJhi
Macro_Hi
Getjoacro
Notrdy
LDA /get macro lo byte
;save lo byte of Macro table entry
/get macro lo byte
;lave hi byte of Macro table entry
/ go start motor/speech
;Do / get status for speech and motor
STA
LDA
STA
JSR
JSR
#Simonde1ay_lo
Macro_Lo
#Simonde1ay_hi
Macro_Hi
Get_jnacro
Notrdy
/get macro lo byte
;8ave lo byte of Macro table entry
;get macro lo byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
LDA
STA
LDA
STA
JSR
JSR
LDA «04 ;number of sensors in 1st game
GS_rentr:
STA ;load counter
;save for later use
;go load 2 grps of 4 ram locations
HCEL_LO
IN_DAT
Simon_random
STA
JSR
Simonl:
;get 1st ram location
/ go to speech
next 2 bits for sensor choice
z-1 (number of sensors played this game}
;loop til all speech done
LDA HCEL_HI
Simon_sensor
Rotate_play ;get
IN_DAT
Simonl
JSR
JSR
DEC
BNE
Recover_play
«GameT_reload
Bored_timer ;set
#00
Stat_4
HCEL_LO
IN_DAT
;reset random rams
;reset timer
JSR
LDA
STA
LDA
;clear all sensors
;get counter
/ reset it
STA
LDA .«
STA
Simon2:
Test_all_sens
Stat_4
Simon3
;go check all sensors
/get em
/ jump if any triggered
Simon_timer /go check for timeout
Bored__timer /
Simon2
Simon_over
JSR
LDA
BNE
JSR
LDA
/ loop if not
/bailout if 0
BNE
JMP
Simon3;
; do to lack of time I resort to brute force ... YUK....
Stat_4 /get which sensor
#08h
Simon3a
#Skeyfmtjo
Macro_Lo
#Skeyfmt_hi
Simon3dn
LDA
CMP /front sw
/jump if not
/get macro lo byte
/save lo byte of Macro table entry
/ get macro hi byte
BNE
LDA
STA
LDA
JMP /go speak it
Simon3a:
#10h
Simon3b
CMP / back sw
/jump if not
#Skeybck__lo /get macro lo byte
Macro_Lo
#Skeybck__hi / get macro hi byte
Simon3dn
BNE
LDA
STA /save lo byte of Macro table entry
LDA
JMP /go speak it
Simon3b:
CMP #04h /light
A-60
----------------------- Page 62-----------------------

Simon3c
«Skeylght_lo
Macro_Lo
«Skeylght_hi
Simon3an
BNE ;jump if not
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
LDA
STA
LDA
JMP igo speak it
Sixnon3c:
«01h
Simon3d
CMP ;sound
;jump if not
•Skeysnd_lo ,* get macro lo byte
Macro_Lo
«Skeyend_hi ;get macro hi byte
Simon3dn
BNE
LDA
STA ;lave lo byte of Macro table entry
LDA
JMP ;go speak it
Simon3d:
*Do_invert
Simon3e
CMP ;?
BEQ ;jump if is invert
LDA «00 ?
Stat_4
Simon2
;clear sensor flags
;ignore all other sensors loop up
STA
JMP
Simon3e:
JMP Simon_over ;bail out if is
Simon3dn:
STA Macro__Hi
Get__macro
Notrdy
;save for macro call
;go start motor/speech
;Do / get status for speech and motor
JSR
JSR
LDA HCEL_HI ;get 1st ram location
«03 ;bit 0 & 1
;point co interpret table entry
;translat game to sensors
;ck for correct sensor
AND
TAX
LDA Simon_convert ,X
Stat_4
Simon_lost ;done if wrong
«00
CMP
BNE
LDA
;clear all sensors
Rotate_j?lay ;get next 2 bits for sensor choice
;-1 (number of sensors played this game)
;loop til all sensors done
STA Stat 4
JSR
DEC IN_DAT
Simon2
Simon_won ;game won
Recover_play
HCEL_LO
BNE
JSR
;reset random rams
;increase number of sensors in next game
JSR
INC
CLC
LDA HCEL_LO
IN_DAT
;get current
;reset game sensor counter
;ck if max number of sensors
STA
SBC «16
Simon4
Simonl
BCS ;
JMP ;loop up
Simon4:
«16
GS_rentr
LDA ;set to max
JMP ;start next round
» * 1 1 » » Simon subroutines
Simon_lost:
LDA Stat_4 ;ck for invert sw to end game
CMP «Do_invert ;?
BEQ Simon__over ;bail out if is
; ;
LDA «Simonlost_lo ;get macro lo byte
A-tfi
----------------------- Page 63-----------------------

STA Macro_Lo
•Simonlost_hi
Macro_Hi
Get_jmacro
Notrdy
Game__simon
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/apeech
;Do / get status for speech and motor
;start at beginning
LDA
STA
JSR;
JSR
JMP
Simon
^won:
LDA HCEL_LO ;game number (how many steps)
CLC
ROL A ;2's offsett for speech win table
TAX ;
Simon_won_,Kbl X
Macro_JLo
LDA ;get lo byte
STA ;save lo byte of Macro table entry
INX
Simon_won_tbl,X
Macro_Hi
Get_macro
Notrdy
LDA ;get hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
STA
JSR
JSR
RTS
Rotate_play:
Bored__count
Task_ptr
BIT_CT
HCEL_HI
Bored_count
Task__ptr
BIT_CT
HCEL_HI
;shfl to carry
;carry & shfl to carry
;carry & shfl to carry
;carry & shfl to carry throw away lo bit
;shfl to carry
;carry & shfl to carry
;carry U shfl to carry
;carry & shfl to carry throw away lo bit
ROR
ROR
ROR
ROR
ROR
ROR
ROR
ROR
RTS ;
Recover_play:
LDA
STA
TEMP5
HCEL_HI
Temp_ID2
BIT__CT
Temp_ID
Task_ptr
Learn_temp
Bored_count
;recover random data
LDA
STA
LDA
STA
LDA
STA
RTS
;
Simon
^over:
JSR Clear_all_gam ;go clear all status, cancel game
LDA #00 ;
Task_ptr
End_a11_games
STA ;reset for normal use
JMP ;done go say "me done"
Siraon_sensor:
AND #03h
CLC
;get senosr
;2s offset
;offset
RCL A
TAX
Psimon_table,X
MacroJLo
LDA ;
STA
INX -
Psimon_table,X
Macro_Hi
LDA
STA ;save hi byte of Macro table entry
A-62
----------------------- Page 64-----------------------

JSR Get_jnacro
JSR Notrdy
;go start motor/speech
;Do / get status for speech and motor
RTS
?
Simon_delay:
•Simondelay_lo
Macro_Lo
•Simonde1ay_hi
Macro_Hi
Get_macro
Notrdy
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
LDA
STA
LDA
STA
JSR
JSR
RTS ;
;S
imon_random:
JSR Random
STA TEMP5
STA HCEL_HI
JSR Random
STA Temp„ID2 .
STA BIT_CT
JSR Random
STA Temp_ID
STA Task_ptr
JSR Random
STA Learn_temp
STA Bored_count
;get random number (0-255)
;
;get random number (0-255)
m
;get random number (0-255)
;get random number (0-255)
RTS
Simon__timer:
LDA Milisec_flag ;if >0 then 742 mili seconds have passed
Sinvon_tdn ;bypass if 0
;clear it
BEQ
LDA #00
Milisec
STA .flag ;reset
Bored_timer ;get current timer • 742mSec sec
Simon_tdn
Bored_timer ;-l
LDA
BEQ ;do nothing if 0
DEC
Simon_tdn:
RTS ;
;
Psimon_table:
;front switch
;back switch
;sound sensor
;light sensor
( 00 )
( 01 )
( 11 ) (It & snd swaped in table)
( 10 )
DW 430
DW 431
DW 433
DW 432
;
Simon__convert: table to sensor table
DB 08h
DB lOh
;converts game
;front sw
;back sw
;light
;sound
DB 04h
DB Olh
;
for each game won there is a macro (or re-use them)
0 (not used
1 (not used
2 (not used
3 (not used
Simorvjtfon^tbl:
place holder)
place holder)
place holder)
place holder)
DW 72 i•••
DW 12
• t i i
DW 72 i • » *
DW 72 « M *
DW 72 ; 4 (1st game has 4 sensors, each game adds one)
DW 72 ; 5
A-d3
----------------------- Page 65-----------------------

DW 72 6
DW 72 7
DW 380 8
DW 380 9
DW 380 10
DW 380 11
DW 471 12
DW 471 13
DW 471 14
DW 471 15
DW 439 16
End_a11_games: ;when any game ends, they jump here and say done
Saygamdn_lo EQU
Saygamdn_hi EQU
#D9h
#01h
;using macro 473 for game over speech
?
#Bored_reld ;reset bored timer
Bored_timer ;
LDA
STA
HSaygamdn_1o
Macro_Lo
#Saygamdn_hi
Macro_Hi
Start_macro ;go set group/table pointer for motor & spch
LDA ;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
STA
LDA
STA
JMP
;Burp attack egg
Burpsnd_lo
Burpsnd_hi
EQU #D6h ;using macro 470 for user feed back
EQU «01h ;
Game__Burp:
JSR Clear_all_gam
#Bored_reld ;reset bored timer
Bored_timer ;
LDA
STA
» Burpsnd_lo ;get macro lo byte
Macro_Lo
LDA
;save lo byte of Macro table entry
#Burpsnd__hi ;get macro hi byte
Macro_Hi
Start_macro ;go set group/table pointer for motor & spch
STA
LDA
STA ;save hi byte of Macro table entry
JMP
; ;
easter egg says NAME
Game_name:
A-64
----------------------- Page 66-----------------------

JSK Clear_all_gam
#Bored_reld ;reset bored timer
Bored_timer ;
LDA
STA
LDA Name ;current setting for table offset
CLC
ROL A ;2 *s comp
TAX
Name_table,X
Macro Lo
;get lo byte
;save )o byte of Macro table entry
LDA
STA
INX ;
;get hi byte
;save hi byte of Macro table entry
Name
,,
table,X
Macro_Hi
Start_macro ;go set group/table pointer for motor (* spch
LDA
STA
JMP
;; ;
Twinkle song egg
; When song i plete, if both tront and back switches are pressed
; we goto dee -. . < p. That means only the invert can wake us up, not
; the invert . tch.
#D5h ;using macro 469
#01h ;
Twinklsnd_lo
Twinklsnd_hi
EQU
EQU
Sl*“P__lo ,- using macro 166 (before going to sleep)
Sleep_hi
#A6h
«00h
EQU
EQU
Game_twinkle:
JSR Clear_all_gam
LDA #03 ;song counter
STA HCEL_LO ;set
Gtwnk:
;-l
;Get system clear done flags
•Not_tch__ft ;clear previously inverted flag
#Not_tch_bk ;clear previously inverted flag
;update
HCEL_LO
Stat 2
DEC
LDA
AND
AND
STA Stat_2
#Bored_reld ;reset bored ti^ver
Bored_timer ;
LDA
STA
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
;get status
;get status 2nd time for debounce
;switch status
isolate front and back switches
#Twinklsnd_lo
Macro_Lo
#Twinklsnd_hi
Macro_Hi
Get_macro
Notrdy
Test_all_sens
Test_all_sens
Stat_4
#18h
#18h
Start__sleep ;if both switches pressed, goto sleep
;get song loop counter
LDA
STA
LDA
STA
JSR
JSR
JSR
JSR
LDA
AND
CMP
BEQ
LDA HCEL_LO
BNE Gtwnk ;loop
A-65
----------------------- Page 67-----------------------

JMP Idle ;not so egg complete
Start_sleep:
•Sleep_lo
Macro_Lo
*Sleep_hi
Macro_Hi
Get_jnacro
Notrdy
#llh
Deep_sleep
GoToSleep
LDA ;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
;set deep sleep mode
STA
LDA
STA
JSR
JSR
LDA
STA
JMP ;nity-night
;; ;
Rooster loves you egg
Roostersnd_lo
Roostersnd hi
EQU #D4h ;using macro 468
EQU HOlh ;
Game_rooster:
JSR Clear_all_gam
» Bored_reld ;reset bored timer
Bored_timer ;
LDA
STA
#Rocstersnd_lo
Macro_Lc
#Roostersnd_hi
Macro_Hi
Start_mawro ;go set group/table pointer for motor 4c spch
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;save hi byte of Macro table entry
LDA
STA
LDA
STA
JMP
*,; ;
If a game requires sensor input without triggering the normal
sensor cycle for speech, then this rtn will check all sensors for
; change and tht calling game can check for the appropriate trigger
; DO NOT USE I.R. SENSOR SINCE ITS RAM LOCATIONS ARE USED IN GAMES
;
Test_all_sens:
JSR
JSR
Get_ back
Get_Tilt
Get_invert
Get_front
Get_light
Get_sound
Get_feed
JSR
JSR
JSR
JSR
JSR
RTS back to game
; Sid«= *11 switch triggers when ball falls off center and I/O goes
A-66
----------------------- Page 68-----------------------

hi.
CK_tilt: ;tilt sensor
Get_Tilt
Normal_tilt ;go fini normal spch/motor table
Idle
JSR ;go ck for 9ensor trigger
BCS
JMP ;no request
Get_Tilt: ;this is the subroutine entry point.
;get I/O
;ck if we tilted on side
;jump if hi
LDA Port_D
AND •Ball side
BNE Do__bside
Stat_2
#Not_bside
Stat_2
LDA ;Get systen;
;clear previously on side flag
;update
AND
STA
Sidevout:
CLC ;clear indicates no request
RTS
Do_bside:
LDA Stat_2
#Bside_dn
Sidevout
Stat_2
#Bside_dn
Stat_2
;system
;ck if previously done
;jump if was
;get system
;flag set ,only execute once
;update system
AND
BNE
LDA
ORA
STA
;game mode status
;flag sensor is active
;update
;carry set indicates sensor is triggered
Stat_4
#Do_tilt
Stat_4
LDA
ORA
STA
SEC
RTS
Normal_tilt: ;Idle rtn jumps here to complete speech/motor table
also for testing, when tilt is triggered, it resets all
easter egg routines to allow easy entry of eggs.
1 4 4 1 1 0 9
JSR Clear_all_gam
;
JSR Life
BCS More_tilt
JMP Idle
;go tweek health/hungry counters
;if clear then do sensor else bail
;done
More__tilt:
*Tilt_split ;get random/sequential split
IN_DAT
LDA
STA ;save for random routine
;get how many sequential selections
;get number of random sleetions
;go decide random/sequential
#Seq_tilt
*Ran_tilt
Rai\_seq
LDX
LDA
JSR
A-67
----------------------- Page 69-----------------------

LDX Sensor_timer ;get current for training subroutine
BCS Tilt_ran ;Random mode when carry SET
LDA Sensor_timer
BEQ Tilt_reset ;yep
;ck if timed out since lar.t action
LDA Ti1t_count
STA BIT_CT
;save current
;temp store
INC Tilt_count ;if not then next table entry
LDA Tilt_count ;get
CLC
SBC #Seq_tilt-l ;ck if > assignment
BCC Tilt_side ;juxnp if <
LDA #Se<i_tilt-l ;dont inc off end
STA Tilt_count ;
JMP Tilt
.
side ;do it
Tilt_reset:
LDA «00
STA BIT__CT
STA Tilt__count
;reset to 1st entry of sequential
;temp store
Tilt_side:
«Global_time
Sensor_timer
BIT CT
LDA ;get timer reset value
;reset it
;Acc holds value for subroutine
STA
LDA
Tilt ran:
;save decision
;which ram location for learned word count
STA IN_DAT
LDA #Tilt__ID
(offset)
Start_learn ;go record training info
;get decision
JSR
LDA IN DAT
Decid_age
TEMPO
Tilt_Sl,X
Macro_Lo
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
JSR
LDX
LDA
STA
INX
Tilt_Sl,X
Macro_Hi
Start_macro ;go set group/table pointer for motor & spch
;get hi byte
;save hi byte of Macro table entry
LDA
STA
JMP
Inverted ball switch triggers when ball touches top and I/O goes
hi.
Ck_invert: ; upside down sense
JSR Get__invert ;go ck for sensor trigger
BCS Normal_invert
JMP Idle
;go fini normal spch/motor table
;no request
Get_invert: ;this is the subroutine entry point.
A-68
----------------------- Page 70-----------------------

LDA Port_D
*Ball_invert
;get I/O
AND ;ck if we upside down
BNE Do__binvrt /jump if inverted (hi)
Stat_2
iNot_binvrt ;clear previously inverted flag
Stat 2
LDA ;Oet system
AND
STA ;update
Invrt__out:
CLC
RTS
;clear carry indicates no sensor change
Do_binvrt:
LDA
AND
Stat_2
•Binvrt_dn
Invrt_out
Stat__2
#Binvrt_dn
Stat_2
;get system
;ck if prev done
;jump if was
;get system
;flag set ,only execute once
;update system
BNE
LDA
ORA
STA
;game mode status
;flag sensor is active
;update
Stat_4
#Do_invert
Stat_4
LDA
ORA
STA
SEC ;set indicates sensor is triggered
RTS
Normal
.. invert:
;go tweek health/hungry counters
More__invert ;if clear then do sensor else bail
;done
JSR Life
BCS
JMP Idle
More_invert:
;
;get random/sequential split
STA LDA •IN Invert _DAT _split ;save for random routine
#Seq_invert ;get how many sequential selections
•Ran_invert ;get number of random elections
;go decide random/sequential
LDX
LDA
JSR Rai\_seq
LDX Seneor_timer ;get current for training subroutine
BCS Invrt_md /Random mode when carry SET
Sensor_timer ;ck if timed out since last action
Invrt_reset ;yep
LDA
Ba£
Invrt_count ;save current
;temp store
LDA
BIT
STA .CT
Invrt_count ;if not then next table entry
Invrt_count ;get
INC
LDA
A-69
----------------------- Page 71-----------------------

CLC
#Seq_invert-l
Invrt_set
tSeq_invert-l
Invrt_count ;
Invrt_set
SBC ;ck if > assignment
BCC ;jump if <
LDA ;dont inc off end
STA
JMP
Invrt_reset:
LDA
;do it
;reset to 1st entry of sequential
;temp store
#00
STA BIT
.
CT
STA Invrt_count ;
Invrt_set:
LDA
STA
#Global_time
Sensor_tiroer
BIT_CT
;get timer reset value
;reset it
LDA ;speech to call
Invrt_md:
;save decision
;which ram location for learned word count
STA IN_DAT
LDA #lnvert_ID
(offset)
Start__leam ;go record training info
;get back word to speak
JSR
LDA IN_DAT
Decid_age
TEMPO
Invrt__Sl,X
Macro Lo
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
JSR
LDX
LDA
STA
INX
Invrt_Sl # X ;get hi byte
Macro_Hi ;save hi byte of Macro table entry
Start_ir.acro ;go set group/table pointer for motor & spch’ -
LDA
STA
JMP
••
Ck back: ;Back touch sensor
Get_bac* ;go ck for sense'* trigger
Normal_back ;go fini normal speh/motor table
Idle
JSR
BCS
JMP ;no request
Get_back: ;this is the subroutine entry point.
;get I/O
;ck if Firby ’s back is rubbed
;jump if lo
LDA Port__C
#Touch_bck
Do_tch_bk
Stat_2
#Not_tch_bk
Stat_2
AND
BEQ
LDA ;Get system
;clear previously inverted flag
;update
AND
STA
Tchl_out:
CLC ;clear carry for no sensor request
RTS ;
Do_tch_bk:
Stat_2
#Tchbk_dn
Tchl_out
LDA ;get system
;ck if prev done
;jump if was
AND
BNE
A-70
----------------------- Page 72-----------------------

LDA Stat
.2
•Tchbk .dn
Stat_2
;get system
;flag set ,only execute once
;update system
ORA
STA
LDA Stat_4
•Do .back
Stat_4
;game- mode status
;flag sensor is active
;update
;set indicate? sensor is triggered
ORA
STA
SEC
RTS ;
Normal_back: ;enter here to complere sensor speech/motor
;
JSR Life
i>CS More_back
JMP Idle
More
.back:
;go tw%. k health/hungry counters
;if clear then do sensor else bail
;done
;
•Back .split ;get random/sequential split
for random routine
LDA
STA IN
.DAT ;sa
;get how many sequential selections
;get number of random sleetions
;go decide random/sequential
#Seq .back
#Ran_back
Ran_seq
LDX
LDA
JSR
LDX Sensor .timer ;get current for training subroutine
Back
.
rnd ;Random mode when carry SET
Sensor .timer ;ck if timeu out since last action
Back
.reset
LDA
BEQ ;yep
Tchbck
.
count
BIT
.CT
LDA ;save current
STA ;temp store
;if not then next table entry
;get
Tchbck
.
count
Tchbck
.
count
INC
LDA
CLC
SBC iSeq .back-1 ;ck if > assignment
BCC Back
.
set
LDA #Seq .back-l ;dont inc off end
STA Tchbck .count
JMP Back_.eet
Back
.
reset:
LDA *00
;jump if <
;do it
;reset to 1st entry of sequential
STA BIT .CT ;temp store
STA Tchbck .count ;
Back
.
set:
LDA ;get timer reset value
;reset it
;get current pointer to tables
•Global,time
Sensor
.timer
BIT
.CT
STA
LDA
Back
.md;
;save decision
;which ram location for learned word count
IN
.DAT
•Back .ID
STA
LDA
A-7J
----------------------- Page 73-----------------------

(offset)
Start_leam ;go record training info
;get back word to speak
JSR
LDA IN_DAT
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
Decid_age
TEMPO
Tback_Sl,X
Macro_Lo
JSR
LDX
LDA
STA
INX ;
Tback_Sl,X
Macro__Hi
Start_macro ;go set group/table pointer for motor & spch
;get hi byte
;save hi byte of 1 icro table entry
LDA
STA
JMP
The IR routine turns interrupts off for 100 Msec, which stops the
timing chain (multiplies time by 100). This front end leaves
interrupts on and sits in a loop for 5 msec to determine if I.R. is
active and if so, executes normal I.R. routine, else exits.
start Tracker
;The way to include the IR program, I list as the following:
;It shows the program prargraph from Ck_IR: to Ck_front:
;of couse. It also attach the IR.asm file
;the IR.asm file I just make a little bit change, to make they work at
;any system clock assume by constant SystemClock:
;please advise.. :>
Ck_IR:
;timer stops IR from hearing own IR xmit
;jump if timer 0
LDA Last__IR
CKIR_S
Idle
BEQ
JMP ;abort if >0
CKIR
^
S:
#FFh ;set loop timer
TEMPI
•lOh
TEMP2
LDA
STA
LDA ;sot gross timer
STA
IR_req:
Port_B ;ck if IR signal active (hi)
«IR_IN
Got_IR
Port_B
«IR_IN
Got_IR
TEMPI
IR_req
#FFh
TEMPI
TEMP2
IR_req
Idle
LDA
AND ;get port pin
;go do input if active
;ck if IR signal active (hi)
;get port pin
;go do input if active
BNE
LDA
AND
BNE
DEC ;inside loop
BNE ;
;reset loop timer
;outside loop
;loop thru
;no activity found
LDA
STA
DEC
BNE
JMP
Got_IR:
LDA «05 ;number of times to ck for TR reception
A-72
----------------------- Page 74-----------------------

STA TEMP4
Got_IR2:
;used as a subroutine for diags
;jump if found data
JSR D_IR__test
BCS New IR
DEC TEMP4
BNE Got__IR2
Idle
;
;1oop
JHP ;bail out if not
New_IR:
JMP Normal_IR
Begin Koball ’s code
D_IR_test:
;;Tracker
;;Tracker
;Initialize timers, etc.
SEI
JSR GBYTE First time to read
LDA «Intt dflt
;;Tracker
STA Interrupts ;1oad reg
;;Tracker
;;1oad result to ACC
;;Tracker
LDA IN_DAT
CLI
RTS
Normal_IR:
; There are 4 I.R. table arranged as all other tables, one for each age.
But here we get a random number which determines which one of the
four tables we point to and the actual number received is the one of
; sixteen selection.
;;
*.
;;Tracker add
;kill hi nibble (compliment of lo nibble)
;save
LDA IN DAT
#0Fh
IN DAT
AND
STA
;test for special sneeze command
;jump if not
«08
No_sneeze
#Really_sick-30
Sick_counter
CMP
BNE
;force Furby to get sick
;update
LDA
STA
No_sneeze:
LDA
STA
Get
._Ik.md:
JSR
Bored_timer
TEMPI
;get current count
;save
Random ;get something
TEMPI
Get_IR_md
Seed_l
#0Fh
TEMPI
;-l
;1oop getting random numbers
;get new random pointer
;kill hi nibble
DEC
BNE
LDA
AND
STA ;save
CLC
;ck if > 11
ijuxap if not
;point to table 4
SBC «11
BCC NormIRw2
LDA •96
JMP Got_normIR
NormIFL.2:
LDA TEMPI jrecover random number
.*
CLC
A-73
----------------------- Page 75-----------------------

SBC #C7
BCC NormIR_3
LDA #64
;ck if > 7
;jump if not
;point to table 3
JMP Got_normIR
NormIR_3: *>*
LDA TEMPI ;recover random number
CLC
;ck if > 03
;jump if not
;point to table 2
SBC #03
BCC NormIR_4
LDA #32
JMP Got_normIR
NormIR_4:
LDA #00 ;force table 1
Got_normIR:
CLC
ROL IN_DAT ;16 bit offset for speech
CLC
;create speech field ofsett pointer
offset
ADC IN_DAT
TAX ;set
;get lo byte
;save lo byte of Macro table entry
IR_S1,X
Macro_Lo
LDA
STA
INX ;
;get hi byte
;save hi byte of Macro table entry
;go set group/table pointer for motor &
IR_S1,X
Macro_Hi
Start_macro
LDA
STA
JMP
spch
Include IR2.Asm ;asm file
; end Tracker .*
;;;;
. V
Ck_front: ; touch front (tummy)
;go ck for sensor trigger
;go fini normal spch/motor table
Get_front
Normal_front
Idle
JSR
BCS
JMP ;no request
Get_front: ;this is the subroutine entry point.
;get I/O
#Touch_fxmt ;ck if Firby's chest is rubbed
;jump if lo
LDA Port_C
AND
Do_tch__ft
Stat_2
#Not_tch_ft
Stat_2
BEQ
;Get syslem
;clear previously inverted flag
;update
LDA
AND
STA
Touch
^end:
CLC ;clear indicates no sensor request
RTS ;
Do_tch_ft:
Stat_2
#Tchft_dn
Touch_end
;get system
;ck if prev done
;jump if was
LDA
AND
BNE
A-74
----------------------- Page 76-----------------------

LDA Stat_2
#Tchft_dn
Stat 2
;get system
;flag set ,only execute once
;update system
ORA
STA
;game mode status
;flag sensor is active
;update
;set indicates sensor is triggered
LDA Stat__4
#Do_tummy
Stat_4
ORA
STA
SEC
RTS
Normal_front: ;enter here to complete sensor speech/motor
;
Life
More_front
Idle
;go tweek health/hungry counters
;if clear then do sensor else bail
;done
JSR
BCS
JMP
More_front:
;
;get random/sequential split
;save for random routine
#Front_split
IN_DAT
LDA
STA
;get how many sequential selections
;get sequential split
;go decide random/sequential
#Seq_front
#Ran__front
Ran_seq
LDX
LDA
JSR
LDX Sensor_timer ;get current for training subroutine
BCS Front_rod .•F-andom mode when carry set
Sensor_timer ;ck if timed out since last action
Front_reset ;yep
LDA
BEQ
Tchfmt_count
BIT_CT
;save current
;temp store
LDA
STA
;if not then next table entry
;get
INC Tchfmt_count
LDA Tchfmt_count
CLC
SBC #Seq_front-1
BCC Front_set ;jurop if <
LDA iSeq_front-l
STA Tchfmt_count
JMP Front_set ;do it
Front_reset:
LDA «00
STA BIT_CT
STA Tchfrnt__count
;ck if > assignment
;dont inc off end
;reset to 1st entry of sequential
;temp store
;
Front_set:
LDA
STA
;get timer reset value
;reset it
;get current pointer to tables
#Global_tiroe
Sensor_timer
LDA BIT_CT
Front_rnd:
STA IN_DAT ;save decision
A-75
----------------------- Page 77-----------------------

LDA •Front_ID ;which ram location for learned word count
(offset)
JSR Start__learn ;go record training info
LDA IN_DAT ;get back word to speak
Decid_age
TEMPO
Tfmt_Sl,X
Macro_Lo
JSR ;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
LDX
LDA
STA
INX
Tfrnt__Sl,X
Macro__Hi
Start_macro ;go set group/table pointer for motor St spch
;get hi byte
;save hi byte of Macro table entry
LDA
STA
JMP
;
Ck_feed: ; food sensor
;
JSR Get_feed
Normal_feed ;go fini normal spch/motor table
;go ck for sensor trigger
BCS
JMP Idle ;no request
Get_feed: ;this is the subroutine entry point.
; Each trigger increments the health status at a greater rate
; Special enable routine to share port pin D1 with invert switch.
; Feed switch is pulled hi by the DAC1 (aud-a) output only after
/ we test the invert line. If invert is not hi, then turn on
; DAC1 and ck feed line on same port D1.
LDA Port_D
*Ball_invert
St__feed
* ;get I/O
;ck if we are inverted
;jump if not inverted (lo=not inverted)
/ indicates no request
;if inverted then bypass
AND
BEQ
CLC
RTS
St_£eed:
/ turn DAC2 on to enable feed switch
;out
IFFh
DAC2
LDA
STA
LDA Port_D
•Ball_invert
Start_feed
/ get I/O
AND /ck if feed switch closed
BNE / jump if hi
LDA •00
DAC2
Stat_3
•Not_feed
Stat
—3
/ clear feed sw enable
/Get system
/clear previously inverted flag
/update
STA
LDA
AND
STA
Feed_out:
CLC /clear indicates no request
RTS /go test next
Start__feed:
LDA «00
A-76
----------------------- Page 78-----------------------

STA DAC2 ;clear feed sw enabJe
LDA Stat_3
#Feed_dn
Feed_out
Stat__3
#Feed_dn
Stat_3
;get system
;ck if prev done
;jump if was
;get system
;flag set ,only execute once
;update system
AND
BNE
LDA
ORA
STA
Stat_4
#Do_feed
Stat 4
LDA ;game mode status
;flag sensor is active
;update
;set when sensor is triggered
ORA
STA
SEC
RTS ;
Normal feed: ;enter here to complete speech/motor
; health table calls here and decision for which speech pattern
LDA UFood ;each feeding increments hunger counter
CLC
ADC Hungry.counter ;feed him!
Feeding_dn ;jump if no roll over
#FEh
BCC
LDA ;max count
Feeding_dn:
STA Hungry.counter ;update
JSR Life ;go finish sick/hungry speech
*Feed_split ;get random/sequential split
IN_DAT
LDA
STA ;save for random routine
;get how many sequential selections
;get random assignment
;go decide random/sequential
#Seq_feed
#Ran_feed
Ran_seq
LDX
LDA
JSR
LDX Sensor_timer ;get current for training subroutine
BCS Feedrand ;Random mode when carry set
Sensor_timer
Feed_reset
LDA ;ck if timed out since last action
BEQ ;yep
Feed_count
BIT_CT
LDA ;save current
STA ;terop store
;if not then next table entry
;get
Feed_count
Feed_count
INC
LDA
CLC
;ck if > assignment
;jumj. if <
;don' inc off end
#Seq_feed-1
Feed_sut
#Seq_feed-1
Feed_count
Feed_set
SBC
BCC
LDA
STA
JMP
Feed_reset:
;do it
A-77
----------------------- Page 79-----------------------

;reset to 1st entry of sequential
;temp store
LDA #00
STA BIT CT
ST/v Feed__count ;
Feed._ set:
#Global__time
Sensor_timer
BIT_CT
;get timer reset value
;reset it
;get current pointer to tables
LDA
STA
LDA
Feedrand:
;sa.d decision
;which ram location for learned word count
STA IN_DAT
LDA #Feed_ID
(offset)
Start_leara ;go record training info
;get back word to speak
JSR
LDA IN__DAT
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
Dr»cid_age
"EMPO
I eed__Sl,X
Macro_Lo
JSR
LDX
LDA
STA
INX ;
;get hi byte
;save hi byte of Macro table entry
Feed_Sl ,X
Macrc_Hi
Start_roacro ;go set group/table pointer for motor & spch
LDA
STA
JMP
Ck
.light; ;Bright light sensor
;now handled as a subroutine
;jump if new level > reff
;nothing to do
Get_light
Ck_li*jht2
Idle
JSR
BCC
JMP
Ck_light2:
JMP Normalflight ;jump if new level > reff
Include Light5.asm ;asm file
Normal_light:
; below routines are jumped to by light exec if > reff
JSR Life
BCS More_light
JMP Idle
;go tweek health/hungry counters
;if clear then do sensor else bail
;done
More_light:
;
;get random/sequential split
;save for random routine
LDA #Light_split
STA IN_DAT
A-78
----------------------- Page 80-----------------------

#Seq_light ;get how many sequential selections
LDA #Ran_light
JSR Ran_seq
LDX
;get sensor split table
;go decide random/sequential
LDX Sensor_timer ;get cuvrent for training subroutine
BCS Lghtrand ;Random mode when carry set
LDA Sensor_timer
BEQ Lght_reset ;yep
;ck if timed out since last action
LDA Lght_count
STA BIT_CT
;save current
;temp store
INC Lght_count ;if not then next table entry
LDA Lght_count ;get
CLC
SBC #S©q_light-l
BCC Lght_set ;jump ii <
LDA #Seq_liyht-1
STA Lght_count
JMP Lght
Lght_reset: —set ;do it
;ck if > assignment
;dont inc off end
;reset to 1st entry of sequential
;save temp store
LDA #00
STA BIT_CT
STA Lght_count
Lght_set:
#Global__time
Sensor__timer
BIT_CT
;get timer reset value
;reset it
;get current pointer to tables
LDA
STA
LDA
Lghtrand:
;save seq/rand pointer
;system
;ck bit for light/dark table
;jump if clear
TEMP4
Stat_3
#Lght_stat
Do_dark
STA
LDA
AND
BEQ
LDA TEMP4 ;get pointer
;save decision
;which ram location for learned word count
IN_DAT
#Light_ID
STA
LDA
(offset)
Start__learn ;go record training info
;get back word to speak
JSR
LDA IN
.
DAT
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
Decid_age
TEMPO
Light_Sl,X
Macro_Lo
JSR
LDX
LDA
STA
INX
Light__Sl,X
Macro_Hi
Start__jnacro ;go set group/table pointer for motor & spch
;get hi byte
;save hi byte of Macro table entry
LDA
STA
JMP
Do_dark:
LDA TEMP4 ;get pointer
STA IN_DAT ;save decision
Ar79
----------------------- Page 81-----------------------

LDA •Dark ..ID /which ram location for learned word count
(offset)
Start_learn ;go record training info
/ get back word to speak
JSR
LDA IN_DAT
Decid__age
TEMPO
Dark_Sl,X
Macro_Lo
JSR /do age calculation for table entry
/age offset
/ get lo byte
/ save lo byte of Macro table entry
LDX
LDA
STA
INX ;
Dark_Sl,X
Macro_Hi
Start_macro /go set group/table pointer for motor & spch
/get hi byte
/save hi byte of Macro table entry
LDA
STA
JMP
Ck_sound: / Audio sensor
/ now handled as a subroutine
/jump if new level > reff
.nothing to do
Get
..sound
Ck_sound2
Idle
JSR
BCS
JMP
Ck_sound2:
JMP Normal__sound / jump if new level > reff
Get
.
sound: / alt entry for diagnostics
/ The microphone interface generates a square wave of 2k to 100k.
/ We can loop on the sense line and count time for the
/ hi period to determine if sound has changed and compare it to previous
/ samples.
/ disable interrupts
/ clear
/ clear buffer
/ load loop timer
SEI
LDX #00
STX TEMPI
#FFh
TEMP2
LDX
STX
Ck__snd2:
DEC TEMP2
Ck_snd4
Port_D
#Mic_in
Ck_snd2
#FFh
TEMP2
;
/ jump if timed out
/ get I/O
/ck sound elk is hi
/ wait for it to go hi
/ load loop timer
BEQ
LDA
AND
BEQ
LDX
STX
Ck_snd3:
/ccint during lo elk
/jump if rolled over
/ get I/O
/ck if still hi
'
/ loop till lo
TEMPI 5
Snd_ove
Port__D
#Mic_in
Ck_snd3
(15*166ns=2.49uS)
Ck_snd4
INC
BEQ 3
LDA 2
AND 2
BNE 3
JMP zdone
Snd_over:
A-80
----------------------- Page 82-----------------------

we should never get here so bail back to idle and this will
also prevent system lockup when no elk
;;
#250
TEMPI
LDA ;never allow roll over
STA
Ck_snd4:
;re-enable interrupt
;wait fu* motor R/C to start working again
;get count
;clear
;is diff > 5
CLI
Kick_IRQ
TEMPI
JSR
LDA
CLC
#05
No_snd
SBC
BCC ;bail out if not
LDA Stat_3
#Sound_stat ;ck for prev done
;wait till quiet
;system
AND
BNE No_snd2
Stat_3
#Sound_stat ;
Stat__3
LDA ;system
ORA
STA ;set prev dn
LDA Stat_4
#Po__snd
Stat 4
ORA. ;set indicating change > reff level
STA
SEC ;carry se indicates no change
RTS
lo_snd:
Stat_3
#Nt_snd_stat
Stat 3
LDA ;get system
;clear prev dn
/update
AND *.
STA
No_snd2:
/ carry clear indicates no sound
z done
CLC
RTS
Normal_sound:
; below routines are jumped to if sound pulse detected
;
/go tweek health/hungry counters
/if clear then do sensor else bail
/done
JSR Life
BCS More_sound
JMP Idle
More_sound:
;
/get random/sequential split
/save for random itine
#Scund_split
INJDAT
LDA
STA
#Seq_sound / get how many sequential selections
/number of random selections
/go decide random/sequential
LDX
#Ran_scund
Ran_seq
LDA
JSR
A-81
----------------------- Page 83-----------------------

LDX Sensor_timer ;get current for training subroutine
BCS Sndrand ;Random mode when carry set
Sensor_timer
Snd_reset ;yep
LDA ;ck if timed out since last action
BEQ
Sound_count ;save current
;temp store
LDA
STA BIT_CT
SoundL.count ;if not then next table entry
Sound_count / get
INC
LDA
CLC
#Seq_sound-l
Snd__set
»Seq_sound-1
Sound__count ;
Snd_set
SBC ;ck if > max assignment
;jump if <
;dont inc off end
BCC
LDA
STA
JMP
Snd_reset:
;dc it
LDA »00 ;reset to 1st entry of sequential
STA BIT_CT ;tessp store
STA Sound_count ;
Snd_set:
»Global_time
Sensor_timer
BIT_CT
LDA ;get timer reset value
;reset it
;get current pointer to tables
STA
LDA
Sndrand:
STA IN_DAT
#Sound_ID
/ save decision
LDA / which ram location for learned word count
(offset)
Start_learn
IN__DAT
/ go record training info
;get back word to speak
JSR
LDA
Decid_age
TEMPO
Sound_Sl,X
Macro Lo
/ do age calculation for table entry
/age offset
/get lo byte
/ save lo byte of Macro table entry
JSR
LDX
LDA
STA
INX
Sound_Sl,X
Macro__Hi
Start_macro
/ get hi byte
/save hi byte of Macro table entry
/go set group/table pointer for motor & spch
LDA
STA
JMP
itili
;*Misc Subroutines
stiiitmitittitiiittilltiliiilititttiitiiiitlitttiitiiiitiitiiiiittiiti
am
; SENSOR TRAINING
; Training for each sensor is 3et up here and the decision if the
A-82
----------------------- Page 84-----------------------

learned
; word should be played or not.
; Terap_ID hold the ram offset for the last sensor of the learned word.
; Temp_ID2 hold the ram offset for the current sensor of the learned
word.
; IN_DAT holds the current word the sensor chose, and will be loaded
with
; the learned word instead if the sensor count > the random number that
was
; just sampled, ie., force learned word to play.
; **••
; If the sensor timer is at 0 when entering here, then the LEARN_TEMP
; ram location is cleared, else the current learned word is loaded. If
; the learned word is 0 then all entries are cleared.
; When entering, check sensor timer and bail if 0. THen test if this is
; the back switch and if so then move the current sensor to previous
sensor
; ram and increment the counter.
; If this is not the back switch, then get previous sensor ram counter
and
; decrement it. THen move all current sensor information to previous and
; return to caller.
; Because of training difficulties, we now need two back touches to
; increment training counters. If only one occurs then the normal
decrement
; happens. This double back touch helps to prevent accidentally training
; with a new macro by hitting the back sw when it is not the macro you
; have been working with.
5 art_leam:
STA
LDA
;sensor ram location of counter (current sensor)
;get current sensor ID
jEF* this is the back switch (special)
;jumpif not
;ck if sensor timer timed out
;jump if is back switch and not timed out
Temp_ID2
Temp_ID2
CMP •EEh
BNE Not_BCK
CPX •00
BNE Learn_update
Not_BCK:
;get previous sensor ram offset
;ck if last was back sw
Not_leamed ;jump if no sensor prev
Temp_ID
•EEh
LDA
CMP
BEQ
;get previous sensor ram offset
;get lean.. >d word counter from ram
Temp_ID
Tilt_learned,X
Leam
^temp ;compare with last word
;bail out if different
Tilt_lm_cnt,X ;prev sensor counter 4-offset to current
LDX
LDA
CMP
BNE Do_lm2
LDA
sensor
CLC
•Leam_chg ;dec learned word counter since not back sw
Tilt_lrn_cnt,X
Do
.lrn2
Do__lm2
SBC
;update
;jump if > •Leara_chg
;jump if not negative (rolled over'
STA
BCS
BPL
LDA •00
STA Ti1t_lm_.cnt,X ;set to zero, no roll over
A-83
----------------------- Page 85-----------------------

Do_lm2:
;get sensor learn ram offset
;get a number
LDX Temp_ID
JSR Random
CLC
Tilt_lro_cnt,X
•FFh
Do_lm2a
LDA ;get count
;check for max
;bypass randcm
CMP
BEQ
CLC
;random minus learned word counter
Not_leamed ;if less than random then bail out
SBC Seed_l
BCC
DoJm2a:
Tilt_leamed,X
•OFh
Ti1t
.leamed,X
1N_DAT
;get learned word counter from ram
;make sure never off end of table
;also in ram
;force learned word for sensor
LDA
AND
STA
STA
Not_learned:
;get curent sensor word
;SAVE FOR NEXT PASS
;get current sensor
;save in previous sensor ram
LDA IN_DAT
Learn_temp
Temp_ID2
Temp_ID
STA
LDA
t* STA
Stat_0
•EFh
Stat_0
LDA ;system
;"Train_Bk_jprev" clear 2nd time thru flag
;update
AND
STA
RTS ;done-ola
Leam__update:
LDA
CMP
;sensor ram location for last trigger
;EL= this is the back switch (special)
;bail out if last trigger was also back sw
;onl/ happens on power up
Temp__ID
•EEh
Not_leamed
•FFh
Not
.
leamed ;false call
BEQ
CMP
BEQ
.Stat_0
•Train_Bk_prev
Lm_updl
Stat__0
•Train_Bk_prev
Stat 0
LDA ;system
;is this the 1st or 2nd time thru
;jump if 2nd back sw hit
;system
;this is 1st time
;update
;my job is done here !
AND
BNE
LDA
ORA
STA
RTS
Lm__updl:
Stat_0
•EFh
Stat_0
LDA ;system
;"Train_JBk_prev" clear 2nd time thru flag
;update
AND
STA
;sensor ram location for last trigger
;get learned word from ram
;ck for training of same word
;jump if is
;get new word trainer wants to use
;update new word
;reset to 0 for new word to train
LDX Temj-_ID
Tilt_learned,X
Leam_temp
Lm__upd2
Learn_temp
Tilt_learned,X
LDA
CMP
BEQ
LDA
STA
LDA •00
Tilt_lrodent,X
Not_learned ;done for now
STA ;
JMP
Lrn_upd2:
CLC
LDA Tilt_lrn_cnt,X ;get learned word counter from ram
A-84
----------------------- Page 86-----------------------

; on 1st cycle of new learn, we set counter 1/2 way (chicken)
BNE Lm_upd2a
LDA »80h
;jump if not 0
;1/2 way point
Tilt_lm__cnt,X ;update sensor counter
Clear
.
!earn ;go finish
STA
JMP
Lra_upd2a:
; end 1st cycle preload
ADC iLeam_chg ;add increment value
BCS Learn
^overflw ;jump if rolled over
STA Tilt_lm_cnt,X ;update sensor counter
JMP Clear_leam ;go finish
Learn
^overflw:
LDA iFFh
STA Tilt__lm_.cnt,X
Clear_leam:
JMP Do_lm2
;set to max
;save it
;done
; ;;
When IRQ gets turned off, and then restarted, we wait two complete
; cycle to insure the motor R/C pulses are back in sync.
Kick_IRQ:
Stat__3
*Nt_IRQdn
Stat_3
LDA ;get system
;clear IRQ occured status
;update system
;loop counter
AND
STA
LDX »03
Kick2:
Stat_3
tIRQ__dn
Kick2
Stat_3
•Nt_IRQdn
Stat_3
LDA ;system
;ck if IRQ occured
;wait till IRQ happens
;get system
;clear IRQ occured status
;update system
AND
BEQ
LDA
AND
STA
;-1
;loop til done
;is done
DEX
BNE Kick2
RTS
;; ?
EEPROM READ/WRITE
; Read & write subroutines
;
Do_£E_write:
; EEPROM WRITE
ASS
----------------------- Page 87-----------------------

; Enter with ’TEMPO ’ holding adrs of 0-63. Areg holds lo byte and
; Xreg holds hi byte. If carry is clear then it was succesfull, if
; carry is set the write failed.
; MODIFIED eeproxn , load lo byte in tempi and hi byte in temp2
; and call EEWRIT2.
LDA #00 use DAC output to put TI in reset
STA DAC1
SEI turn IRQ off
;EEPROM adrs to write data to
;save adrs
;number of ram adrs to transfer (x/2)
LDA iOO
STA Sgroup
LDA #13
STA Which_delay ;save
LDA #00
STA Which_jaotor ;save
;Xreg offset
; Need one read cycle before a write to wake up EEPROM
Which_rootor ;eeprom address to read from
;get data (wakes up eeprom)
LDX
JSR EEREAD
Write_loop:
LDA Sgroup ;get next EEPROM adrs
TEMPO /buffer
Which
.
motor /ram source
Age,X
TEMPI
Which_motor /
STA
LDX
;lo byte (data byte #1)
;save data bytes
LDA
STA
INC
INX
LDA Age,X
TEMP2
EEWRIT2
EEfail
;hi byte (data byte #2)
;send em
/jump if bad
STA
JSR
BCS
/0-63 EEPROM adrs next
/0-63 EEPROM adrs next (eeprom writes 2
INC Sgroup
INC Sgroup
bytes)
Which_motor / next adrs
Which__delay / how many to send
Write_loop jsend some more
INC
DEC
BNE
RTS 7done
; READ EEPROM HERE AND SETUP RAM
S_EEPROM_READ:
/ Xreg is the adrs 0-63, system returns lo byte in Areg & hi byte in
Xreg.
on call: X = EEPROM data address (0-63)
on return: ACC = EEPROM data (low byte) (also in TEMPO)
X * EEPROM data (high byte) (also in TEMPI)
A-&6
----------------------- Page 88-----------------------

LDA #00 ;use DAC output to put TI in reset
STA DAC1
SET ;turn IRQ off
«00 ;eeprom address to read from
;get data (one read to init system)
LDX
JSR EEREAD
«00 ;EEPROM adrs to read
;save adrs
;number of ram adrs to transfer (x/2)
LDA
STA Sgroup
LDA «13
Which
.delay ;save
«00
Which
.motor ;save
STA
LDA ;Xreg offset to write ram data
STA
Read
,loop:
;EEPROM adrs
;get data
LDX Sgroup
JSR EEREAD
Which
.
motor ;ram destination
;get data
;lo byte (data byte #1)
LDX
LDA TEMPO
STA Age,X
INC Which_juotor ;
INX
INC Sgroup ;0-63 EEPROM adrs next
TEMPI ;g«t data
;lo byte (data byte #2)
LDA
STA Age,X
INC Which_motor ;next adrs
INC Sgroup ;0-63 EEPROM adrs next
Which
.delay ;how many to get
Read
.loop ;send some more
DEC
BNE
LDA «00 ;clear rams used
Sgroup
Which
.
motor ;
Which
.delay ;
STA
STA
STA
;Enable IRQ
;wait for interrupt to restart
;go init TI (uses ’Cycle .timer')
CLI
JSR Kick
.IRQ
JSR TI
.
reset
; ;$ ;
Begin Koball's code
; ;
Enable or Disable EEPROM by setting/clearing CS
(CS « B.0)
* ?
on on cal return 1: :—
stack usage:—0
RAM usage:.B IMG
; ;;
A~87
----------------------- Page 89-----------------------

EEENA:
;get prev state of port B,
turn on B.O
LDA Port_JB_Image
#001H
EEE02
ORA
JMP
;
EEDIS:
;get prev Ftate of port 3,
turn off B.O
LDA Port_B_Image
AND #0FEH
;
EEE02:
Port_B
Port_B_Image
STA ;output to port
STA ; and save port image
RTS
;; ?
Output data bit to EEPROM by placing data bit on
EEPROM DI line and toggling EEPROM CLK line.
EEPROM DI = A.l
EEPROM CLK » A.O
on call: C = data bit to be output
on stack return usage : :—0
RAM usage: Port_A__image
•.
OUTBIT:
BCS OUTB02 ;branch if output bit = 1
;
;get prev state of port A.
; turn off A.l,
Port_A__image
#0FDH
OUTB04
LDA
AND
JMP
OUTB02:
;get prev state of port A.
? turn on A.l,
Port_A_image
•002H
LDA
ORA
;
OUTB04:
; output bit to port
; and save image
STA Port_A
STA Port_A__image
toggle EEPROM clock
TOOCLK:
;get prev state of A
;turn on A.O,
;output to port
Port_A_image
#001H
Port
A^
LDA
ORA
STA
NOP delay
NOP
NOP
;turn off A.O
;output to port
#QFEH
Port_A
AND
STA
A-88
----------------------- Page 90-----------------------

STA Port_A_image ;save image
RTS
;; ?;
Read data 16
-bit data word from EEPROM at specified address
on call: X = EEPROM data address (0-63)
on return: ACC * EEPROM data (low byte)
; X = EEPROM data (high byte)
stack usage: 2
RAM usage: TEMPO
;;*
EEREAD:
;store data addr
;turn on CS
TEMPO
EEENA
STX
JSR
;
SEC ;send start bit
JSR OUTBIT
;
SEC ;send READ opcode (10)
JSR OUTBIT
CLC
JSR OUTBIT
;
init addr bit count
align MS addr bit in bit 7
LDX ftb
TEMPO
TEMPO
ROL
ROL
;
EERD02:
;shift address bit into carry
;send it to EEPROM
;bump bit counter
; and repeat until done
TEMPO
OUTBIT
ROL
JSR
DEX
BNE EERD02
LDX #16 ;init data bit count
LDA «0
TEMPO init data bit accumulators
TEMPI
STA
STA
;
EERD04:
;toggle clock for next bit
;test data bit (B.5) from EEPROM
TOOCLK
#020H
PortJB
EERD08
JSR
LDA
BIT
BNE ;
;
CLC ;EEPROM data bit = 0
JMP EERD10
EERD08:
SEC ;EEPROM data bit ® 1
;
EERD10:
;rotate data bit into 16-bit
; acc'imulator
;buxnp bit counter
TEMPO
TEMPI
ROL
ROL
DEX
A-89
----------------------- Page 91-----------------------

BNE EERDG4 ; and repeat until done
;
JSR EEDIS
TEMPO
TEMPI
turn off CS and return
ret w/data byte in ACC
and X regs
LDA
LDX
RTS
Issue ERASE/WRITE ENABLE or DISABLE instruction to EEPROM
(instruction = 1001100000)
on call:
on return: --
stack usage: 2
RAM usage: TEMP3
FEWEN:
LDA H0FFH
EEWE02
;set up enable inct
JMP
EEWDS:
LDA #000H ;set up disable inst
;
EEWE02:
;save instruction
;turn on CS
TEMP3
EEENA
STA
JSR
;
SEC ;send start bit
JSR OUTBIT ;
;
CLC ;send ENA/DIS opcode (00)
JSR OUTBIT ;
CLC
JSR OUTBIT
;
LDX #6 ;init instr bit count
EEWE04:
shift instruction bit into carry
;send it to EEPROM
bump bit counter
; and repeat until done
TEMP3
OUTBIT
ROL
JSR
DEX
BNE EEWE04
RTS
Write data byte to EEPROM at specified address
on call: TEMPO = EEPROM data address (0-63)
ACC = data to be written (low byte)
X = data to be written (high byte)
on return: C = 0 on successful write cycle
C = 1 on write cycle time out
stack usage: 4
A-90
----------------------- Page 92-----------------------

RAM usage: TEMPO , TEMPI. TEMP2
EEWRIT:
STA TEMPI
TEMP2
;save data bytes
STX ;
EEWRIT2:
;send write enable inst to EEPROM
;set * low
; then high again
JSR EEWEN
EEDIS
EEENA
JSR
JSR
SEC ;send start bit
JSR OUTBIT ;
CLC ;send WRITE opcode (01)
JSR OUTBIT ;
SEC ;
JSR OUTBIT
;
init addr bit count
align MS addr bit in bit 7
LDX «6
ROL TEMPO
ROL TEMPO
EEWR02:
;shift address bit into carry
;send it to EEPROM
;burop bit counter
; and repeat until done
ROL TEMPO
JSR OUTBIT
DEX
BNE EE7R02
?
LDX #16 ;init data bit count
;
EEWR06:
TEMPI ;shift data bit into carry
TEMP2
OUTBIT
ROL
ROL
;send it to EEPROM
;bumn bit counter
; and repeat until done
JSR
DEX
BNE EEWR06
«
;cycle CS low
; then high again
EEDIS
EEENA
JSR
JSR
;
;init write cycle
; time out counter
LDA •0
STA TEMPO
STA TEMPI ;
;
EEWR08:
;test READY/BUSY bit (B.5)
from EEPROM
;wait for write cycle to finish
•020H
Port_B
EEWR10
LDA
BIT
BNE
;
TEMPO ;write cycle time out counter
EEWR08
TEMPI
EEWR08
DEC
BNE *
DEC ;
BNE ;
;
/ time out, disable EEPROM and
; set carry to signal error
JSR EEWR10
SEC
Ml
----------------------- Page 93-----------------------

RTS ;
;
EEWR10:
JSR EEWDS
JSR EEDIS
;send write disable inst to EEPROM
;set CS low
CLC ;clear carry to signal successful write
RTS ;
;; ; ;
Subroutine creates sensor table entry for the selected age.
; One table for each age.
; Enter with Acc holding the 1-16 table selection.
; Exit with Acc & TeropO holding the offset 0-FF of the 1-4 age entry.
; Special condition where we have only two tables instead of 4
; (where each table is called based on age), if the *half_age" bit is
; set then ages 1 & 2 call table 1 and ages 3 & 4 call table ?.
Decid_age:
STA TEMPO ;save O-Of selection
Stat_l
•Hal £__age
Decid_.normal
Stat_l
•Nt_half_age
Stat_l
LDA ;system
;test if this is a special 2 table select
•.
jump if not
AND
BEQ
LDA
;clear req
•.
update system
AND
STA
LDA Age ;
AND «03h ;get rid of bit 7 (9th counter bit )
CLC
•.
actual age is 0-3. test if <2
•.
choose age 1 ( actually 0 here)
•.
choose age 2 ( actually 1 here)
SBC •01
BCC Dec_agel
JMP Spcl_age2
Decid
^normal:
;;; mod TestR3a.... 25% of time chore agel to add more furbish after
;;; he is age 4.
JSR Random ;get a number
CLC
•Random^age ;below this level selects age 1
Nospcl_age ;jurop if >
;set age 1
SBC
BCS
LDA «00
JMP Dosage ;go do it
;;; end mod
Nospcl_age:
LDA Age
AND i03h
CMP «03
BNE Dec_agej
LDA #96
JMP Do_age
;get current
;get rid of bit 7 (9th counter bit )
;is it age 4
;jump if not
;point to 4th field
•.
finish load from table
A-92
----------------------- Page 94-----------------------

Dec_age3:
CMP #02 ;is it age 3
.- jump if not
.- point to 3rd field
.- finish load from table
BNE Dec_age2
LDA #64
JMP Do_age
Dec__age2:
CMP #01 .- is it age 2
BNE Dec__agel .- jump if not
Spcl_age2:
#32 .•point to 2nd field
;finish load from table
LDA
JMP Do_age
Dec_agel: ;age 1
LDA #00 .- point to 1st field
Do_age:
STA TEMP2 ;save age offset for speech
CLC
;16 bit offset for speech
.- which table entry
;create speech field ofsett pointer
;save
ROL TEMPO
TEMP2
TEMPO
TEMPO
LDA
ADC
STA
RTS
Random/sequential decision control for all sensors.
; Enter with Acc holding the number of random selections for sensor.
; Enter with Xreg holding number of sequential selections
; It.returns with Acc holding the random selection and the carry will
/ be cleared for a sequential mode and set for a random mode*
; NOTE: if the caller has no random selections then carry will be •
cleared.
v
Ran_seq:
;save random max
;save number of sequentials
.- force cpu status rk
.- jump if no randoms
.-make offset from 0
STA TEMPI
TEMP5
TEMPI
Seq_decisn
TEMPI
STX
LdA
BEQ
DEC
Ran_]oop:
JSR Random .-get n
ROK A .- move hi nible to lo
ROR A
ROR A
ROR A
.- get lo nible
;save
AND #0Fh
STA TEMP2
CLC
.- get max random number from sensor
;loop until »< max value
.- get new number
;ck if duplicate from last attempt
.- loop if is
SBC TEMPI
Ran_loop
TEMP2
BCS
LDA
Prev_random
Ran_loop
Prev_random ;update for next pass
TEMPI
CMP
BEQ
STA
STA .-new
LDA TEMP5 ;ck if no sequentials
A-93
----------------------- Page 95-----------------------

BEQ Ran_decisn ;force random if none
JSR Random ;get random/sequential decision
;random/seqential split
;>80=random else sequential
CMP IN__DAT
CMP «80h
* /• / •
BCC Seq_decisn ;jump if less
Ran
^decisn:
LDA
CLC
TEMP5 / get number of sequential for this pass
TEMPI
TEMPI
;add to random for correct table start point
;update
;set carry to indicate random
;done (Acc holds answer)
ADC
STA
SEC
RTS
Seq_decian:
/clear carry to indicate sequential
/done (Acc holds answer)
CLC
RTS
; ;
Random number generator,
; SEED_1 & SEED_2 are always saved through power down
; TEMP3 & TEMP4 are random temporary files.
; Acc returns with random number, Seed_l also holds random number.
Random:
Seed_l
TEMP3
Seed_2
TEMP4
LDA ;
STA
LDA
STA
CLC
ROL A
ROL Seed 1
CLC
ROn
ROL
A
Seea_l
CLC
TEMP4
Seed 2
ADC
STA
LDA »00
ADC Seed_l
CLC
TEMP3
Seed 1
ADC
STA
LDA »00
Seed__2
Seed__l
Seed_l
INC
ADC
STA
RTS / return with random number in Acc U seed__l
;
A-94
----------------------- Page 96-----------------------

Life:
; Each FEET trigger increments the HUNGRY counter by (EQU = FOOD).
;Hungry >80 (Need_food) sick >C0 (Really_sick) = normal sensor
;Hungry >80 (Need_food) Sick <C0 (Really_sick) = random SICK/SENSOR
;Hungry <80 (Need^food) Sick >C0 (Really_sick) = random HUNGRY/SENSOR
;Hungry <80 (Need_food) Sick <C0 (Really_sick) = random
HUNGRY/SICK/SENSOR
;Hungry <60 (Sick__reff) Sick <C0 (Really_sick) « random HUNGRY/SICK
;Hungry >60 then each sensor motion increments Sick
;Hungry <60 then each sensor motion decrements Sick
; When the system does a cold boot, we set HUNGRY & SICK to FFh
; When returning from here, carry is set if sensor should execute
; normal routine, and cleared if sensor should do nothing.
;REFF only
;H,.*ngry_count«r
;Sick_counter
;Food
;Need_food EQU
;Sick_reff EQU
;Really_sick
20h ;amount to ii Tease ’Hungry' for each feeding
;below this s arts complaining about hunger
;below this starts complaining about sickness
COh
EQU
80h
60h
EQU ;below this only complains about sickness
Hungry_dec EQU
Sick_dec EQU
Max_sick EQU
;subtract X amount for each sensor trigger
;subtract X amount for each sensor trigger
01
01
see EQU
LDA Hungry__counter ;current
;mod F-rels2 ;
CLC
SEC
;end mod
;
#Hungry_dec ;-X for each trigger
frst_life
SBC
BCS ;jump if not neg
LDA #00 ;reset
frst_life:
STA Hungry_counter ;get count
CLC
•Sick_reff
Sick_inc
Sick_counter
;ck if g tting sick
;jump if not sick
;current
SBC
BCS
LDA
;mod F-rels2 ;
CLC
SEC
;end mod
; ;
mod testr3a
;-X for each trigger
;jump if not neg
SBC #Sick_dec
BCS fr*t_sick
?;
A-95
----------------------- Page 97-----------------------

; LDA «00 ;reset
•Sick .dec
Sick
.counter
Max
.Sref
SBC ;-X for each trigger
STA
BCC ;jump if neg
CLC
Sick
.counter
•Max .sick
frst
.sick
LDA ;get again
;ck if at minimum allowed count
;jump if not at min
SBC
BCS
Max
.Sref:
LDA «Max_sick ;*rt to min
frrt
.sick:
STA
JMP
;end mod testr3a
Sick
.counter
Hungerl
;
Sick
.inc:
INC Sick_counter
No
.
sick
.inc ;juxnp if did—t roll t to over max
; 1 if is
BNE
LDA «FFh
STA Sick
.counter
No
.sick.inc:
;if did the
Hungerl:
Sick
.
LDA counter ;ck how sick
CLC
«Really .sick
Hunger2
;decide if too sick to play
;jump if <
SBC
BCC
LDA Hungry .counter ;check how hungry he is
CLC
«Need_food ;ck if getting hungry
Decd_Hung_norm ;jump if is
SBC
BCC
Life
.
normal:
;tell sensor to do normal routine
;done
SEC
RTS
Hunger2:
LDA Hungry .counter ;check how hungry he is
CLC
#Sick_r«f£ ;ck if very hungry and i sick
Decd
._Hung_sick ;only speak hungry / sick
SBC
BCC
LDA Hungry .counter ;check how hungry he is
CLC
SBC «Need
.food ;ck if getting hungry
Decd
.Sick.norm ;jump if is
Decd
.Hung.sck.norm ;do hungry k sick speech
BCS
JMP
Decd
.Hung__sck.norm:
JSR Random ;need 3-way decision
CLC
•AOh
Life
.normal
Seed
.l
Say .sick
Say .hunger
;hi split
;>A0 = normal senior
;get again
SBC
Lw
-S
LDA
;>80
; <30
BMI
JMP
Decd
.Hung.norm:
A
-9f
----------------------- Page 98-----------------------

JSR Random
BMI Lif©_normal
JMP Say_hunger
;go get random 50/50 decision
;;
Decd_Sick_norm:
JSR Random
BMI Li£e_normal
JMP Say_sick
;go get random 50/50 decision
;
;
Decd_Hung_sick:
JSR Random
BMI Say_hunger
JMP Say_sick
;go get random 50/50 decision
; i
Say_hunger:
#Hunger_split
IN_DAT
LDA ;get random/sequential split
STA ;save for random routine
##Seq Ran__hunger hunger ;;get get number how man^oisequential random sletselections
-ions
;go decide random/sequential
;Random mode when carry SET
LDX
LDA
JSR Ran_seq
BCS Hunger_ran
LDA Sensor__timer
Hunger_reset
Hungr_count ;if not then next table entry
Hungr_count ;get
;ck if timed out since last action
BEQ ;yep
INC
LDA
CLC
#Seq_hunger-l
Hunger_side ;jump if <
*Seq_hunger-1
Hungrecount ;
Hunger_side ;do it
SBC ;ck if > assignment
BCC
LDA ;dont inc off end
STA
JMP
Hunger_reset:
LDA #00 ;reset to 1st entry of sequential
STA Hungrecount ;
Hunger_side:
LDA iGlobal_time
STA Sensor_timer
LDA Hungrecount
;get timer reset value
;reset it
;get current pointer to tables
Hunger_ran:
JSR Decid_age
TEMPO
Hunger_Sl ,X
Macro_Lo
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
LDX
LDA
STA
INX
;get hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get status for speech and motor
;tells sensor to do nothing
LDA Hunger_S1,X
Macro_Hi
Get_jmacro
Notrdy
STA
JSR
JSR
CLC
RTS
;
Say__sick:
;get random/sequential split
;save for random routine
HSick_split
IN_DAT
LDA
STA
;get how many sequential selections
;get number of random sleetions
#Seq_sick
?Ran sick
LDX
LDA
A-97
----------------------- Page 99-----------------------

o decide random/sequential
;Rar _ .node when carry SET
JSR Ran_seq
BCS Sick_ra:
Sensor_tiroer ;ck if timed out since last action
Sick_reset
Sickr_count ;if not then next table entry
Sickr_count ;get
LDA
BEQ ;yep
INC
LDA
CLC
•Seq_sick-1 ;ck if > assignment
Sick_side
•Seq_sick-1 ;dont inc off end
Sickr_count ;
Sick side
SBC
BCC ;junp if <
LDA
3TA
JMP ;do it
Sick_reset:
LDA
STA
Sick_aide:
LDA
•00 ;reset to 1st entry of sequential
Sickr_count ;
;get timer reset value
;reset it
;get current pointer to tables
•Global_time
Sensor_timer
Sickr__count
STA
LTA
Sick_ran:
JSR Decid_age
TD-T?0
Sick_Sl,X
Macro_Lo
;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry
LDX
LDA
STA
INX ;
;get hi byte
;F'V « hi byte of Macro table entry
;go 6tart motcr/speech
;Do / g*t status for speech and motor
;tells sensor to d nothing
Sick_Sl ,X
Macro_Hi
Get_macrc
Noray
LDA
STA
JSR
JSR
CLC
RTS
J•**
;
GoToSleep:
; ease light sensor fail or sleep command in Seed_2' into EEPROM
LDA Stat_0
AND •Dark_sleep_prev ;
BEQ Nodrk_prev ;jump if none
LDA «01
STA 3eed_2
JMP 0*2
;system
;set flag that it was done
;save in EEPROM
Nodrk_prev:
;set flag that it was clear
STA LDA Seed * < 0 _2 ;save in EEPROM
Gs2:
; EEPROM WRITE
A-98
----------------------- Page 100-----------------------

; Enter with 'TEMPO' holding adrs of 0-63. Areg holds lo byte and
; Xreg holds hi byte. If carry is clear then it was succesfull, if
; carry is set the write failed.
; MODIFIED eeprom , load lo byte in tempi and 4. byte in temp2
/ and call EEWRIT2.
LDA #00
STA DAC1
use DAC output to put TI in reset
SEI turn IRQ off
;EEPROM adrs to write data o
;save adrs
;number of ram adrs to transf «
LDA #00
STA Sgroup
LDA #13
STA Which._ delay ;save
LDA #00
STA Which_motor ;save
(x/2)
;Xreg offset
; Need one read cycle before a write to wake up EEPROM
Which_motor ;eeprom address to read from
;get data (wakes up eeprom)
LDX
JSR EEREAD
IWrite_loop:
LDA Sgroup ;get next EEPROM adrs
TEMPO ,* buffer
Which_motor ;ram source
Age,X
TEMPI
Which_ motor ;
STA
LDX
•,
lo byte (data byte #1)
;save data bytes
LDA
STA
INC
IN>: *.
LDA Age,X
TEMP2
EEWRIT2
EEfail
;;
hi byte (data byte #2)
;send e;u
;jump if bad
STA
JSR
; BCS
;0-63 EEPROM adrs next
;0-63 EEPROM adrs next (eeprom writes 2
INC Sgroup
INC Sgroup
bytes)
Which_motor ;next adrs
Which_delay ;how many to send
IWrite_loop ;send some more
INC
DEC
BNE
;
GoToSleep_2:
Include Sleep.asm ;
ifilllllllllillllllllllillllllliillllllilllllllliixllllllllllliilllllllll
11111
;‘Interrupt Sul routines
;feiiiiiimiiiiimiiiiiimiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiimiiimm
mu
A-99
----------------------- Page 101-----------------------

CAUTION ••***••****•
; Any ram location written outside ,of IRQ can only be read in the IRQ,
; likewise if written in the IRQ, then can only be read outside the IRQ.
; THIS WILL PREVENT DATA CORRRUPTION.
;
NMI:
RTI ;Not used
IRQ:
;push acc on stack
;pufih cpu status on stack
PHA
PHP
timer A « 166 uSEC
CkTimerA:
;get who did it
;test for timerA
;jump if is
LDA Interrupts
AND «20H
Do_ta
JMP Ck_timerB
BNE
Dc__ta:
; timer B * 700 uSEC
Ck_timerB:
LDA Interrupts
I10H
;get status again
;test for timer B
;jump if request true
;bypass all if not
AND
BNE Do_timeB
JMP Intt_false
also cha.ged TimerB relaod value from ulOh to 00 in BQU
Do_timeB:
; ;
RE-CALIBRATE SWITCH for motor position
This counter must meet a threshold to decide if the
; calpositicn f .^tch is really engaged.
;
;get I/O
;lo when limit hit
;no position switch found
;1nc each time found low
;jump it didnt roll over (stopper on sw tch)
;max count
LDA Port_C
•Motor_cal
No__cal__sw
Cal_switch_cnt
Cal__noroll
«31
Cal_switch_cnt
AND
BNE
INC
BNE
LDA
STA ;
Cal_noroll:
LDA Cal_switch_cnt ;
CLC
;ck if enough counts
No_linustp ;jump if not enough
#Cal__pos_£wd
Pot_timeL2 ;reset both
SBC «30
BCC
LDA ; force value
STA
A-100
----------------------- Page 102-----------------------

t
JMP No_linustp ;done
No_cal_sw:
LDA #00
STA Cal_.switch
-.
cnt
;clear count if hi
;update
No_linv_stp:
LDA Wait_time
BNE WTa
LDA #04
STA Wait_time
JMP Timer_norm
WTa: DEC Wait_time
JMP TimerB_dn
;4 times thru loop = 2.9 msec
;>0
/counter reset
;reload
/ bypass timers until done
Timer__norm:
; Below routines run at 2.9 mSec
Mot_speed_cnt jck for active
No__spd_m
Mot_speed_cnt
LDA
BEQ ;jump if not
DEC ;-l
No_spd_m:
motorstoped / motor drift timer
No_mstop
motorstoped ;-l
LDA
BEQ / jump if done
DEC
No_mstop:
Motor_led_timer
TimeBl
Motor led timer
; Motor_led timer * 742 mSec
;3urop if done
LDA
BEQ
DEC
TimeBl ;
Cycle_timer ;2.9mSec timer * cycle reload
TimeB2
Cyc1e_timer ;-1
L7A
t~Q / jump if done
DEC
TimeB2:
Motor_pulse / 2.9mSec timer * Motor_pulse
/jump if done
;m LDA
m BEQ TimeB3
Motor
/m DEC .-nils© /-1
TimeB3:
Mili_sec
TimerB_dn
Milisec_flag
/-1 & allow rollover
/wait for rollover (2.9mS • 256 = 742mSec)
/ tell task rtn to decrement timers
DEC
BNE
INC
TimerB_dn:
We could test all interrupts here as needed
Ck2Khz:
Ck500hz
Ck60hz:
; Check motor position - IR slot in wheel sensor i
A-101
----------------------- Page 103-----------------------

; This version does two reads to eliminate noise and sets a done flag to
; prevent multiple counts. It also reads twice when no slot is present
to
; clear the done flag.
LDA Port_C
«Pos_sen
Clr_pos
Port_C
#Po8__sen
Clr_pos
Slot_vote
Pc_donc
«00
Slot_vote
Force_int
;get I/O
;ck position sensox
;jump if no:
;get I/O
; READ 2x to prevent noise trigger
;juznp if no IR trigger
;get prev cycle
,- bail if prev counted
AND
LDA BNE ^er
AND
BNE
LDA
BEQ
LDA ;
;set ram to 0. (faster than setting a bit)
;go count slot
STA
JMP
Clr_pos:
LDA Port_C
*Pos_sen
Pc_done
Slot_vote
Pc_done
;get I/O
; READ 2x to prevent noise trigger
;not 2 equal reads so bypass this cycle
;set ram to 1. (faster than setting a bit)
AND
BEQ
STA
JMP ;
ExtportC:
;this should be turned off
;get status again
;test for port C bit 1 rising edge
;jump if not
JMP Intt_false
LDA Interrupts
« 0 1H
Pc_done
AND
BEQ
Force_int:
; LDA
; AND
; BEQ
Port_D_Image
«Motor_led
Pc_done
;system
;ck if position I.R. led is on
;jump if not off
Stat_2
«Motor_fwd
Cnt_rev
Pot_timeL2
LDA ;get system
;if set then FWD else REIV
;jump if clr
;sensor counter
AND
BEQ
INC
CLC
Pot_timeL2
«207
LDA ;current
;ck for > 207
;jump if not
;roll over
SBC
BCC Updt_cnt
LDA «00
Pot_timeL2
Updt_cnt
STA ;
JMP
Cnt_rev:
DEC Pot_timeL2
CLC
«208
Pot_timeL2
Updt_cnt
LDA ;max count
;ck for negative ( >207 )
;jump if not
-S
Cnt_c .
«207 ;when neg roll over to max count
Pot_timeL2
LDA
STA ;
Updt_cnt:
INC Drift_counter ;to be used for braking pulse
A
-1Q2
----------------------- Page 104-----------------------

LDA Pot_timeL2
STA Pot_timeL
;get current count
;save in motor routine counter
; THis routine used to calculate motor speed based on battery voltage.
ck for active
jump if not
LDA Mot_speed_cnt
BEQ Pc_done
INC Mot_opto_cnt
Pc_done:
LDA
BEQ
Motor_led_timer
Mot_led_off ;juznp if done
;system
;turn LED on
;ck if active (>0)
LDA Port_D_Image
ORA •Motor led
JMP Mot LEDJDN
Mot_led_off:
LDA Port_D_Image
•Nt_Motor_led
;system
AND ;turn LED off
Mot_led__dn:
STA Port__D_Image ;update motor led
M_drft_Fl:
Drift__fwd
M_drft_Rl
Drift__fwd
LDA /get delay value
/ jump if prev done
;get delay value
;01=turn motors off
/send it
BEQ
LDA
CMP •01
BEQ M_drft_F2
DEC Drift fwd ;-1
;m32
/ get system (note lo is tranyj off)
/ turn both motors off to prevent trnnsistors
/ on at same time
LDA Port_D_Image
•3Fh
Port_D
AND
STA
/m32
Port_D_Image
•Motor off
LDA / get system
/turn both motors off
•Motor_fwds / move motor in fwd dir to stop motion
Intt
^motor_end
ORA
AND
JMP
M_drft_F2:
Drift_fwd
Port_D..Image
#Motor_off / turn both n.otors off
Intt_motor_end
DEC / - 1
LDA / get s/stem
ORA
JMP
M_drft_Rl:
Drift_rev
Intt_motor
Drift_rev
/ get delay value
/jump if prev done
/ get delay value
/01=turn motors off
/send it
;-l
LDA
BEQ
LDA
CMP •01
M__drft_R2
Drift_rev
BEQ
DEC
;m32
/ get system (note lo is tranys off)
/ turn both motors off to prevent transistors
/on at aame time
Port_D_Image
•3Fh
P rt_D
LDA
AND
STA
/m32
Port__D_Image
•Motor off
LDA / get system
/ turn both motors off
•Mctor_revs /move motor in rev dir to stm motion
ORA
AND
A-103
----------------------- Page 105-----------------------

JMP Intt_jKiotor_end
M_drft_R2:
Drift_rev
Port_D_Iroage
#Motcr_off
Intt_r.yotor_end
DEC ;-l
LDA ;get system
ORA ;turn both motors off
JMP
Intt_motor:
LDA Stat_3
AND #C0h
STA Intt_Temp
;get motor command bits
;sav • motor direction
. FurbylT .. move motor pulse width to interrupt routine
LDA Motor_pulsel
BEQ Intmotorl ;jump if 0
DEC Motor_pulsel
JMP Intmotor_dn ;exit (dent change Intt_temp if on)
;
;get on time
Intmotorl:
Motor_pulse2
Intmotor2
Motor_pulse2
#C0h
Intt_Temp
Intmotcr_dn ;exit
LDA ;get off time
;got resec timer
;-i
;shut motor off
BEQ
DEC
LDA
STA
JMP
Intmotor2:
Mon_len
Motor_pulsel
Moff_len
Motor_pulse2
LDA ;reset on time
STA
LDA ;reset off time
STA ;
Intmotor__dn
end motor pulse width
LDA Port_D_Image
AND #3Fh
CLC
ADC Intt__Temp ;put in motor commands
;get system
;clear motor direction bits
Intt_motor_end:
STA Port_D__Image .•update system
; st Tracker
EOR
; end Tracker
#%11000000 ;;Tracker add invert motor drivers
STA Port D ;output
Intt_done: ;y^ ral turn
LDA Stat_3
ORA *IRQ_dn
STA Stat_3
;systt
;f1•7
Iup iat
tern IRQ occured
Intt_false:
LDA #00H
STA Interrupts
LDA *Intt_df1t
STA Interrupts
clear all intts first
get default for interrupt reg
set reg & clear intt flag
•.
3LP recover CPU
A-104
----------------------- Page 106-----------------------

PLA ;recover ACC
RTI ;reset interrupt
;;
Communication protocal with the TI is:
FF is a no action command, (used as end of speech command)
FE sets the command data mode and the TI expects two
additional data bytes to complete the string. (3 TOTAL)
ALL OTHERS (0-FD) ARE CONSIDERED START OF A SPEECH WC JD !
Command data structure is BYTE 1 BYTE 2 BYTE 3
; BYTE 1 is always 7E
; Command 1
BYTE 2 = FE is pitch table control;
BYTE 3 = bit 7 set = subtract value from current course value
;
clr = add value to current course value
bit 6 set = select music pitch table
clr = select normal speech pitch table
bit 0-5 value to change course value (no change = Ci
Command 2
BYTE 2 = FD is Infrared transmit cmnd
BYTE 3 = Is the I.R. code to send ( 0 - OFh only )
Command 3
BYTE 2 = FC is the speech speed control
BYTE 3 = a value of 0 255 where 2Eh is normal speed.
, Enter subroutine with TEMPI - command byte (1st)
; TEMP2 * data byte (2nd)
Xmit
..TI:
;tells TI command da.a to follow
;out data
;command code
;out data
;data to send
;out data
;done
#FEh
Spch_jnore
TEMPI
Spch_more
TrMP2
Spch_more
LDA
JSR
LDA
JSR
LDA
JSR
RTS
There is an entry for each bank of speech and only the words in that
bank are in the list. THis i© a subroutine call.
The first t.me thru, call SAY_x and as long as WORD_ACTIV or
SAY_ACTIV
is set we call DO_NEXTSFNT until saysent is done.
; ; ;
There are 4 groups of 128 pointers in each group. This gives 512
A-I05
----------------------- Page 107-----------------------

saysents.
; 1. Enter with 'Which_word' holding 0-12*7 and ’Sgroup' for the 1 of 4
tables
which points to two byte adrs of a saysent. These two bytes are
; loaded into Saysent_lo & Saysent_hi.
; 2. Dat~ s shuffled to the TI according to the BUSY/REQ line
; ;
Currently we have 167 speech words or sounds in ROM. Words 1 - 1 2
; are in bank 0 nd 13 - 122 are in bank 1 & 123 167 in bank 2.
Say__0:
LDA ord jget offsett
V ;load offset to Xreg
;get current
;is it table group 4
;jump if is
;is it table group 3
;jump if is
;is it table group 2
;jump if is
;default group 1
Spch_grpl ,X ;get lo pointer
Saysent__lo
jroup
CMP »03
BEQ Dec_say4
CMP »02
BEQ Dec_say3
CMP »01
BEQ Dec_say2
Dec_sayl:
LDA
STA ;save
;X*1
Spch_grpl # X ;get hi pointer
Saysent_hi
Dec_say5
INX
LDA
STA ;save
JMP ;go calc word
Dec_say2:
LDA Spch_grp2,X ;get lo pointer
STA Saysent_lo ;save «.
;X+1
Spch_grp2,X ;get hi pointer
Saysent_hi
Dec_say5
INX
LDA
STA ;save
JMP ;gc calc word
Dec_say3:
Spch_grp3,X ;get lo pointer
Saysent_lo ;save
;X*1
Spch_grp3,X ;get hi pointer
Saysent__hi ;save
Dec__say5
LDA
STA
INX
LDA
STA
JMP ;go calc word
Dec_say4:
Spch_grp4,X ;get lo pointer
Saysent_lc ;save
;X*1
Spch__grp4,X ;get hi pointer
Saysent_hi ;save
LDA
STA
INX
LDA
STA
Dec_say5:
LDX »00 ;no offsets
;get data 0 1 bit adrs
;save new speech speed
jcommand for TI to except speed data
(Saysent__lo,X)
TEMP2
»FCh
TEMPI
Xrnit_TI
Saysent_lo
Xney_say
5aysent__hi
LDA
STA
LDA
STA
;send it to TI
;next saysent pointer
;jump if no roll over
JSR
INC
BNE
INC
A-106
----------------------- Page 108-----------------------

Xnay_say:
LDX too ;no offsett
LDA (Saysent_lo,X) ;get data 8 16 b:t adrs
CLC
Rvoice
TEMP2
tFEh
TEMPI
ADC ;adjut to voice selected on power up
save new speech pitch
command for TI to except pitch data
STA
LDA
STA
; The math routine converts the value to 00 for 80 and
; if
; ie, -if 0 number then subtracts is 70 then from TI80 gets to get sentthe 10 (minu -1 «* ver * n of 00
LDA TEMP2
BKI No__voice_chg
LDA t80h
;get voice with offsett
;if >80 then no char
;remove offsett if <80
CLC
;kill offsot
;update
SBC TEMP2
STA TEMP2
No_voice_chg:
JSR Xmit TI ;send it to TI
Do_nextsent:
Frst_say:
INC Saysent_lo
BNE Scnd_say
INC Saysent_hi
Scnd_say:
LDX #00
LDA (Saysent_lo,X)
CM"* #FFH
BEQ Say_end
LDA (Saysent_lo,X)
STA Which_word ;
;next saysent pointer
;jump if no roll over
;!
;no offsett
;get data 8 16 bit adrs
;check for end
;done
;get data 8 16 bit adrs
Wtest:
CLC
SBC #12
BCS Get_groupl
;ck if in bank 1
;jump if is
Get_group0:
LDA #00 ;set bank
STA Bank__ptr ;Bank number
;clear carry
;get word
;2's offsett
;load offset to Xreg
;get lo pointer
CLC
LDA Which_word
ROL A
TAX
LDA Word_group0,X
STA Word_lo ;sax e
;X*1
LDA Word_group0,X
STA Word_hi
JMP Word_fini ;go do it
;get hi pointer
;save
Get_groupl:
LDA Which_word ;selection
CLC
;ck if ix. bank 2
;jump if is
SBC #122
BCS Get_group2
A-107
----------------------- Page 109-----------------------

LDA #01 ;set bank
STA Bank_ptr ;Bank number
CLC
LDA Which_word ;get word
SBC #12 ;lst 12 in wnrd__groupO
CLC
;2's offsett
;load offset to Xreg
;get lo pointer
;save
ROL A
TAX
LDA Word_groupl,X
STA Word_lo
INX ;X+l
Word_groupl,X
Word hi
Wor ini
;get hi pointer
;save
LDA
STA
JMP
Oet_group2:
LDA #02 ;set bank
STA Bank_p*T ;Bank number
;clear carry
;get word
;1st .22 in word_group 0 & 1
CLC
Which_word
#122
LDA
SBC
CLC
;2’s offsett
/ load offset to Xreg
;get lo pointer
;save
ROL A
TAX
Word_group2,X
Word lo
LDA
STA
INX Wc.d_group2,X;X-1
Word_hi
/ get hi pointer
;save
LDA
STA
Word_fini:
LDA Stat_l
#Say_acti
#Word_activ /Set status
Stat_l
Do_spch
/ get system
ORA /Set spch active after word pointer loaded
ORA
/ update system
/ go say it
STA
JMP
Say_end:
Stat_l
#~lr_spch
Stat_l
LDA / get system
/ turn say_activ & Spch_activ off
/save system
AND
STA
RTS /done
z Thia is the re-entry point during speech for all woi to be spoken
start of chg for 3 - #FFh xmits ti TI
Do_spch:
;Bank number
/ set it
Bank_ptr
Bank
LDA
STA
LDX #00H
/Get the speech data
;is it end of word
/ jump ir not en:
LDA (Word_lo,X)
CMP #FFH
BNE Clr_word_end
LDA • Stat_l
AND #Word_term
BEQ Set_end
/ get system
/ was it prev set
/nope
A-108
----------------------- Page 110-----------------------

Wake2.asm
; WAKE2
adds deep sleep *n.de. If •Deep„sleep'*llh then tilt will not
wake us up. only invert.
;; ;
Power up reset decision for three types of startup:
; 1, Powerup with feed switch zeros ram fc EEPF.CM, & calls 10-200-10 macro.
7 2. Pcver up from battery change wont clear EEPROM but calls 10-200-10 macro.
; 3. Waka up from PortJD clears ram and jumps directly to startup. No macro.
/interrupts off
/startup setting
/disable Watch Dog
/Reset stack pointer address $0FFH
SEI
LDX #C0H
Interrupts
#FFH
STX
LDX
TXS
LDX #0
Wake_up /Get the information frcm h * rdware to check
/whether reset is from po er up or wakeup
LDA
TEMPS
Wake_up
STA
/disable wakeup inroediately, this action can
/stop the reset occupied by another changed on
/portD, so once the program can execute to
/this line then chip will net be reset due to
/port changed again
STX
.mask the rest of bit and }ust check the port
/wake up information
/ jump to power up initial if not port D
AND #%00000001
6EC Power_ba11ery
/ Need to debounce tilt and invert since they are very unstable
.*
C'k_wakeup s
LDA >00 ;clear
STA TEMPI
TEMP2
#FFh
7
STA 7
LDX ;loop counter
Dbnc_lp:
LDA Porc_D
/ck tilt sw
/juirp if not tilt
/switch counter
AND #01
Dbnc_lp2
TEMPI
BEQ
INC
Dbnc__lp2:
LDA Port_D
/ck invert sw
/jump if not invert
/switch counter
AND •02
Dbnc_lp3
TEMP2
BEQ
INC
Dbnc_lp3:
/-1 loop court
/ loop
DEX
BNE Dbnc_lp
Deep_sleep /decide if normal or deep sleep
•llh
Dbnc_lp4
TEMPI
Dbnc_lp4
LDA
CM. ;
/if deep sleep then only test invert
/get tilt count
rjunp if 0
BEQ
LDA
BEQ
CLC
;min count to insure not noise
/jump if > min
SBC f.
BCS Power_Port_D
Page 1 A-109
----------------------- Page 111-----------------------

Wake2.asm
Dbnc_lp4:
LDA TEKP2
Dbnc_lp5
;get invert count
BEQ fjunp if 0
CLC
10 ;min count to insure not noise
;jump if > min
SBC
BCS Pover_Port_D
Dbnc__lp5:
;Verify that PortJD is no longer changing before going to sleep,
jlf not, the CPU will lock up without setting the low power mode.
;Before we exit here when count is less than minimum count, we mast
;be sure Port_P is not changing. If we jump to sleep routine when
fit i.a not stable, the sleep routine will wai* forever to be stable
;which c. Furby appear to be locked up.
LDA *00 ;
STA TEMPI
Port_D
;counter
LDA ;get current status
Test_sleep:
CMP fcheck if changed
;start over if did
;-1 counter
floop
'.Otherwise, just goto sleep again
Port_D
Ck_wakeup
TEMPI
Test_sleep
OoToSleep_2
BNE
DEC
BNE
SAP
Pcwer_Port_D:
•llh
Wamucoid
L_PowerOnInitia1
LDA ;signal port D wakeup
STA ;
JKP
Power_battery:
•05h
Warnucold
LDA jsignal battery wakeup
STA
L_PowerOnInitial:
•.
LDA #00 clear deep sleep cosmsand
STA Deep_sleep f
Page 2 A-110
----------------------- Page 112-----------------------

Lights.asm
/ ;
7 MODS :
; LIGHT3.asm
; Add test to light counter so that if the oscillator
/ fails, the system will ignore light sensor and keep running.
; Light4
; When goes to conplete dark and hits the 'Dark_sleep' level
; and stays there until the reff level updates, at that point
; we send Furby to sleep.
; ;;
Light5 (used in F-RELS2 )
; Change detection of light threshold to prever: false or continuers trigger.
;
Bright 25 / light sensor trigger > reff level (Hon)
/Light sensor trigger < reft level (Hon)
EQU
Dim EQU 15
Shift_ref£ EQU 10 /rax count to set or clear prev done flag
Dark_sleep BOh /when tiiTier A hi *0f and timer A low
is * to this EQU then send him to sleep
EQU
; ;
The CDS light sensor generates a square wave of 500hz to 24khz based on
/ light brightness. We car loop on the sense line and count time for the
; lo period to determine if light has changed and conpare it to previous
/ samples. This also determines going lighter or darker. W also set a timer
/ so that if someone holds their hand over the sensor and we announce it.
/ if the change isnt stable for 10 second, we ignore the change back to the
/ previour state. If it does exii tor > 10 seconds, then it becomes the
; new sarple to compare against on the next cycle. *.
; In order to announce light change, the system must have a consistent
/ count > ‘Shift_ijff'.
/ If a previous retf has been set then the 'Vp
^
light * bit is set to
; look for counts greater than the reff. The system passes through the
/ light routine *Shi£t_re£f ’ times. If it is consistently greater than
/ the reff level, we get a speech trigger If any single pass is less
/ than the reff, the counter is set back to zero. This scenario also
; is obeyed when the trigger goes away, ie remove your hand, and the system
/ counts down to zero.(’Up_light * bit is cleared ) If during this time any
/ trigger greater than reff occurs, the count is set back to max.
/ This should prevent false triggers.
Get_light: /alt ent: / for diagnostics
/ This uses timer A tc get a count from the lo period of the elk
/ interrupts off
/disable timer, clock, ext ints,
*,
L watchdog; select IRQ int.
/set timer A for timer mode
SEI
#0CQH
Interrupts
•000H
TWA CON
LDA
STA
LDA
STA /
Page 1 / in
----------------------- Page 113-----------------------

Light5.asm
#OOOH
TMA
.
LSB
tOOOH
TMA JMSB
LDA /re-atart timer A
STA /
LDA ?now CPUCLK/ was fOlOH * CPUCLK/4 (Hon)
STA 7
Ck
.lght2:
;teat for dead light osc
/get timer
;ck *or > OE
/jump if not
/get lo byte
LDA TMA_HSB
#0Fh
#0Fh
Ck_lt2a
THA_LSB
AND
CMP
BNE
LDA
CLC
•EOh
Ck
.
lt2a
Light .fail
/ck for > kmsb*lsb *OFEO)
/jump if not
/bail out if >
SBC
BCC
JMP
Ckto_lt2a;
Port
.D
•Light .in
Ck
.lght2
/get I/O
;ck light elk is hi
/wait for it to go hi
LDA
AND
BEQ
•000H /re-start timer A
TMA_LSB
#r OH
-A_J!SB
LDA
STA /
LDA /now CPUCLK / was iOlOH « CPUCLK/4 (Hon)
STA /
Ck
.lght3:
/ test for dead light osc
yget timer
/ck for > OE
/ jump if not
/get lo byte
LDA TMA_MSB
#0Fh
#0Fh
Ck
.
lt3a
mA
.LSB
AN
BNE
LDA
CLC
#E0h
Light .fail
/ck for > (msb+lsb «*0FE0)
/ bail out if >
SBC
BCS
Ck
.
lt3a:
/get I/O
,ck light elk is lo
/wait for it to go lc to insure the elk edge
Port
.D
Light .in
Ck
.lght3
LDA
AND
BNE
Ck_lght4:
#000H / re-start timer A
'mA
.LSB
•000H
THA
.
MSB
LDA
TA ;
LDA /now CPUCLK; was #010H = CPUCLK/4 (Hon)
STA /
Ck_lght4a:
Port
.D
Light .in
Ck
.lght4a
/get I/O
/ck if still lo
/ loop till hi
LDA
AND
BEQ
/ Timer A holds count for lo period of elk
Lght4cmp:
/get timer high byte
/ mask out high nybble
; and save it
/get timer low byte
/ and save it
TOA__HSB
•OOFH
TEMP2
mA
.
LSB
TEMPI
LDA
AND
STA
LDA
STA
LDA TMA .MSB /get timer A high Vyte o^ain
Page 2 A-112
----------------------- Page 114-----------------------

Light5.asm
#OOFH
TEMP2
Lght4cnp
AND : mask out high nybble
; and cornpare it with last reading
;loop until they’re -rual
; take 12 bit timer (2 bytes) and move to one byte and trash lo nible
; of low byte. End up with hi 8 bits out of 12.
CMP
BNE
LDX #04 /loop counter
Light__byte:
TEKP2
TEMPI
FOR /get lo bit into carry
ROR /shuffle down and get carry from TEMP2
DEX /-1
BNE Light_byte /loop till done
Ck_lght4b: I
#Intt_dfIt
Interrupts
LDA /Initialize timers, etc.
/re-establish normal system
/re-enable interrupt
/wait tor motor R/C to start working again
/clear
STA
CLI
JSR Kick_IRQ
CLC
/ now have new cour.- in TEMPI *
Light_reff
TEMPI
Ck_lght5
LDA /get previous sanple
;ck against current sample
/ jump if negative
SBC
BCC
CLC
•Bright
Lght_brt
Kill_ltrf
/ck if difference > reff
/go do speech
/bail out if not
SB<~
BCS
JKP
Ck_lght5:
CLC
LDA TEMPI
Lighter*ff
Kill Itrf
/ try the reverse subtraction
/prev
/quit if negative
SBC
••
BCC
CLC
/ is diff < reff
/bail out if not
#Dim
SBC BCC Kill_ltrf
Lght__dim:
Stat_3
Nt__lght__stat
Stat_3
Do_lght
LDA ;system
/clear > it to indicate dark table
/ update system
/go fini
AND
STA
JMP
Lght_brt s
Stat_3
•Lght_stat
Stat_3
Do_lght /
LDA /system
/set bit to indicate light table
/ update system
ORA
STA
JMP
Light_fail:
#FFh
TEMPI
#Intt_dflt
Interrupts
LDA / force lo number so no conflicts
STA
!DA /Initialize timers, etc.
/re-establish normal 8} tern
/re-enable interrupt
/wait for metor R/C to start working again
/ ret with nc req
STA
CLI
Kick_IRQ
Kill_shift
JSR
JMP
;
Do_lght:
Page 3 A-113
----------------------- Page 115-----------------------

Lights.asm
LDA Stat_l
#Up_light
Rst_shftup
#Shift_reff
Light_shift
No_lt_todo
;system
;ck if incrnnt mode
/jump if incrmrit mode
;8et to max
AND
BNE
LDA
STA J
JMP
Rst_shftup:
/
Light_shift
Light_shift
INC / 1
LDA ;get counter
CLC
#Shi£t_reff
No_lt_todo
*Shift__ref £
Light__shift
/ck if > max reff count
/jump if < max count
;reset to max
SBC
BCC
LDA
STA ;
Stat_0
#Lt_jprev_dn
New_ltreft
LDA /system
/check if previously done
/jump if was
AND
BNE
LDA Stat_0
#Lt_jprev_dn
Stat 0
;system
/set previously done
/update
ORA
STA
LDA Stat_l
#EFh
Stat_l
/system
/set sytem to shift decrmnt mode
;u± *ate
;
/ AND
/ STA
#Light_reload
Light_tiraer
Do_ltchg
/reset for next trigger
/set it
;g© announce it
LDA
STA
JMP
New_.ltreff:
Light_timer
No_lt_todo
TEMPI
Light_reff
LDA /get current
/nothing to do
/get new count
/update system
BNE
LDA
STA
Stat_l
EFh
Stat_l
:DA ;system
;set sytem to shift decrmnt mode
/update
AND
STA
LDA TEMPI /get current value
CLC
/ck if > sleep level
/jump if >
/system
/kill prev done
/update
#Dark_sleep
Ck_drk
Stat_0
#7Fh
Stat_0
Kill__ltrf
SBC
BCS
LDA
AND
STA
JMP /
Ck_drk:
LDA Stat 0 /system
#D rk_,sleep_prev /ck if this was already done
BNE AI.D KUl_ltrf /jump if was
LDA Stat_0 /system
•#Dark REQ-.dark _sleep _sleep _jprev /set /setit also
;update
ORA
ORA
STA Stat_0
Kill_ltrf:
Page 4 A-114
----------------------- Page 116-----------------------

Light5.asm
Stat_0
#Lt_prev_dn
No__lt_*odo
Light_shift
Kill_ahift
Stat_l
#Up_light
Rst_shftdn
LDA /system
/check if previously done
jjunqp if clear
/get shift counter
;jump if went zero last time
/system
/ck if incrrmt mode
/jump if decnrnt mode
/set to min
/
/ AND
; BEQ
LDA
BEQ
LDA
AND
BEQ
LDA #00
Light_shift
No_lt_todo
STA /
JMP ;
Rst_shftdn:
Light_shi£t
No_lt_todo
/-1
/done
DEC
JMP
Kill_shift:
Stat_0
#FDh
Stat 0
LDA /system
/clears Lt_prev_dn
/update
AND
STA
Stat_l
#Up__light
Statl
LDA /system
/prepare to incrmnt 'Light_shift•
/update
ORA
STA
No_lt_todo:
SEC /carry set indicates no light change
RTS
;;;; / /;; / /; /;;/;/ /; / ? z / / / ;;;/;/ / / / /
/ alert system to start speech
Do_ltchg:
Stat_3
#Lght_stat
LT_re£_brt
Stat_4
#Do_lght_dim
Ltre£_egg
LDA ;system
;ck if went light or dark
/went brighter if set
/get system
/ set indicating change < reff level
ANT
BNE
LDA
ORA
JHP ;
LT_ref_brt;
Stat_4
#Do_lght_brt
LDA /
ORA /set indicating change > reff level
Ltre£_egg:
/update egg info
/carry clear indicates light > reff
/done
STA Stat_4
CLC
RTS
Page 5 A-115
----------------------- Page 117-----------------------

Diag7.asm
rttttttltttttttttttttltltttittttttttittltlttiltitttmttittttttlttmt
;• 'Diagnostics and calibration Routine
/fellllllillllllllillllillllllllllllllllllllllllilllllllllllllllttlilil
a
7/
Mods to the diagnostic routines :
; DIA06
; Init memory,voice,name and write EEPRCM before exiting.
:
; Diag7:
/ EEprom memory test, reads and writes all locations.
/ On power up if port D woke us, then bypass diagnostics.
i ;
refer to self test mode documentation
; START
;;
Diagnostic EQU's
Dwait_tilt EQU 02 / full test waiting for no tilt {step 1)
Diagnostic:
/ All speech / motor calls use standard macro routines, except we
; force the macro directly. Be carefull to load the •MACRO__LO' and
/ * MACRO_HI' bytes properly. We use a cornnon subroutine to set the macro
; so 'MACRO_HI' is loaded only once in the subroutine. Be sure the macros
; are in the same 128 byte block. Initially chose adrs 400 (190) for these
/ diags.
Warxi\_cold
#lih
No__Diag
;get startup condition
;ck for port D wakeup
;jump if not
LCA
CMP
«
.
BEQ
LDX #FFh / loop counter
DportD__tst:
;get I/O
jck for tilt and invert
;if either hi then bail out
LDA Port_D
AND #03
BNE No_Diag
DEX ;-1
BNE DportD_tst ;loop till done (ckg for Port D bounce)
/ get I/O
/ ck for front and back switches made
/ if both not lo then bail out else start diag
Port_C
#0Ch
Diagl
LDA
AND
BEQ
No_piag:
JMP Test_byp ;no diagnostic request
/ Start test
condition while diag is active
/ /Tracker add for constant diag
/ /Tracker add
/ hi beep for start of test
;go send motor/speech
Diagl:
/ / force voice to normal
LDA #9
STA Rvoice
LDA #0
JSP. Diag__macro
wait for front & back to clear
LDA Port_C ;get I/O
Page 1 A-116
----------------------- Page 118-----------------------

Diag7.asm
#OCh
#OCh
Diagl
AND /get keys
/must be both hi
/wait till are
CMP
BNE
New_top:
#03 ;aet delay for switch bounce
/x • delay
LDA
JSR Half_delay
;
/press front key fc go to EEPROM test
Port_C
#Touch_fmt
Diag2b
Diag2a:
LDA /get I/O
/wait for switch
/go ck if next test is requesting
AND
BNE
#01 /hi beep for start of test
/go send motor/speech
LDA
JSR Diag_macro
Diag2al:
LDA Port_C
#Touch_fmt
Diag2al
AND
BEQ
/ EEPROM WRITE
; init ram as 1,2,3,4,5 to 26
•01H
•Age
/ data for fill
/ start at ram location
LDA
LDX
RAMset:
STA 00,X / base 00, offset x
CLC
/inc Acc
/ next ram location
/ check for end
; branch, not finished
z fill done
ADC •01
INX
•Age+26
RAMset
CPX
BNE
/write the EEPROM
/read data to ram
Do_EE_write
S EEPRQM_READ
JSR
JSR
LDA •00 /clear
Task_p:.r
•Age
STA r
LDX / start at ram location
RAMtest:
LDA 00,X / base 00, offset x
CLC /
Task_ptr
Task_ptr
/ running CRC
/ running total
/ next ram location
/ check for end
/ branch, not finished
/get result
/matching CRC (actual total is l5Fh )
;jurrp if bad
ADC
STA
INX
•Age+26
RAMtest
Task_ptr
#5Fh
EEfail
CPX
BNE
LDA
CMP
BNE
EEpass:
/ bi’ep to signal good test
/use as temp storage
/sene sounds
#02
Feed_count
EEdone
LDA
STA
JMP
EEfaili
•beep indicates failure
/temp storage
#03
Feed__count
LDA
STA
EEdone;
Page 2 A-m
----------------------- Page 119-----------------------

Diag7.a8m
CLI /enable IRQ
/wait for timer
/clear TI froxr
Kick_IRQ
TI
.
reset
JSR a
-sync
JSR
Feed
.count
Diag_jt»cro
TLA /get lo byte of macro to call
JSR /go send motor/speech
Diag2b: / Speaker tone / I.R. xmit
Port
.C
#Touc\_bck
Diag2c
LDA /get I/O
/wait for switch
/go check if next test is requesting
AND
BNZ
#1 /hi beep for start of test
/go send motor/speech
LDA
JSR Piag.macro
T)iag2blp:
LDA Port
.C
•Touch .bck
Diag2blp
AND
BEQ
Diag2bls
LDA »04 / send long tone (lk sinewave)
JSR Diag_jnacro /go send motor/speech
LDA Port
C.
•Touch .bck
Diag2bl
;/
mask for back switch
/loop until back switch pressed
AND
BNE
Xmit
.lp:
/beep
JSR LDA Diag •01.macro /go send motor/speech
LDA Port
.C
•Touch .bck
Xmit
.Ip
/ /
/mask for back switch
/loop until back switch pressed
/ AND
/ BNE
•05h V
TEMP2
•FDh
TEMPI
Xmit
.
TI
LDA /send ’5' tc I.R. xmiter
STA /
LDA ;send command I.R. to TI
STA ;
JSR /send it
dumb: Port
C.
•Touch .bck
dumb
LDA /get I/O
/wait for switch
/wait for back to be pressed
AND
BNE
dumber: LDA Port
.
C
•Touch,fme
Next
.
l
Xmit
.lp
/get I/O
AND /ck switch
BEQ
JMP
/hi beep for start of test
/go send motor/speech
/get I/O
ck for front and back switches made
;if both not lo then bail out else start dieg
Next .l: LDA •2
Diag_macro
Port
.C
#0Ch
Next
.
l
New
.top
JSR
LDA
AND
BEQ
JMP
/ Full test starts here
Diag2c: LDA
AND
BNE
Port
.D
•Ball .invert
Diag2d
/get I/O
/wait for switch
/onward if key pressed
Page 3 A-US
----------------------- Page 120-----------------------

Di*g7.asm
JMP Diag2a /loop hack Co top if none
Diag2d:
#01 ;hi beep for start of test
;go send motor/speech
LDA
JSR Diag_jnacro
; FULL TEST MODE
;wait for no tilt to start full diag
#Dwait__tilt
TEMPI
DiagFl:
LDA /set delay to be sure no tilts
STA ;
DiagFla:
LDA Port_D
AND #3
DiagFl
TEMPI
DiagFla
BNE
:c
dNE
#2 ;pa"s beep
;go send motor/speech
LDA
JSR Diag_macro
;
DiagF2: ;test tilt 45 deg
LDA Port__C
f00001100b
#0CH
DiagF22
AND
CMP
BEQ
LDA #3 Z fail beep
JSR Diag_macro ;
DiagF22:
LDA t_D
AND #2
BEQ DiagF23
LDA #3 ; fail beep
JSR Diag_macro ;
DiagF23:
LDA Port_D
#Ball_side
DiagF2
get I'O
ck for tilt switch (hi « tilted)
wait tor tilt
AND
BEQ
LDA Port_D
#Ball_invert
DiagF2a
;get I/O
;ck if invert sw made
/jump to error if so
AND
BNE
;get I/O
/get front it back
/must be hi else error
;if hi then pass
LDA Port_C
#0Ch
•OCh
DiagF2b
AND
CMP
BEQ
DiagF2a:
/ fail beep
/ go send motor/speech
/loop till no error
LDA #3
Di*.j_macro
DiagF2
JSR
JMP
DiagF2b:
/ pass beep
JSR LDA •Diag 2 _macro •go send motor/speech
DiagF2c: /wait for no tilt before continuing
Page 4 A-i/9
----------------------- Page 121-----------------------

Diag7.asm
LDA Port_C
#Touch_bck
DiagF3b
AND
BEQ
LDA Port_D
#Ball_side
DiagF2c
?get I/O
;ck for tilt switch (hi * tilted)
;wait for no tilt
AND
BNE
/DANGER
LDA /get I/O
/ck switch
/ no other switch can be made here else error
; allow multiple checks
Port_C
#Touch_£mt
DiagF3
DiagF23
7
; AND
7 BEQ
7 JMP
DxagF3: /test back switch
Port_C
#Touch_bck
release
DiagF23
LDA / get I/O
/wait for switch
/loop if hi (touch is not pressed)
7
7 AND
7 BEQ
JMP
release:
LDA Port_C
#Touch_£mt
DiagF3a
/get I/O
/ck switch
;no other switch can be made here else error
AND
BEQ
LDA PortJD /get I/O
/ck for tilt and invert
;if either hi then error else continue
AND #13
BEQ DiagF3b
DiagF3a:
/fail beep
/go send motor/spe -ch
/ loop till nc error
LDA #3
Difcg_macro
DiagF3
JSR
JMP
DiagF3b:
/ pass beep
/go send motor/speech
LDA •2
JSR Diag_macro
/
DiagF4:
LDA Port_C wait for front to clear
#Touch_£mt
DiagF4
/get I/O
/ ck switch
/if pressed then wait for release
AND
BEQ
7 Send motor forward until front switch pressed
Stat_2
#Motor_£wd
#Motor_actv
Stat_2
Stat_3
#Motor_off
#Motcr_£wds
Stat_3
LDA /get system
/set * motor fwd (inc)
/set motor in motion
/update system
/get current status
/turn both motors off
/move motor in fwd dir
/update
ORA
ORA
STA
LDA
ORA
AND
STA
DiagF4al:
/get I/O w. t for front
/ck swit
/got it
/loop ti.l found
LDA Port_C
fTouch_fmt
DiagF4a2
DiagF4al
AND
BEQ
JMP
/ Send motor reverse until front switch pressed
Page 5 A-120
----------------------- Page 122-----------------------

Diag7.asm
DiagF4a2: i
LDA Port_C
#rouch_fmt
DiagF4a?
/get I/O wait for front to clear
;ck switch
;if pressed then wait for release
AND
BEQ
Star._2
#Motor__rev
#Motor_actv
Stat_2
Stat_3
•Motor_off
#Motor_revs
Stat_3
LDA ;get system
/clear fwd flag
/set motor in motion
/update system
/get current status
/turn both motors off
/move motor in rev dir
AND
ORA
STA
LDA
ORA
AND
STA
DiagF4a3:
/get I/O wait for front
/ck switc’
/got it
/loop till found
LDA Port_C
#Touch_fmt
DiagF4a4
DiagF4a3
AND
BEQ
JMP
/ Send motor end to end a/.d stop on cal sw, else error
DiagF4a4:
Stat__3
•Motor_off
Stat_3
Stat_2
#Motor_inactv
Stat 2
LDA /get current status
/ turn both motors off
/update
/get system
/clear activ flag
/update system
ORA
STA
LDA
AND
STA
LDA #5 /start motor test
/go
/set delay for motor tc stop
;A • half sec delay
/get I/O
;lo when hit
;no position switch found
/pass beep
/go send it
;done
JSR Diag_macro
LDA #33
Half_delay
Port_C
•Motor_cal
DiarF4b
JSR
/ LDA
/ AND
BNE
LDA #2
Diag_macro
DiagF5
JSR
JMP
DiagF4b:
/ fail beep
;go send it
LDA #3
JSR Diag_macro
/
/send motor to
Port_C
#Touch_fmt
DiagF5
mouth open for feed sw test
/get I/O
/wait for switch
/loop
DiagFS:
LDA
AND
BNE
#6 /feed position
/send it
LDA
JSR Diag_macro
/
DiagF6:
/ ck for feed sw, all other sw * error
/ Remember to test invert before setting feed sw test, else conflict.
LDA •00
rcle«r teed sw enable
/get I/O
/ck for front and back switches made
/ck both are clear
/wait till are
DAC2
Port_C
•OCh
•OCh
DiagF6a
S^A
LDA
AND
CMP
BNE
Page 6 A-121
----------------------- Page 123-----------------------

Diag7.asm
LDA Port_D /get I/O
;ck f.tilt and
-nvert
/if either hi then wait till clear
/jump when all clear
AND •03
DiagF t
DiagF6b
BNL
JMP
DiagF6a:
LDA #3 /fail beep when any other switch made
/send it
/loop
JSR Diag_jnacro
JMP DiagF6
DiagF6b:
;mod diag6 / inc random number seeds until feed switch down
Seed_l
TMA_LSB
Seed 2
/create random based on switches
/get timer A also (should be unknown)
/save it
INC
LDA
STA
/end mod
•FFh
DAC2
LDA /turn DAC2 on to enaole feed switch
/out
/get I/0
zck if feed switch closed
/loop until switch closed
STA
LDA Port__D
•Ball__invert
DiagF6
AND
EEQ
LDA •00
/clear feed sw enable
/pass beep
/go send motor/speech
STA DAC2
LDA •7
JSR Diag_macro
/
DiagF7: /Light sensor test
/mod to compensate for new light sense routine
/clear light timer to force new reff cycle
/set it
/get system
/make this pass a new light reft
/update
/go get light level, establish 1st level
LDA #00
Light_timer
Stat_3
#Lt_reff
Stat_3
Get_light
STA
LDA
ORA
STA
JSR
LDA Stat_4
•Nt_do_lt_dim
Stat_4
//
clear indicating change > reff level
/update system
AND
STA
/go get light level sanple
/get new count
/update system
Get_light
TEMPI
Light_reff
JSR
LDA
STA
Diag*7a:
/go get again and test for lower level
/get system
. -heck if went dimmer
/loop if no change
/pass beep and motor motion
/send it
Get_light
Stat_4
•Do_lght_dim
DiagF7a
JSR
LDA
AND
BEQ
LDA •6
JSR Diag__n»cro
/
DiagF8: /Sound sensor test
•00
Sound_timer
Stat_l
•Snd_reff
/clear sound timer to force new reff cycle
/set
/get system again
/make this pass a new sound reff
LDA
STA
LDA
ORA
Page 7 A-12+
----------------------- Page 124-----------------------

Diag7.asm
STA Stat_l
Get_sound
Stat__4
•Nt__do_snd
Stat 4
/update
JSR /go get light level, establish 1st level
LDA /
AND /clear indicating change > reff level
STA /update system
DiagF8a:
Oet_sound
Stat_4
#Do_snd
DiagFSa
JSR /go get again and test for lower level
/get system
/check if went louder
/loop if no change
/pass beep and motor motion
/send it
LDA
AKJ
BEQ
LDA •9
JSR Diag_jnacro
/
DiagF9: /wait for I.R. data received
LDX #10 / /Tracker change, orginal is 100
DiagF9al:
LDA #1
JSR Half_delay
DEX
BNE DiagF9al
/go ck for data
/ /loop until data receive
/is it the expected data
;junp if wrong data
/ pass beep and motor motion
/ send it
/done
JSR D_IR_test
DiagF9
#A5H
DiagF9a
BCC
CMP
BNE
LDA •1
Diag_macrcDiagFlO
JSR
JMP
DiagF9a:
#3 /fail beep and motor motion
/send it
LDA
JSR Diag__macro
/all tests complete, send to sleep mode
#10
Half_delay
DiagFIC:
LDA /
JSR ;
/put furby in sleep postion
/send it
#10
Diag_macro
LDA
JSR
/ Clear RAM to 00H
/ we dont clear Seed_l or Seed_2 since they are randomized at startup.
/
#00H
#D7h
/ data for fill
/ start at ram location
LDA
LDX
Clear:
00,X / base 00, offset x
/ next ram location
/ check for end
/ branch, not finished
STA
DEX
#7FH
Clear
CPX
BNE
; ;
Random voice selection here
LDA 80h /get random/sequential split
Page 8 A-123
----------------------- Page 125-----------------------

Diag7.asm
STA IN_DAT ;savo for random routine
#00 ;make sure only gives random
;get number of random selections
/go get random selection
LDX
•10b
Ran_seq
LDA
JSR
TAX
Voice_table,X
Rvoice
/get new voice
/set new voice jitch
LDA
STA
; /
On power up or reset, Furby must go select a new name i » * ahw how cute.
Random
#lFh
Name
JSR /
/get 32 possible
/set new name oointer
AND
STA
/
;insure not hungry or sick
/max not hungry
/Max not sick
#FFh
,F’
-ingry_counter
,.ck_crunter
LDA
STA
STA
/ Clear training or all sensors
LDA #00
STA <a*P_ID
STA Temp_ID2
Tilt_learned
Tilt_lm_.cnt
STA
STA
Feed_learned
Feed_lm._ cnt
STA
STA
Light_leamed
Light_lm_cnt
STA
STA
Dark_learned
Dark_lm_cnt
STA
STA
Front_learned
Front_.lm._ cnt
STA
STA
Sound_learned
Sound_1m_cnt
STA
STA
Wake_leamed
Wake_lm_cnt
STA
STA
Invert_learned
Ir .vert_lm_cnt
STA
STA
JMP OoToSleep /write ee memory YO '
Page 9 A-124
----------------------- Page 126-----------------------


----------------------- Page 127-----------------------

; Furby27.inc ;; change twinkle egg song to one pass in macro
Lowered voice*10,voice+9 to voice+8
Wayne's mods:
FurbySb.inc * add voice selection table
; Dave•s
; added feed (mouth open)
; 170,171 ,173,174,175,182,183,190,191,194
j mod foi ir
; NOW 24 NAMES
TABLES MACRO |SAY
2-64
65-83
;FRONT
;FORTUNE
;o-too-mah
;HANGOUT
;delay
;FEED
;WAKE
;HUNGER
•INVERT
;BACK
;SICK
;LIGHT
;DARK
;SOUND
;TILT
1-61
b2-78
84
85
-101 79-106
W
lOb-123
124-156
157
-168
169-192
193-236
237-250
251
-265
266
-289
290-309
310
-350
102
103
-145
146-169
170-201
202-238
239-275
276-292
293-307
308
-331
332-351
352
-392
393
-429 351-390
50 TICKLE,196 PET,71 SOUND,391 LIGHT,198 PURR
392 NO LIGHT, 393 LOUD SOUND
115,116
98,99,100
IR
430-434
435.436
437.436
95,96,97
jFURBY SAYS
.*
; hide and seek sounds
*,
hide and seek reuse
439 ; iarby says win sound
Diagnostic 440-450
451,452
400-410
117,118
399,395,110
399.395.396
399,395,112
399.395.397
399,395,114
399,395,117
399.395.398
399,31*5,120
; hide and seek rounds
453 ; me koko (more)
(very)
(good)
me do-moh (please)
me toh
-dye (done)
(no)
me toh-loo (li/.e)
me ay-tay (hungry)
delay 1.3 seconds
me way-loh (sleep)
(up)
(light)
(me)
(big)
(worry)
(down)
;Names
454 ; me meme
455 ; me e-day
456
457
458 me boo
459
460
399
399,395,131
399,395,143
399,395,145
399,395,152
399,395,166
399,395,175
399,395,177
; 461
462 me u-tye
me ay-loh
me kah
me dah
me boh-bay
me nah-bah
463
464
465
466
467
NEW EASTER EGGS
468 ; DODLE DO, ME LOVE YOU
; SING A SONG
; BURB ATTACK
469
470
; furby says win sound
; furby says lose sound
471
472 |46
A-126
----------------------- Page 128-----------------------

473 53,123 ; me done (leaving any game)
; LISTEN ME
; HIDE ME (hide and seek)
; aaah.aaah,aaah feed dmh
;
474 394
475 411
412
MORE NAMES
476 399,395,186
399,395,194
399,395,201
399,->95,208
359,315,224
399,3
- 5,228
395.395.398.152
399
,395,152,166
399.395.224.152
; me loo-loo (joke)
; me ah-may (pet)
; me noo-loo (happy)
; me may-may (love)
; me may-1ah (hug)
; me dah-noh-lah (big dance)
; me toh-loo-ka
; me ka-da
; me may-lah-ka
;
477
478
479
480
481
482 (like me)
(roe big)
(hug me)
483
484
;
;not used 476-511 [413-510
TRAP FOLLOW MACROS FOR NAME
; SENSOR
; HANGOUT 97
; WAKE-UP 149
; BACK 248
; LIGHT BRIGHT 305
; IR 393.404.414.421
;;
GAMES
; FORTUNE 69,77
; HIDE AND SEEK 475
; FURBV SAYS 474
;
end trap macros for name
reused ; reused ; reused ; reused ; reused
72,380 | ; furby says win sounds
; LAUGH
; me (for use with names)
; reused for dance easter egg
15 15
395
DANCE 407,416 367,376
not used [396-399
; Sensor tables
; Each sensor has 4 speech/motor tables based on age 1-4, of 16 entries
each.
; These tables are 16 bit entries, the user enters as a decimal 1-511
'00' is illegal
This number calls the MACRO tables to get specific speech and motor
tables. MACRO tables chain together multiple motor and speech tables.
The first 8 entries of speech is random selections and
the second 8 entries is sequential.
**** **••
one of three voice pitCi* selections, randomly load table and
table is randomly called on power up to select a new voice.
THis gives a number added to voice 3 to create which voice will be
A 127
----------------------- Page 129-----------------------

used.
Voice_tabie:
S__voicel
S_voice2
S_voice3
S_ oicel
S_voice2
5_voice3
S_voicel
S_voice2
S_voice3
S_voicel
S__voice2
S_voice3
S_voicel
S_voice2
S__voice3
S_voicel
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
;Ball tilt sensor table
;DO TILT
Tilt_Sl: DW 352 •1 AGE 1
DW 353 «2 AGE 1
DW 354 #3 AGE 1
DW 352 «4 AGE 1
DW 355 *5 AGE 1
DW 356 *6 AGE 1
DW 357 •7 AGE 1
«8 AGE
«9 AGE
«10 AGE
«11 AGE
«12 AGE
«13 AGE
«14 AGE
«15 AGE
«16 AGE
DW 358 1
L 759 1 *.
DW 360 1
DW 361 1
DW 362 1
DW 363 1
DW 352 1
DW 364 1
DW 365 1
»1 AGE 2
#2 AGE 2
«3 AGE 2
»4 AGE 2
«5 AGE 2
«6 AGE 2
«7 AGE 2
«8 AGE 2
«9 AGE 2
*10 AGE 2
*11 AGE 2
*12 AGE 2
*13 AGE 2
*14 AGE 2
*15 AGE 2
«16 AGE 2
Tilt_S2: DW 366
DW 367
DW 366
DW 355
DW 368
DW 357
DW 369
DW 370
DW 359
DW 360
DW 371
DW 372
DW 373
DW 374
DW jr5
DW 37c
Tilt_S3: DW ; «1 AGE 3
; «2 AGE
36<
DW 355 3
A-128
----------------------- Page 130-----------------------

DW 376 #3 AGE 3
*4 AGE 3
»5 AGE 3
#6 AGE 3
#7 AGE 3
#8 AGE 3
#9 AGE 3
#10 AGE 3
#11 AGE 3
#12 AGE 3
#13 AGE 3
#14 AGE 3
#15 AGE 2
#16 AGE 3
DW 377
DW 378
DW 379
DW 380
DW 381
DW 382
DW 383
DW 384
DW 385
DW 365
DW 375
DW 363
DW 386
Tilt_S4: DW 366 #1 AGE 4
#2 AGE 4
#3 AGE 4
#4 AGE 4
#5 AGE 4
«6 AGE 4
#7 AGE 4
#8 AGE 4
#9 AGE 4
» 10 AGE 4
#11 AGE 4
«12 AGE 4
#13 AGE 4
«14 AGE 4
#15 AGE 4
#16 AGE 4
DW 355
DW 387
DW 377
DW 388
DW 389
DW 380
DW 381
DW 382
DW 383
DW 390
DW 385
DW 391
DW 375
DW 384
DW 392
;
Sick_Sl:
276 #1 AGE 1
#2 AGE 1
#3 AGE 1
#4 AGE 1
#5 AGE 1
#6 AGE 1
#7 AGE 1
#8 AGE 1
#9 AGE 1
#10 AGE 1
#11 AGE 1
#12 AGE 1
#13 AGE 1
#14 AGE 1
#15 AGE 1
#16 AGE 1
DW
DW 280
DW 283
DW 286
DW 288
DW 288
DW 289
DW 290
DW 291
DW 292
DW 288
DW 288
DW 289
DW 290
DW 291
DW 292
Sick_S2:
; «1 AGE 2
; #2 AGE 2
; #3 AGE 2
; #4 AGE 2
; #5 AGE 2
; #6 AGE 2
; #7 AGE 2
; #8 AGE 2
DW 277
DW 280
DW 284
DW 286
DW 288
DW 288
DW 289
DW 290
AT12»
----------------------- Page 131-----------------------

DW 291 #9 AGE 2
»10 AGE 2
111 AGE 2
112 AGE 2
113 AGE 2
114 AGE 2
115 AGE t
#16 AGc, 2
DW 292
DW 28b
DW 288
DW 289
TO 290
TO 291
TO 292
Sick_S3:
TO 276 #1 AGE 3
#2 AGE 3
#3 AGE 3
*4 AGE 3
#5 AGE 3
#6 AGE 3
#7 AGE 3
#8 AGE 3
#9 AGE 3
#10 AGE 3
#11 AGE 3
#12 AGE 3
#13 AGE 3
#14 AGE 3
#15 AGE 3
« 16 AGE 3
TO 281
DW 285
DW 287
TO 288
TO 288
TO 289
TO 290
TO 291
TO 292
TO 288
TO 288
TO 289
TO 290
TO 291
DW 292
Sick__S4:
TO 279 ; #1 AGE 4
; «2 AGE 4
; #3 AGE 4
; #4 AGE 4
AGE 4
«6 AGE 4
•7 AGE 4
#8 AGE 4
#9 AGE 4
#10 AGE 4
#11 AGE 4
#12 AGE 4
#13 AGE 4
«14 AGE 4
#15 AGE 4
#16 AGE 4
TO 282
TO 285
TO 287
TO 288 #5
DW 288
TO 289
TO 290
DW 291
DW 292
TO 280
DW 288
DW 289
DW 290
DW 291
DW 292
; SWITCH FOR DO SOUND) js
Sour.d
.
Sl: TO 332 #1 AGE 1
#2 AGE 1
#3 AGE 1
#4 AGE 1
•5 AGE 1
#6 AGE 1
#7 AGE 1
#8 AGE 1
#9 AGE 1
#10 AGE 1
#11 AGE 1
TO 3?3
TO 334
TO 335
DW 336
TO 337
DW 338
DW 339
TO 332
TO 333
TO 334
A-130
----------------------- Page 132-----------------------

DW 335 #12 AGE 1
#13 AGE 1
#14 AGE 1
#15 AGE 1
#16 AGE 1
DW 336
DW 337
DW 338
DW 339
Sound__S2: DW 332 #1 AGE 2
DW 333 «2 AGE 2
DW 340 #3 AGE 2
DW 341 #4 AGE 2
DW 342 #5 AGE 2
DW 337 «6 AGE 2
DW 343 #7 AGE 2
DW 344 «8 AGE 2
DW 332 #9 AGE 2
DW 333 #10 AGE 2
DW 340 # 1 1 AGE 2
DW 341 #12 AGE 2
D-.T 342 #13 AGE 2
DW 337 #14 AGE 2
DW 343 #15 AGE 2
DW 344 #16 AGE 2
Sound_S3: DW 332 #1 AGE 3
DW 333 #2 AGE 3
DW 345 #3 AGE 3
DW 346 #4 AGE 3
DW 342 #5 AGE 3
DW 337 #6 AGE 3
DW 347 #7 AGE 3
DW 339 #8 AGE 3
DW 332 #9 AGE 3
DW 333 #10 AGE 3
DW 345 #11 AGE 3
DW 346 #12 AGE 3
DW 342 #13 AGE 3
DW 337 #14 AGE 3
DW 347 #15 AGE
#16 AGE
3
DW 339 3
Sound_S4: DW 348 #1 AGE 4
DW 333 #2 AGE 4
DW 349 #3 AGE 4
DW 346 #4 AGE 4
DW 342 #5 AGE 4
DW 350 #6 AGE 4
DW 347 #7 AGE 4
DW 351 #8 AGE 4
DW 348 #9 AGE 4
DW 333 #10 AGE 4
DW 349 #11 AGE 4
#12 AGE 4
#13 AGE 4
#14 AGE 4
#15 AGE 4
#16 AGE 4
DW 346
DW 342
DW 350
DW 347
DW 351
A-131
----------------------- Page 133-----------------------

DO HUNGER
Hunger_Sl:
DW 170 #1 AGE 1
AGE 1
AGE 1
DW 1"3 #2
DW 176 «3
DW 180 <14 AGE 1
DW 182 «5 AGE 1
DW 173 «6 AGE 1
DW 185 «7 AGE 1
DW 189 #8 AGE 1
DW 193 «9 AGE 1
DW 194 *10 AGE 1
DW 173 *11 AGE 1
DW 195 *12 AGE 1
DW 189 *13 AGE 1
DW 193 *14 AGE 1
DW 194 *15 AOF 1
DW 199 *16 AGE 1
Hungcr .S2:
DW 171 *1 AGE 2
DW 174 *2 AGE 2
177 *3 AGE 2
AGE 2
DW
DW 181 *4
DW 183 *5 AGE 2
DW 174 «6 AGE 2
DW 186 *7 AGE 2
DW 190 *6 AGE 2
DW 193 *9 AGE 2
DW 194 *10 AGE 2
DW 174 *11 AGE 2
DW 196 *12 AGE 2
DW 190 *13 AGE 2
DW 193 #14 AGE 2
DW 194 #1** AGE 2
DW 200 #16 AGE 2
Hunger_S3:
DW 172 #1 AGE 3
DW 174 #2 AGE 3
DW 178 #3 AGE 3
DW 181 #4 AGE >
DW 184 #5 AGE 3
DW 175 #6 AGE 3
DW 187 *7 AGE 3
DW 191 «8 AGE 3
DW 193 #9 AGE 3
DW 173 #10 AGE 3
DW 175 #11 AGE 3
DW 197 *12 AGE 3
DW 191 #13 AGE 3
DW 193 *14 AGE 3
DW 173 »15 AGE 3
DW 200 «16 AGE 3
Hunger__S4:
171 ; «1
; #2
AGE 4
AGE 4
DW
DW 175
A-132
----------------------- Page 134-----------------------

DW 179 ; #3 AGE 4
; #4 AGE 4
; #5 AGE 4
; »6 AGE 4
; «7 AGE 4
, «8 AGE 4
; #9 AGE 4
; #10 AGE 4
; #11 AGE 4
; #12 AGE 4
; #13 AGE 4
; #14 AGE 4
; #15 AGE 4
; #16 AGE 4
DW 181
DW 184
DW 175
DW 188
DW 192
DW 194
DW 193
DW 174
DW 198
DW 192
DW 193
DW 194
DW 201
; Fortune teller game
;GEORGE 07/04/98
Fortyes_Sl:
MACRO 65
-83,SAY 62-78
DW 065 #1 AGE 1
#2 AGE 1
#3 AGE 1
#4 AGE 1
#5 AGE 1
#6 AGE 1
#7 AGE 1
#8 AGE 1
#9 AGE 1
#10 AGE 1
#11 AGE 1
#12 AGE 1
#13 AGE 1
#14 \GE 1
#15 rxGE 1
#16 AGE 1
DW 066
r»* 067
DW 068
DW 069
DW C70
DW 071
DW 072
DW 073
DW 074
DW 075
DW 076
DW 077
DW 078
DW 079
DW 080
Fortyes_S2:
081 #1 AGE 2
#2 AGE 2
#3 AGE 2
#4 AGE 2
#5 AGE 2
#6 AGE 2
#7 AGE 2
#8 AGE 2
#9 AGE 2
#10 AGE 2
#11 AGE 2
#12 AGE 2
« 1 *» AGE 2
#14 AGE 2
#15 AGE 2
#16 AGE 2
DW
DW 082
DW 083
DW 065
DW 066
DW 067
DW 068
DW 069
DW 070
DW 071
DW 072
DW 073
DW 074
DW 075
DW' 076
DW 077
END FORTUNE
END GEORGE 07/04/98
A-133
----------------------- Page 135-----------------------

; touch front sensor table
;GEORGE 07/03/98 MACRO 2-64 , SAY 1-61
Tfrnt SI: DW 002 «1 AGE
# 2 AGE
*3 AGE
«4 AGE
#5 AGE
*6 AGE
# 7 AGE
#8 AGE
# 9 AGE
#10 AGE
#11 AGE
#12 AGE
#13 AGE
#14 AGE
#15 AGE
#16 AGE
1
DW 003 1
DW 004 1
DW 005 1
DW 006 1
DW 007 1
DW 0^ 8 1
DW 0 9 1
DW 10 1
DW 11 1
DW t 12 1
DW 013 1
DW 014 1
DW 015 1
DW 016 1
DW 017 1
T£rnt_S2 : DW 018 #1 AGE 2
# 2 AGE
# 3 AGE
# 4 AGE
# 5 AGE
# 6 AGE
# 7 AGE
# 8 AGE
# 9 AGE
»10 AGE
#11 AGE
#12 AGE
#13 AGE
#14 AGE
#15 AGE
#16 AGE
DW 019 2
DW 0 2 0 2
DW 021 2
DW 022 2
DW 023
DW 024 2
DW 025 2
DW 026 2
DW 027 2
DW 026 2
DW 029 2
DW 030 2
DW 031 2
DW 032 2
DW 033 2
Tfrnt_S3: DW 034 #1 AGE 3
DW 035 # 3
- AGE
036 # 2 AGE 3
# 4 AGE
# 5 AGE
# 6 AGE
# 7 AGE
025 ; #8
#9 AGE
#10 AGE
#11 AGE
# 12 AGE
#13 AGE
#14 AGE
#15 AGE
#16 AGE
DW
DW 037 3
DW 038 3
DW 039 3
DW 040 3
DW 041 AGE 3
DW 002 3
DW 042 3
DW 043 3
DW 044 3
DW 045 3
DW 046 3
DW 047 3
DW 048 3
Tf mt_S4: DW 049 #1 AGE
#2 AGE
#3 AGE
# 4 AGE
#5 AGE
# 6 AGE
#7 AGE
4
DW 050 4
DW 051 4
DW 052 4
DW 053 4
DW 054 4
DW 055 4
A-134
----------------------- Page 136-----------------------

DW 056 ; #8 AGE 4
; #9 AGE 4
; #10 AGE 4
; #11 AGE 4
; #12 AGE 4
; #13 AGE 4
; #14 AGE 4
; #15 AGE 4
; «16 AGE 4
DW 057
DW 058
DW 059
DW 060
DW 061
DW 062
DW 063
DW 064
;END GEORGE 07/03/98
;feed sense table
; DO FEED (Do 1INVERT)
;GEORGE 07/05/98
Feed_Sl:
DW 117 #1 AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
#10 AGE 1
#11 AGE 1
#12 AGE 1
#13 AGE 1
#14 AGE 1
#15 AGE 1
#16 AGE 1
DW 103 #2
DW 104 #3
DW 105 «4
DW 106 #5
DW 107 #6
DW 108 #7
DW 109 #6
DW 110 #9
DW 1 1 1
DW 112
DW 113
DW 114
DW 111
DW 115
DW 116
Feed__S2:
118 #1 AGE 2
#2 AGE 2
#3 AGE 2
#4 AGE 2
#5 AC’ 2
#6 AGE 2
#7 AGE 2
#8 AGE 2
#9 AGE 2
#10 AGE 2
«11 AGE 2
#12 AGE 2
#13 AGE 2
#14 AGE 2
#15 AGE 2
#16 AGE 2
DW
DW 119
DW 120
DW 121
DW 122
DW 123
DW 124
DW 125
DW 126
DW 127
DW 128
DW 113
DW 114
Efts’ 111
DW 129
DW 116
Feed S3:
118 ; #1 AGE 3
; #2 AGE 3
; #3 AGE 3
; #4 AGE 3
; #5 AGE 3
DW
DW 130
DW 131
DW 132
DW 122
A-135
----------------------- Page 137-----------------------

DW 107 «6 AGE
•7 AGE
*8 AGE
«9 AGE
#10 AGE
#11 AGE
#12 AGE
#13 AGE
•14 AGE
#15 AGE
#16 AGE
3
DW 133 3
DW 134 3
DW 110 3
DW 111 3
DW 135 3
DW 113 3
DW 114 3
DW 111 3
DW 135 3
DW 116 3
Feed_S4:
DW 145 #1 AGE
#2 AGE
#3 AGE
#4 AGE
#5 AGE
#6 AGE
#7 AGE
#8 AGE
#9 AGE
#10 AGE
#11 AGE
#12 AGE
#13 AGE
# 14 AGE
#15 AGE
#16 AGE
4
DW 136 4
DW 137 4
DW 138 4
DW 139 4
DW 140 4
DW 141 4
DW 142 4
DW 110 4
DW 111 4
DW 143 4
DW 113 4
DW 114
DW 111 4
DW 144 4
DW 116 4
;END GEORGE 07/05/98
;touch front sensor table
; DO WAKE
Wakeup_Sl:
;DONE SG
146 # 1 AGE 1
#2 AGE
#3 AGE
•4 AGE
#5 AGE
#6 AGE
#7 AGE
#8 AGE
#9 AGE
#10 AGE
#11 AGE
#12 AGE
#13 AGE
#14 AGE
#15 AGE
#16 AGE
DW
D:* 149 1
DW 150 1
DW 154 1
DW 158 1
DW 159 1
DW 163 1
DW 166 1
DW 146 1
DW 149 1
DW 150 1
DW 154 1
DW 158 1
DW 159 1
DW 163 1
DW 166 1
147 ; # 1 AGE 2
#2 AGE 2
#3 AGE 2
•4 AGE ^
#5 AGE 2
#6 AGE 2
#7 AGE 2
#8 AGE 2
#9 AGE 2
#10 AGE 2
Wakeup_S2: DW
DW 149
DW 151
DW 155
DW 158
DW 160
DW 163
DW 167
DW 147
DW 149
A-136
----------------------- Page 138-----------------------

DW 151 »11 AGE 2
#12 AGE 2
#13 AGE 2
»14 AGE 2
#15 AGE 2
#16 AGE 2
DW 155
EW 158
DW 160
DW 163
DW 167
Wakeup_S3: DW 148 ; #1 AGE 3
; #2 AGE 3
; »3 AGE 3
; #4 AGE 3
• #5 AGE 3
; #6 AGE 3
; #7 AGE 3
; #8 AGE 3
; #9 AGE 3
; #10 AGE 3
; #11 AGE 3
; #12 AGF 3
; #13 AGE 3
; #1'AGE 3
; #:^ AGE 3
; #16 AGE 3
DW 149
rw 152
DW 156
DW 158
DW 161
DW 164
DW 168
DW 148
DW 149
DW 152
DW 15c
DW 158
DW 161
DW 164
DW 168
Wakeup_S4: DW 148 ; #1 AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
#10 AGE 4
#1* AGE 4
#12 AGE 4
#13 AGE 4
#14 AGE 4
#15 AGE 4
#16 AGE 4
DW 14* #2
DW 153 #3
DW 157 #4
DW 158 #5
DW 162 #6
DW 165 #7
DW 169 #8
DW 148 #9
DW 149
DW 153
DW 157
DW 158
DW 162
DW 16.
DW 169
Ball tilt sensor taole
DO TILT (HANGING 01"")
START HANGOUT MACRO *5-101,SAY 79-106
GEORGE 07/04/98
; DO HANGOUT
? DO BORED
Bored_Sl: ;bored time out
; #1 AGE 1
#2 AGE 1
#3 AGE 1
#4 AGE 1
#5 AGE 1
#6 AGE 1
#7 AGE 1 /sleep
»8 \GE 1
#9 AGE 1 ;dobedo
#10 AGE 1 ;yawn
DW 085
DW 086
DW 087
DV 088
DW 089
DW 090
DW 091
DW 092
DW 093
DW 094
A-137
----------------------- Page 139-----------------------

DW 095 #11 AGE 1 ;sigh
#12 AGE 1 ;sigh
#13 AGE 1 ;haa
#14 AGE 1 ;sleep wa*. 96 dmh
#15 AGE 1 ;heey
#16 AGE 1 ;phone
DW 095
DW 096
DW 091
DW 097
DW 098
Bored_S2: DW 085 #1 AGE 2
#2 AGE 2
•3 AGE 2
«4 AGE 2
#5 AGE 2
#6 AGE 2
#7 AGE 2
#8 AGE 2
#9 AGE 2
#10 ACE 2
#11 AGE 2
#12 AGE 2
#13 AGE 2
#14 AGE 1 ;sleep was 96 dmh
#15 AGE 2
#16 AGE 2
DW 086
DW 087
DW 088
DW 089
DW 099
DW 091
DW 092
DW 093
DW 094
DW 095
DW 095
DW 096
DW 091
DW 097
DW 098
Bored_S3: DW 085 ; #1 AGE 3
; #2 AGE 3
; #3 AGE 3
; #4 AGE 3
; #5 AGE 3
; #6 AGE 3
; #7 AGE 3
; #8 AGE 3
; #9 AGE 3
; «10 AGE 3
; #11 AGE 3
; #12 AGE 3
; #13 AGE 3
; #14 AGE 1 ;s1eep was 96 dmh
; #15 AGE 3
; #16 AGE 3
DW 086
DW 087
DW 088
DW 101
DW 100
DW 091
DW 092
DW 093
DW 094
DW 095
DW 095
DW 096
DW 091
DW 097
DW 098
Bored_S4: DW 085 #1 AGE 4
#2 AGE 4
#3 AGE 4
*4 AGE 4
#5 AGE 4
#6 AGE 4
#7 AGE 4
•8 AGE 4
•9 AGE 4
#10 AGE 4
«11 AGE 4
«12 AGE 4
•13 AGE 4
#14 AGE 1 ;sleep was 96 dmh
#15 AGE 4 FIXED DMH WAS 96
#16 AGE 4
DW 086
DW 087
DW 088
DW 101
DW 100
DW 091
DW 092
DW 093
DW 094
DW 095
DW 095
DW 096
DW 091
DW 097
DW 098
;END HANGOUT
;END GEORGE 07/04/98
A-138
----------------------- Page 140-----------------------

;GEORGE 07/07/98
;INVERT
;Ball invert sensor table
Invrt_Sl: DW 202 ; il AGE 1
; «2 AGE 1
; «3 AGE 1
; «4 AGE 1
; #5 AGE 1
; «6 AGE 1
; *7 AGE 1
; «8 AGE 1
; #9 AGE 1
; #10 AGE 1
; #11 AGE 1
; #12 AGE 1
; #13 AGE 1
; #14 AGE 1
; #15 AGE 1
; #16 AGE 1
DW 203
DW 206
DW 208
DW 212
DW 213
DW 217
DW 219
DW 220
DW 224
DW 228
DW 232
DW 234
DW 232
DW 234
DW 235
Invrt S2: DW 202 ; #1 AGE 2
; #2 AGE 2
#3 AGE 2
; #4 AGE 2
; #5 AGE 2
? #6 AGE
; #7 AGE 2
; #8 AGE 2
; #9 AGE 2
; #10 AGE 2
; # 11 AGE 2
; #12 AGE 2
; #13 AGE 2
; #14 AGE 2
; #15 AGE 2
#16 AGE 2
DW 203
DW 207 ;
DW 209
DW 212
DW 214
DW 217
DW 219
DW 221
DW 225
229
DW 232
DW 234
DW 232
DW 234
DW 236 ;
Invrt_S3: DW 202 AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
Ac. 3
AGE 3
AGE 3
? #1
; #2
J #3
; #4
; #5
? *» o
; #7
; #8
? #9
; #10 AGE 3
; #11 AGE 3
; #12 AGE 3
; #13 AGE 3
; #14 AGE 3
; #15 AGE 3
; #16 AGE 3
DW 204
DW 207
DW 210
DW 212
DW 215
DW 218
DW 219
DW 222
DW 226
DW 230
DW 232
DW 234
DW 232
DW 234
DW 237
Invrt_S4: DW 202 #1 AGE 4
•2 AGE 4
#3 AGE 4
#4 AGE 4
DW 205
DW 207
DW 211
A-139
----------------------- Page 141-----------------------

D 212 #5 AGE 4
«6 AGE 4
•7 AGE 4
«8 AGE 4
#9 AGE 4
#10 AGE 4
#11 AGE 4
#12 AGE 4
#13 AGE 4
#14 AGE 4
•15 AGE 4
#16 AGE 4
t 1 216
DW 218
DW 219
DW 223
DW 227
EW 231
DW 233
DW 231
DW 233
DW 234
DW 238
GEORGE 07/07/98
BACK
touch back sensor table
Tback SI: DW 239 #1 AGE 1
DW 240 #2 AGE
#3 AGE
1
DW 244 1
DW 248 «4 AGE 1
DW 249 #5 AGE 1
DW 248 «6 AGE 1
DW 253 #7 AGE 1
DW 256 #8 AGE 1
DW 258 #9 AGE 1
DW 239 #1" AGE 1
DW 248 #11 AGE 1
DW 261 #12 AGE 1
DW 263 #13 AGE 1
DW 266 ; #14
; #15
; #16
AGE 1
DW 269 AGE 1
DW 272 AGE 1
Tback_S2: DW 239 J #1 AGE 2
DW 24: #2 AGE 2
DW 245 #3 AGE 2
DW 248 #4 AGE 2
DW 250 #5 AGE 2
DW 248 #6 AGE 2
DW 253 #7 AGE 2
DW 257 #8 AGE 2
DW 259 •9 AGE 2
DW 239 #10 AGE 2
DW 248 #11 AGE 2
DW 262 #12 AGE 2
DW 264 #13 AGE 2
DW 267 #14 AGE 2
DW 270 •15 AGE 2
DW 273 •16 AGE 2
Tback_S3: DW 239 » 1 AGE 3
DW 242 •2 AGE 3
DW 246 #3 AGE 3
#4 AGE 3
AGE 3
AGE 3
DW 248
DW 251 #5
DW 248 #6
DW 254 #7 AGE 3
DW 257 «8 AGE 3
DW 260 #9 AGE 3
A-140
----------------------- Page 142-----------------------

DW 239 #10 AGE 3
#11 AGE 3
«12 AGE 3
«13 AGE 3
«14 AGE 3
«15 AGE 3
«16 AGE 3
DW 248
DW 261
DW 265
DW 268
DW 271
DW 274
Tback_S4: DW 239 ; «1 AGE 4
; «2 AGE 4
; «3 AGE 4
; «4 AGE 4
; *5 AGE 4
; «6 AGE 4
; «7 AGE 4
; «8 AGE 4
; «9 AGE 4
; »10 AGE 4
; «11 AGE 4
; «12 AGE 4
; «13 AGE 4
; «14 AGE 4
; «15 AGE 4
; »16 AGE 4
DW 243
DW 247
DW 248
DW 252
DW 248
DW 255
DW 257
DW 260
DW 239
DW 248
DW 262
DW 265
DW 268
DW 271
DW 275
;END GEORGE 07/07/98
I.R. receive table
DO IR
IR SI: Dir; 393 «1 AGE 1
»2 AGE 1
»3 AGE 1
«4 AGE 1
*5 AGE 1
»6 AGE 1
#7 AGE 1
#8 AGE 1
«9 AGE 1
«10 AGE 1
•11 AGE 1
«12 AGE 1
•13 AGE 1
«14 AGE 1
«15 AGE 1
«16 AGE 1
DW 393
DW 393
DW 393
DW 394
DW 395
DW 396
DW 396
DW 291
DW 399
DW 399
DW 400
DW 401
DW 401
DW 402
DW 403
IR_S2: 404 «1 AGE 2
«2 AGE 2
•3 AGE 2
«4 AGE 2
»5 AGE 2
«6 AGE 2
«7 AGE 2
«8 AGE 2
•9 AGE 2
«10 AGE 2
«11 AGE 2
DW
DW 404
DW 404
DW 405
DW 405
DW 406
DW 407
DW 407
DW 291
DW 409
DW 409
A-141
----------------------- Page 143-----------------------

DW 400 ; «12 AGE 2
; «13 AGE 2
; «14 AGE 2
; «15 AGE 2
; «16 AGE 2
DW 411
DW 411
DW 412
DW 413
IR_S3: DW 414 ; *1
; «2
; «3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
«10 AGE 3
«11 AGE 3
#12 AGE 3
#13 AGE 3
#14 AGE 3
«15 AGE 3
#16 AGE 3
DW 414
DW 414
DW 414 «4
DW 414 #5
DW 415 «6
DW 416 #7
DW 416 •8
DW 291 «9
DW 408
DW 418
DW 428
DW 419
DW 419
DW 420
DW 403
421 #1 AGE 4
#2 AGE 4
«3 AGE 4
«4 AGE 4
«5 AGE 4
«6 AGE 4
#7 AGE 4
«8 AGE 4
#9 AGE 4
#10 AGE 4
#11 AGE 4
#12 AGE 4
«13 AGE 4
#14 AGE 4
#15 AGE 4
#16 AGE 3
IR_S4: DW
DW 421
DW 421
DW 421
DW 421
DW 422
DW 423
DW 423
DW 291
DW 425
DW 426
DW 427
DW 426
DW 428
DW 429
DW 413
*/
light sense table (bright sense)
;DO LIGHT
Light_Sl:
293 ; #1 AGE 1
; #2 AGE 1
; #3 AGE 1
; #4 AGE 1
; #5 AGE 1
; #6 AGE 1
; #7 AGE 1
; #8 AGE 1
; #9 AGE 1
DW
DW 305 ;003
DW 294
DW 295
DW 296
DW 297
DW 298
DW 299
DW 293
DW 305 ;003 ; #10 AGE 1
294 #11 AGE 1
#12 AGE 1
#13 AGE 1
#14 AGE 1
DW
DW 295
DW 296
DW 297
A * $2
----------------------- Page 144-----------------------

DW 298 ; #15 AGE 1
DW 299 ; #16 AGE 1
Light_S2:
DW 293 ; #1 AGE 2
DW 305 ;003 ; #2 AGE 2
DW 294 #3 AGE 2
»4 AGE 2
#5 AGE 2
«6 AGE 2
#7 AGE 2
»8 AGE 2
#9 AGE 2
DW 300
DW 296
DW 301
DW 298
DW 299
DW 293 ;
DW 305 ;003 ; »10 AGE 2
DW 294 #11 AGE 2
DW 295 •12 AGE 2
DW 296 •13 AGE 2
#14 AGE 2
#15 AGE 2
#16 AGE 2
DW 301
DW 298
DW 299
Light_S3:
DW 302 #1 AGE 3
DW 305 ;003 ; #2 AGE 3
DW 294 #3 AGE 3
#4 AGE 3
#5 AGE 3
#6 AGE 3
#7 AGE 3
DW 303
DW 296
DW 304
DW 298
DW 299 #8 AGE 3
DW 302 #9 AGE 3
DW 305 ;003 ; #10 AGE 3
DW 294 #11 AGE 3
#12 AGE 3
#13 AGE 3
#14 AGE 3
#15 AGE 3
#16 AGE 3
DW 303
DW 296
DW 304
DW 298
DW 299
Light_S4:
DW 302 #1 AGE 4
DW 305 ;003 ; #2 AGE 4
DW 294 #3 AGE 4
«4 AGE 4
#5 AGE 4
#6 AGE 4
#7 AGE 4
»8 AGE 4
«9 AGE 4
;
DW 306 ;
DW 296 ;
DW 307 ;
DW 298 ;
DW 299 ;
DW 302 ;
DW 305 ;003 ; #10 AGE 4
DW 294 #11 AGE 4
«12 AGE 4
#13 AGE 4
#14 AGE 4
#15 AGE 4
#16 AGE 4
DW 306 ;
DW 296
DW 307
DW 298 ;
DW 299 ;
light sense table (DARK SENSE)
DO DARK
A-143
----------------------- Page 145-----------------------

; DO LIGHT DARKER
Dark_Sl: DW 308 *1 AGE 1
DW 309 *2 AGE 1
DW 310 113 AGE 1
DW 311 »4 AGE 1
DW 312 #5 AGE 1
DW 313 «6 AGE 1
DW 314 *7 AGE 1
DW 315 #8 AGE
»9 AGE
1
DW 308
DW 309 »10 AGE 1
DW 310 «11 AGE 1
DW 311 «12 AGE 1
DW 312 «13 AGE 1
DW 313 «14 AGE 1
DW 314 *15 AGE 1
DW 315 »16 AGE 1
Dark_S2:
DW 316 *1 AGE 2
AGE 2
AGE 2
DW 317 «2
DW 318 »3
DW 311 «4 AGE 2
DW 319 »5 AGE 2
DW 313 «6 AGE 2
DW 320 «7 AGE 2
DW 315 «8 AGE 2
DW 316 «9 AGE 2
DW 317 »10 AGE 2
DW 318 »11 AGE 2
DW 311 *12 AGE 2
DW 319 »13 AGE 2
DW 313 »14 AGE 2
»15 AGE 2
»16 AGE 2
DW 320
DW 315
Dark_S3: DW 321 AGE 3
AGE 3
«1
DW 322 »2
DW 323 »3 AGE 3
DW 311 »4 AGE 3
DW 319 »5 AGE 3
DW 313 ; *6 AGE 3
DW 324 »7 AGE 3
DW 325 «8 AGE 3
DW 321 •9 AGE 3
322 »10 AGE
«11 AGE
»12 AGE
DW 3
DW 323 3
DW 311 3
DW 319 »13 AGE 3
313 *14 AGE 3
*15 AGE 3
*16 AGE 3
DW
DW 324
DW 325
Dark_S4: DW 326 »1 AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
DW 327 *2
DW 328 »3
DW 311 •4
329 ; *5
; »6
; »7
DW
DW 313
DW 330
A 144
----------------------- Page 146-----------------------

*o n
Q c
<D X
x X X Hi I a
w w
U> to M
g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g g a5
g g g cn g g g g g g g g g
o o o o o o o o o o o o o o o
o o o o o o o o o o o o o o o
o o o o o o o o o o o o o o o
o o o o o o o o o o o o o o o <r
o o o o o o o o o o o o o o o
o o o o o o o o o o o o o o o
o o o o o o o o o o
o o o o o o o o o o
o o o o o o o o o o
©X
o I Q U! O J U J U) U> U t U> L J U>
W W H W M W W M W
M O U M D H O J s l C M
o o
oo oo oo [5
rt>
r r
eM
ft)
y» M*) M H O
M M H H P H V O f B v J O U n f e U J M M
O l A U J t o H O
Ho'O C P -O W U A U J M H
> > > > > > > > > > > > > > >
o o o o o o o o o o o o o o o
W W W W W M n i M M r o M M M M W-
> > > > > > > > > > > > > > >
o o o o o o o o o o o o o o o
M M r o n W M M M M W M M M M Mt O K) h J t O t O t O K) t O W K) M t O M W M a
> > > > > > > > > >
O O O O O O O O O O
W W W W M W M W M M'*
U U U U U l U U U W U l #
*• »•
P M M M M M M M H M H M P H H *
(M f l A W M M O
o O O
> > > > > > > > >
O O O O
M W M W
A A A A A A A A A
> > >
O O Q O O
M W W W M
Q Q
tn m M
C J r o
I
ft
----------------------- Page 147-----------------------

DW 000
DW 000
DW 000
DW 000
DW 000
#11 AGE 3
•12 AGF 3
•13 AGE 3
•14 AGE 3
•15 AGE 3
Peek_S4: DW 000
DW 000
; #0 AGE 4
•1 AGE 4
•2 AGE 4
«3 AGE 4
•4 AGE 4
•5 AGE 4
•6 AGE 4
•7 AGE 4
•8 AGE 4
•9 AGE 4
«10 AGE 4
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
M * *
DW uuu W A A
000 #12 AGE 4
#13 AGE 4
#14 AGE 4
DW
DW 000
DW 000
DW 000 ; #15 AGE 4
Macro_grpl: ;pcints into macro tables
Tbll_Macro0
Tfcll_Macrol ,Tbll_Macro2,Tbll_Macro3,Tbll_Macro4,Tbll_Macro5
Tbll_Macro6,Tbll_Macro7,Tbll_Macro8,Tbll_Macro9,Tbll_MacrolO
Tbll_Macroll,Tbll_Macrol2,1bll__Macrol3,Tbll_Macrol4,Tbll_Macrol5
Tbll_Macrol6,Tbll_Macrol7,Tbll_Macrol8,Tbll_Macrol9,Tbll_Macro20
Tbll__Macro21,Tbll_Macro22,Tbll__Macro23,Tbll_Macro24,Tbll_Macro25
Tbll_Macro26,Tbll_Macro27,Tbll_Macro28,Tbll_Macro29,Tbll_Macro30
Tbll__Macro31,Tbll_Macro32,Tbll_Macro33,Tbll_Macro34,Tbll_M*crc35
Tbll_Macro36,Tbll_Macro37,Tbll_Macro38,Tbll_Macro39,Tbll_Macrc40
Tbll_Macro41,Tbll_Macro42,Tbll_Macro43 ,Tbll_ Macro44,Tbll__Macro45
Tbl1__Macro46,Tbll_Macro47,Tbll_Macro48,Tbll_Macro49,Tbll_Macrc50
Tbll_Macro51,Tbll_Mac~>52,Tbll_Macro53,Tbll__Macro54,Tbll_Macro55
Tbll_Macro56,Tbll_Mac. o57,Tbll_Macro58,Tbll_Macro59,Tbll__Macro60
Tbll_Macro61,Tbll_Macro62,Tbll_Macro63,Tbll_Macro64,Tbll_Macro65
Tbll__Macro66,Tbll_Macro67,Tbll_Macro68,Tbll_Macro69,Tbll__Macro70
Tbll__Macro71,Tbll_Macro72,Tbll_Macro73.Tbll_Macro74.Tbll_Macro75
Tbll_Macro76,Tbll__Kacro77,Tbl1_Macro78,Tbll_Macro79,Tbll_Macro80
Tbll__Macro81,TbllwMacro82,Tbll_Macro83,Tbll_Macro84,Tbll_Macro85
Tbll_Macro86,Tbll_Macro87,Tbll_Macro88,Tbll__Macro89,Tbll_Macro90
Tbll_Macro91,Tbll_Macro92,Tbll_Macro93,Tbll_Macro94 # Tbll_Macro95
Tbll_Macro96,Tbll_Macro97,Tbll_Macro98,Tbll_Macro99
Tbll_Macrol00,Tbl3_Macrol01,Tbll_Macrol02,Tbll_Macrol03,Tbll_Macro
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
104
DW Tbll__Macrol05,Tbll_Macrol06,Tbll_Macrol07,Tbll_Macrol08,Tbll_Macro
109
DW Tbll_Macrol10,Tbll_Macrol11,Tbll__Macrol12,Tbll_Macrol13,Tbll_Macro
114
DW Tbll_J!acroll5,Tbll__Macroll6,Tbll__Macroll7,Tbll_Macroll8,Tbll_Macro
119
DW Tbll_Macrol20,Tbll_Macrol21,Tbll__Macrol22,Tbll_Macrol23.Tbll_Macro
A-146
----------------------- Page 148-----------------------

124
DW Tbl1 Macrol25,Tbll_Macrol26,Tbll_Macrol27
Macro_grp2: .-points into macro tables
Tbl2_Macrol28
DW DW Tbl2__Macrol29,Tbl2_Macrol30,Tbl2_Macrol31,Tbl2_r rol32,Tbl2_Macro
133
DW Tbl2__Macrol34,Tbl2_Macrol35,Tbl2_Macrol36,Tbl2_Kacrol37,Tbl2_Macro
138
DW Tbl2_Macrol39.Tbl2_Macrol40 #Tbl2_Macrol41,Tbl2_Macrol42,Tbl2_Macro
143
DW Tfcl2_Macrol44,Tbl2_Macrol45.Tbl2_Macrol46,Tbl2_Macrol47,Tbl2_Macro
148
DW Tbl2_Macrol49,Tbl2_Macrol50.Tbl2_Macrol51,Tbl2_Macrol52,Tbl2_Macro
153
DW Tbl2_Macrol54,Tbl2_Macrol55,Tbl2_Macrol56,Tbl2_Macrol57,Tbl2__Macro
158
DW Tbl2_Macrol59,Tbl2_Macrol60,Tbl2_Macrol61 ,Tbl2_Macrol62,Tbl2_Macro
163
DW Tbl2_Macrol64,Tbl2_Macrol65,Tbl2_Macrol66,Tbl2_Macrol67,Tbl2_Macro
168
DW Tbl2_Macrol69,Tbl2_Macrol70,Tbl2_Macrol71,Tbl2_Macrol72,Tbl2_Mucro
173
DW Tbl2_Macrol74,Tfcl2_Macrol75,Tbl2_Macrol76.Tbl2_Macrol77,Tbl2_Macrc
178
DW Tbl2_Macrol79,Tbl2_Macrol80,Tbl2_Macrol81 ,Tbl2_Macrcl82,Tfcl2_l\acrc
183
DW Tbl2_Macrol84,Tbl2_MacrolB5,Tbl2_Macrol86,Tbl2__MacrolB7.Tbl2_Mecro
188
DW Tbl2_Macrol89.Tfcl2_Macrol90,Tbl2_Macrol91,Tbl2_Macrcl92,Tbl2_Macro
193
DW Tbl2_Macrol94,Tbl2_Macrol95,Tbl2_Macrol96,Tbi2_Macrol9.7,Tbl2_Macro
198
DW Tbl2_Macrol99,Tbl2_Macro200,Tbl2_Macro201 ,Tbl2_Macro202,Tbl2_Macro
203
DW Tbl2_Macro204.Tfcl2_Macro205,Tbl2_Macro206,Tbl2_Macro207.Tbi2_Kacro
208
DW Tbl2_Macro209,Tbl2_Macro210,Tbl2_Macro211 ,Tbl2_Macro212.Tbl2J-Iacrc
213
DW Tbl2_Macro214,Tbl2_Kacro215,Tbl2_Macro216,Tbl2_Macro217,Tbl2_Macrc
218
DW Tbl2_Macro219,Tbl2_Macro220 #Tbl2_Macro221,Tbl2_Macro222,Tbl2_Macro
223
DW Tbl2_Macro224,Tbl2_Macro225,Tbl2_Macro226,Tbl2_Macro227,Tbl2_Macro
228
DW Tbl2_Macro229,Tbl2_Macro230,Tbl2_Macro231,Tbl2_Macro232,Tbl2_Macro
233
DW Tbl2_Macro234,Tbl2_Macro235,Tbl2_Macro236.Tbl2_Macro237.Tbl2_Macrc
238
DW Tbl2_Macro239,Tbl2_Macro240,Tbl2_Macro241,Tbl2_Macro242.Tbl2_Macro
243
DW Tbl2_Macro244,Tbl2_Macro245,Tbl2_Macrc246.Tbl2_Kacro247,Tbl2_Macro
248
DW Tbl2_Macro249,Tbl2__Macro250,Tbl2__Macro251,Tbl2_Macro252,Tbl2_Macro
253
DW Tbl2_Macro254,Tbl2_Macro255
Macro_grp3: ; points into macro tables
A-147
----------------------- Page 149-----------------------

Tbl3_Macro256
Tbl3_
^Macro257,Tbl3_Macro258,Tbl3__Macro259,Tbl3_Macro260,Tbl3_Macro
DW
DW
261
DW Tbl3_Macro262,Tbl3_Macro263,Tbl3_Macro2u4,Tbl3_Macro265,Tbl3_Macro
266
DW Tbl3__Macro267,Tbl3__Macro268,Tbl3__Macro269,Tbl3_ Macro270,Tbl3_Macro
271
DW Tbl3_Macro272,Tbl3_Macro273,Tbl3_Macro274,Tbl3_Macro275 # Tbl3_Macro
276
DW Tbl3_Macro277,Tbl3_Macro278,Tbl3_Macro279,Tbl3__Macro280,Tbl3_Macro
281
DW Tbl3_Macro282,Tbl3_?'acro283,Tbl3_Macro284,Tbl3_Macro285,Tbl3_Macro
286
DW Tbl3_Macro287,Tbl3__Macro288,Tbl3_Macro289,Tbl3JMacro290,Tbl3_Macro
291
DW Tbl3_Macro292,Tbl3_Macro293,Tbl3_Macro294,Tbl3_Macro295,Tbl3_Macro
296
DW Tbl3_Macro297,Tbl3_Macro298 # Tbl3_Macro299,Tbl3_Macro300,Tbl3_Macro
301
DW Tbl3_Macro302,Tbl3_Macro303,Tbl3_Macro304,Tbl3_Macrc305,Tbl3_Macro
306
DW Tbl3_Macro307,Tbl3_Macro308,Tbl3_Macro309,Tbl3_Macro310,Tbl3_Macro
311
DW Tbl3_Macro312,Tbl3_Macro313,Tbl3_Macro314,Tbl3_Macro315,Tbl3_Macro
316
DW Tbl3_Macro317,Tbl3_Macro318,Tbl3_Macro319,Tbl3_Macro320,Tbl3_Macro
321
DW Tbl3_Macro322,Tbl3_Macro323,Tbl3_Macro324,Tbl3_Macro325,Tbl3_Macrc
326
DW Tbl3_Macro327,Tbl3__Macro32S,Tbl3_Macro329,Tbl3_Macro330,Tbl3_Macro
331
DW Tbl3_Macro332,Tbl3_Macro333,Tbl3_Macro334,Tbl3_Macro335.Tbl3_Macro
336
DW Tbl3_Macro337,Tbl3_Macro338,Tbl3_Macro339,Tbl3_Macro340,Tbl3_Macro
341
DW Tbl3__Macro342,Tbl3_Macro343,Tbl3_Macro344,Tbl3__Macro345,Tbl3_Macro
346
DW Tbl3_Macro347,Tbl3_Macro348,Tbl3_Macro349,Tbl3_Macro350.Tbl3_Macro
351
DW Tbl3_Macro352,Tbl3_Macro353,Tbl3_Macro354,Tbl3_Macro355,Tbl3_Macrc
356
DW Tbl3_Macro357,Tbl3_Kacro358,Tbl3_Macro359,Tbl3_Macro360,Tbl3_Macro
361
DW Tbl3__Macro362,Tbl3__Macro363,Tbl3_Macro364,Tbl3_Macro365.Tbl3_Macro
366
Tbl3_Macro367,Tbl3_Macro368,Tbl3_Macro369,Tbl3_Macro370,Tbl3_Kacr
DW -
371
DW Tbl3_Macro372,Tbl3_Macro373,Tbl3_Macro374,Tbl3_Macro375,Tbl3_ *»cr
376
DW Tbl3_Macro377,Tbl3_Macro378,Tbl3__Macro379,Tbl3_Macro380,Tbl3_Macro
381
DW Tbl3_Macro382,Tbl3_Macro383
;
Macro_grp4: ;points into macro tables
Tbl4_Macro384
Tbl4_Macro385,Tbl4_Macro386,Tbl4_Macro387,Tbl4_Macro388,Tbl4__Macro
DW
DW
389
DW Tbl4_Macro390,Tbl4_Macro391,Tbl4__Macro392,Tbl4_Macro393,Tbl4_Macro
394
A-148
----------------------- Page 150-----------------------

Tbl4_Macro395,Tbl4_Macro396,Tbl4__Macro397,Tbl4__Macro398,Tbl4_Kacro
Tbl4_Macro400,Tbl4_Macro401,Tbl4_Macro402,Tbl4_Macro403,Tbl4_Macro
Tbl4_Macro405,Tbl4__Macro406,Tbl-*JHacro407,Tbl4_Macro408,Tbl4_Macro
Tbl4_Macro410,Tbl4__Macro411,Tbl4__Macro412,Tbl4_Macro413,Tbl4__Macro
DW
399
DW
404
DW
409
DW
414
DW Tbl4_Macro415,Tbl4_Macro416,Tbl4__Macro417,Tbl4__Macro418,Tbl4_Macro
419
DW Tbl4_Macro420.Tbl4_Macro421.Tbl4_Macro422,Tbl4_Macro423,Tbl4_Macrc
424
DW Tbl4_Macro425,Tbl4_Macro426,Tbl4_Macro427,Tb!4 Macro428,Tbl4__Macro
429
DW Tbl4_Macro430,Tbl4_Macro431,Tbl4_Macro432,Tbl4_Macro433,7bl4_Macro
434
DW Tbl4_Macro435,Tbl4_Macro436,Tbl4_Macro437,Tb!4_Macro438,Tbl4_Macro
439
DW Tbl4_Macro440,Tbl4_Macro441.Tbl4__Macro442,Tbl4_Macro443,Tbl4_Kacro
444
DW Tbl4_Macro445,Tbl4_Macro446,Tbl4_Macro447,Tbl4_Macro448,Tbl4__Macrc
449
DW Tbl4_Macro450,Tbl4_Macrc451 ,Tbl4_Macro452,Tbl4_Macro453,Tbl4_Macro
454
DW Tbl4_Macro455,Tbl4_Maero456,Tbl4_Macro457,Tbl4__Macro458,Tbl4_Macro
459
DW Tbl4_Macro460,Tbi4_Macro461,Tbl4_Macro462,Tbl4_Macro463,Tbl4_Macro
464
DW Tbl4_Macro465,Tbl4_Macro466,Tbl4_Macro467,Tbl4_Macrc468,Tbl4_Macro
469
DW Tbl4_Macro470,Tbl4__Macro471 ,Tbl4_Macro472,Tbl4_Macro473 ,Tbl4_Macro
474
DW Tbl4_Macro475,Tbl4_Macro476,Tbl4_Macrc477 # Tbl4_Macro47$,Tbl4_Macro
479
DW Tbl4_Macro480,Tbl4_Macro481,Tbl4_Macro482,Tbl4_Macro483 ,Tbl4_Macro
484
DW Tbl4_Macro465,Tbl4_Macro486,Tbl4_Macro487,Tbl4_Macro488,Tbl4_Macro
489
DW Tbl4_Macro49Q,Tbl4_Macro491,Tbl4_Macro492,Tbl4_Macro493,Tbl4_Macro
494
DW Tbl4_Macro495,Tbl4__Macro496,Tbl4_Macro497,Tbl4_Macro498 Tbl4_Macro
499
DW Tbl4__Macro500,Tbl4_Macro501,Tbl4_Macro502,Tbl4_Macro503,Tbl4__Macro
504
DW Tbl4_Macro505,Tbl4_Macro506,Tbl4_Macro507,Tbl4_Macro508,Tbl4_Macro
509
DW Tbl4_Macro510,Tbl4_Macro511
?;;
MACRO TABLES
The sensor tables point into the Macro table. This table in turn
gets speech and motor table data.
This can be an entry of 1-511 and effectively chains motor and
speech tables together to reuse previous speech motor segments.
A-
149
----------------------- Page 151-----------------------

The first group of numbers is the speech/motor table value.
The last line is the terminator of 00. (00 so 'DB’ takes 1 less byte)
ex: 1 = will call the saysent 1 and the motor table 1.
Tbll_MacroO:
DW 511
DW 00 ;end
FOR NAME TESTING DMH
WAKE
DW 124 ;02
DW 125
DW 126
; DW 399 delay
DW 395 ME
DW 224 KAY-LAH-KA
DW 152
DW 00 ;end
(MIDDLE)
put sounds and motions together
(first sound and motion, in this case *5")
(next sound and motion, in this case "3")
( end of sequence)
DW 5
DW 3
DW 00
Tbll_Macrol:
DW 0 1
DW 00 ;end
;GEORGE 07/03/98
Tbll_Macro2:
001 ;FRONT SEQ1AGE1
;end
DW
DW 00
;
Tbll_Macro3:
002 ;FF^NT SEQ2AGE1
;end
DW
DW 00
;
Tbll_Macro4:
DW 003 ;FRONT SEQ3AGE1
DW 004
DW 00 ;end
*
Tbll_Macro5:
DW 003 ;FRONT SEQ4AGE1
DW 005
DW 00 ;end
;
Tbll__Macro6:
;FRONT SEQ5AGE1
;end
DW 006
DW 00
;
A-150
----------------------- Page 152-----------------------

Tbll_Macro7:
DW 006 ;FRONTSEQ6AGE1
DW 007
DW 00 ;end
;
Tbll_Macro8:
DW 008 ;FRONT SEQ7AGE1
DW 003
DW 00 ;end
;
Tbll_Macro9:
DW 009 ;FRONTSEQ8AGE1
DW 003
DW 00 ;end
;
Tbll
^MacrolO:
DW 010 ;FRONT SEQ9agel
DW 00 ;end
;
Tbll_Macroll:
DW Oil
DW C,1 ;frontseqlOagel
DW 00 ;end
;
Tbll_Macrol2:
DW 012
DW 001 ;seqll FRONT AGL1 ADD SAY001
DW 00 ,end
;
Tbll Macrol3.
DW 001
DW 013 ;seql2 FRONT AGE1 ADD SAY001
DW 00 ;end
Tbll__Macrol4:
DW 014 ;seql3 FRONT AGE1 ADD SAY003
DW 003
DW 00 ;end
;
Tbll_Macrol5:
DW 015 ;seql4 FRONT AGE1
DW 00 ;end
?
Tbll_Macrol6:
DW 016 ;seql5 FRONT AGE1
DW 00 ;end
;
Tbll_Macrol7:
DW 001
DW 017
DW 018
DW 001 ;seql6 FRONT AGE1 BETWEEN 2{ 20)
WV 00 ;end
Tbll_Nacrol8:
DW 019 ;FRONT SEQ1AGE2
DW 00 ;end
Tbll_Macrol9:
DW 001
A-J51
----------------------- Page 153-----------------------

DW 020 ;FRONT SEQ2 AGE2
DW 00 ;end
;
Tbll_Macro20:
DW 010
EW 021 ;SEQ3AGE2 FRONT ADD SEQ9AGE1
DW 00 ;end
;
TbllJMacro21:
DW 022 ;SEQ4 AGE2 FRONT
DW 023
DW 00 ;end
;
Tbll_J1acro22:
024 ;SEQ5 AGE2 FRONT
;end
DW
DW 00
;
Tbll_Macro23:
DW 025 ;SEQ6 AGE2 FRONT
DW 00 ;end
Tbll_Macro24:
DW 026 ;SEQ 7 AGE2 FRONT PARTI
DW 027
DW 00 ;end
;
Tbll__Macro25:
DW 026
DW 026 ;SE? 8 AGE2 FRONrr
DW 028
EW 003
DW 00 ;end *.
?
Tbll_Macro26:
DW 029 ;SEQ 9 FRONT
DW 00 ;end
;
Tbll_Macro27:
DW 030
029 ;SEQ 10 FRONT AGE2
;end
DW
DW 00
;
Tbll_Macro28:
DW 022
;SEQ 11 FRONT AGE2
;end
DW 031
DW 00
?
Tbll_Macro29:
DW 001
;SEQ 12 FRONT AGE 2
;end
DW 032
DW 00
;
Tbll_Macro30:
DW 014 ;seql3 FRONT AGE1&2 ADD SAY003
DW 003
DW 00 ;end
Tbll_Macro31 i
DW 033 ;2EQ14 FRONT AGE2
A-152
----------------------- Page 154-----------------------

»
DW 00 ;end
;
Tbll_Macro32:
DW 034 ;SEQ15 FRONT AGE2
DW 001
DW 00 ;end
Tbll_>lac ->33:
L.. 001
DW 035 ;SEQ16 FRONT AGE2
DW 00 ;end
*
Tbll_Macro34:
DW 001
DW 036 ;SEQ1 FRONT AGE3
DW 00 ;enr
;
Tbll__Macro35:
DW 003
DW 037 ;SEQ2 FRONT AGE3
DW 00 ;end
Tbll_Macro36:
DW 010
DW 038 ;SEQ3 FRONT AGE3
DW 00 ;end
;
Tbll_Macro37:
DW 015
DW 039 ;SEQ4 FRONT AGE3
DW 00 ;end
Tbll_Macro38:
DW 015
DW 023 ;SEQ5 FRONT AGE3
DW 00 ;end
;
Tbll_Macro39:
DW 040 ;SEQ6 FRONT AGE3
DW 00 ;end
;
Tbll_Macro40:
DW 041 ;SEW7 FRONT AGE3
DW 003
DW 00 ;end
;
Tbll__Macro41:
DW 042
av 003 ;SEQ8 FRONT AGE3
DW 00 ;end
;
Tbll_Macro42:
DW 043 ;SEQ10 FRONT AGE3
DW 001
DW 00 ;end
;
Tbll__Macro43:
;Si
DW 044 -Ql1 FRONT AGE3
DW 00 ;end
;
A
-I5J
----------------------- Page 155-----------------------

Tbll_Macro44:
DW 045
DW 001 ;SEQ12 FRONT AGE3 (HEEY,TICKLE ME) ADD20
DW 00 ;end
;
Tbll_Macro45:
DW 001
046 ;SEQ13 fRONT AGE3 (NANNY,NANNY) ADD20
;RASBERKY HE HE HE
;end
DW
DW 047
DW 00
Tbll_>!acro46:
DW 003
DW 028 ;SEQ14 FRONT AGE3
DW 003
DW 00 ;end
;
Tbll_Macro47:
DW 034 ;SEC15 FRONT AGE3
DW 001
DW 00 ;end
Tbll_Macro48:
DW 001
DW 048
DW 049 ;SEQ16 FRONT AGE3
DW 00 ;end
;
Tbll_Macro49:
;SEQ1 FRONT AGE4
;end
DW 044
DW 00
;
Tbll_Mflcro50:
DW 001
DW 050 ; SE02 FRONT ACE4
DW 051
DW 00 ;end
;
Tbll_Macr&51:
DW 003
DW 052 ;SEQ3 (YOU) FRONT AGE4
DW 050
DW 053 ;£EQ3 (ME) FRONT AGE4
DW 00 ;end
;
Tbll_Macro52:
DW 026
DW 053
DW 054
DW 050 ;SEQ4 FRONT AGE4
DW 001
DW 00 ;end
l
Tbll_Macro53:
DW 007
DW 055
DW 056 ; SEQ5 FRONT AGE4
DW 00 ;end
Tbll__Macro54:
A-154
----------------------- Page 156-----------------------

DW 026
DW 053
DW 054
DW 052
DW 018 ;SEQ6 FRONT AGE4
DW 00 ;end
;
Tbll__Macro55:
DW 001
DW 046
DW 055 ;SEQ7 FRONT AGE4
DW 00 ;end
;
Tbll_Macro56:
DW 026
DW 057
DW 050
DW 051
DW 058
DW 003 ;SEQ8 FRONT AGE4
DW 00 ;end
Tbll_Macro57:
DW 042,001 ;SEQ9 FRONT AGE4
DW 00 ;end
;
Tbll_Macro58:
DW 059 ;SEQ10 FRONT AGE4
DW 050
DW 00 ;end
?
Tbll_Macro59:
DW 044
003 ;SEQ11 FRONT AGE4
;end
DW
DW 00
Tbll_Macro60:
DW 001 ;SEQ12
DW 00 ;end
;
Tbll_Macro61:
DW 001
DW 046
047 SEQ13 FRONT AGE4
;end
DW
DW 00
Tbll_Macro62:
DW 026
060 ;SE014 FRONT AGE4
;end
DW
DW 00
Tbll_Macro63:
DV(* 061
SEQ15 FRONT AGE4
;end
DW 003
DW 00
Tbll_Macro64:
DW 007
;SEQ16 FRONT AGE4
;end
DW 051
DW 00
A-155
----------------------- Page 157-----------------------

;END GEORGE 07/03/98
GEORGE 07/04/98
START FORTUNE
Tbll_Macro65:
DW 062
051 ;72
;end
DW ;FORTUNE 1
DW 00
;
Tbll_Macro66:
DW 003
DW 063 ;FORTUNE 2
DW 003
DW 00 ;end
;
Tbll_Macro67:
DW 090 ;94
DW 064
DW 063 ;FORTUNE 3
DW 00 ;end
;
Tbll_Macro68:
DW 065 ;FORTUNE 4
DW 063
DW 00 ;end
;
; MODIFIED FOR NAME DMH
;FORTUNE
Tbll_Macro69:
DW 067
; DW 068
DV; 053
DW 066 ;FORTUNE 5
DW 063
DW 00 ;end
Tbll_Macro70:
DW 069 ;FORTUNE 6
DW 070
DW 00 ;end
Tbll_Macro71:
DW 067
DW 068 ;FORTUNE 7
DW 071
DW 073
DW 072
DW 00 ;end
;
Tbll_Macro72:
DW 074 ;FORTUNE 8
DW 00 ;end
Tbll_Macro73:
DW 074 ;FORTUNE 9
DW 063
DW 00 ;end
j
Tbll_Macro74:
A-156
----------------------- Page 158-----------------------

DW 069 ;FORTUNE 10
DW 00 ;end
;
Tbll_Macro75:
DW 064 ;FORTUNE 11
DW 069
DW 00 ;end
Tbll_Macro76:
DW 073
DW 064 ;FORTUNE 12
DW 069
DW 00 ;end
Tbll_Macro77: ; MODIFIED TO WORK WITH NAME DMH
DW 067
; DW 066
DW 053 ;FORTUNE 13
DW 066
DW 069
DW 00 ;end
;
Tbll_Macro78:
DW 071
DW 073
DW 069
DW 075 ;FORTUNE 14
DW 00 ;end
Tbll_Macro79:
DW 076
077 .•FORTUNE 15
;end
DW
DW 00
;
Tbll_Macro80:
DW 076
DW 069 .•FORTUNE 16
DW 00 ;end
Tbll_Macro81:
DW 078 ;FORTUNE 17 SEQ1 AGE2
DW 00 ;end
;
TbllJMacro82:
DW 078 .•FORTUNE 18 SEQ2 AGE2
DW 063
DW 00 ;end
Tbll__Macro83:
•.
DW 078 FORTUNE 19 SEQ2 AGE2
DW 069
DW 00 ;end
Tbll_Macro84: SPECIAL *0 TWO MA"
DW 067
DW 068
DW 00
;END GEORGE 07/04/98
;END FORTUNE
A-1S7
----------------------- Page 159-----------------------

;START HANGOUT
;GEORGE 07/04/98
Tbll_Macro85:
DW 079
DW 080
DW 079 ;SEQ1 HANGING
DW 080
DW 00 ;end
Tbll_Macro86:
DW 081 ;SEQ2 HANGING
DW 081
DW 00 ;end
;
Tbll_Macro87:
DW 082
DW 083
DW 083
084 ;SEQ3 HANGING (YA DA DA OMPAH bRUHM BABABUM)
;end
DW
DW 00
4
Tbll_Macro88:
DW 085
DW 085
DW 086
087 ;SEQ4 HANGING (LA LA)
;end
DW
DW 00
;
Tbll_Macro89:
DW oe7
DW 088 ;SEQ5 HANGING
DW 00 ;end
Tbll_Macro90:
DW 089
DW 089
DW 090 ;SEQ6 HANGING
DW 091
DW 092
DW 00 ;end
Tbll__Macro91:
DW 093 ;SEQ7 HANGING (SOFTER)
DW 093
DW 093
DW 094
DW 00 ;end
;
Tbll_Macro92:
DW 095
DW 095
DW 055 ;WAS 76 ;SEQ8 HANGING
DW 00 ;end
Tbll_Macro93:
DW 096 ;SEQ9 HANGING
DW 00 ;end
A-158
----------------------- Page 160-----------------------

Tbll_Macro94:
DW 097 ;SEQ10 HANGING
DW 00 ;end
;
Tbll_Macro95:
DW 098 ;SEQ11 AND SEC12 HANGING (FTGH)
DW 00 ;end
;
Tbll_Macro96:
DW 099 ;SEQ13 HANGING (HAA)
DW 00 ;end
;
Tbll_Macro97;
DW 100 ;SEQ14 SEQ15 HANGING (hEEY)
DW 00 ;end
;
Tbll_Macro98:
DW 101 ;SEQ16 HANGING (1 ONE)
DW 102
DW 101
DW 101
001 ;20
;end
DW
DW 00
Tbll_Macro99:
DW 089 ;SEQ6 HANGING AGE2
DW 089
DW 090
DW 091
DW 103
DW 00 ;end
;
Tbll_MacrolOO:
DW 089 ;SEQ6 HANGING AGE2
DW 089
DW 090
DW 105
DW 104
DW 103
DW 00 ;end
Tbll_Macrol01:
DW 087
DW 106 ;SEQ5 AGE3 4
DW 00 ;end
;END HANGOUT
Tbll_Macrol02:
DW 107 ;Fortune pause
DW 00 ;end
END GEORGE 07/04/98
GEORGE 07/05/98
;FEED TABLE
Tbll_Macrol03:
DW 108
DW 110 ;SEQ2 FEED AGE1
DW 109
DW 00 ;end
A-159
----------------------- Page 161-----------------------

;
Tbll_Macrol04:
DW 108 ;SEQ3 FEED AGE1
DW 111
DW 112
DW 109
DW 00 ;end
;
Tbll__Macrol05:
DW 108 ;SEQ4 FEED AGE1
DW 110
DW 113
DW 109
DW 00 ;end
Tbll_Macrol06:
DW 108 ;SEQ5 FEED AGE1
DW 108
DW 078 ;127
DW 110
DW 109
DW 00 ; end
;
Tbll_Macrol07: w
DW 108 ;SEQ6 FEED AGE1
DW 105 ;109
DW 114
DW 00 ; end
Tbll_Macrol08:
DW 108 ;SEQ7 FEED AGE1
DW 115
DW 116
DW 117
DW 110
DW 00 ; end
*
Tbll_Macrol09:
DW 076 ;125 ;SEQ8 FEED AGE1
DW 117
DW 120
DW 118
DW 00 ;end
?
Tbll_MacrollO:
DW 108
DW 115
DW 20 ;SEQ9 FEED AGE1
DW 00 ; end
Tbll_jMacrolll:
DW 108 ;SEQ10 FEED AGE1
DW 109
DW 00 ;end
;
Tbll_Macroll2:
DW 108 ;SEQ11 FEED AGE1
DW 076 ;125
DW 117
DW 119
A-160
----------------------- Page 162-----------------------

DW 00 ;end
Tbll_Macroll3:
DW 108 ;SEQ12 FEED AGE1
DW 108
DW 109
DW 00 ;end
Tbll_Macroll4:
DW 108 ;SEQ13 REUSE 10 FOR14 FEED AGE1
DW 115
DW 001 ;20
DW 00 ;end
;
Tbll_Macrol15:
108 ;SEQ15 FEED AGE1
;125
DW
DW 076
DW 117
DW 119
DW 00
Tbll_Macroll6:
DW 108
DW 108
DW 109 ;SEQ1 FEED AGE1 ()
DW 00 ;end
;
Tbll_Macroll7: ;WIERD SHIT SEE 101
DW 108
DW 120
DW 109
DW 00 ;end
;end AGE1
Tbll_Macrol18:
DW 108
DW 121
DW 109 ;SEQ1 FEED AGE2
DW 00 ;end
Tbll_Macroll9:
DW 108
DW 051 ;72
DW 109 ;SEQ2 FEED AGE2
DW 00 ;end
S
Tbll_Macrol20:
DW 108
DW 073 ;122
DW 112
DW 109 ;SEQ3 FEED AGE2
DW 00 ;end
Tbll_Macrol21:
DW 108
DW 051 ;72
DW 113
DW 109 ;SEQ4 FEED AGE2
DW 00 ;end
Tbll_Macrol22:
A-161
----------------------- Page 163-----------------------

DW 108
DW 108
DW 078 ;127 ;SEQ5 FEED AGE2
EW 051 ;72
DW 109
DW 00 ;end
;
Tbll_Macrol23:
DW 108
DW 105 ;109
DW 114 ;SEQ6 FEED AGE2
DW 00 ;end
;
Tbll_Macrol24:
DW 108
DW 115
DW 116
DW 069 ;118 ;SEQ7 FEED AGE2
DW 110
DW 00 ;end
Tbll_Macrol25:
DW 076 ;125
DW 057 ;78
DW 120
DW 118 ;SEQ8 GE2
DW 00 ;end
Tbll_Maerol26:
DW 108
DW 115 ;SEQ9 FEED AGE2
DW 001 ;20
DW 00 ; t- r.d
;
Tbll_Macrol27:
DW 108
DW 109 ;SEQ10 FEED AGE2
DW 00 ;end
;;
Macro_grp2 was here
;
Tbl2_Macrol28:
DW 108
DW 076 125
DW 069 118
DW 119 SEQ11 FEED AGE2
DW 00 ;end
;;
Kacro_grp2 was here
Tbl2_Macrol29:
DW 108
DW 076 125
DW 069 118
DW 119 SEQ15 FEED AGE2
DW 00 ;end
END AGE2
A-162
----------------------- Page 164-----------------------

Tbl2_Macrol30:
DW 108
DW 110
DW 109 ;SEQ2 FEED AGE3
DW 00 ;end
Tbl2_Macrol31:
DW 108
DW 111
DW 072 ;143
DW 109 ;SEQ3 FEED AGE3
DW 00 ;end
;
Tbl2_Macrol32:
DW 108
DW 110
DW 058 ;144
DW 109 ;SEQ4 FEED AGE3
DW 00 ;end
Tbl2_Macrol33:
DW 108
DW 115
DW lib
DW 117
DW 051 ;72 ;SEQ7 FEED AGE3
DW 00 ;end
;
Tbl2_Macrol34:
DW 076 ;125
DW 117
DW 121
DW 118 ;SEQ8 FEED AGE3
DW 00 ;end
Tbl2_Macrol35:
DW 108
076 ;125
;SEQll FEED AGE3
DW
DWf 117
122
DW 00 ;end
;
Tbl2_Macrol36:
DW 108
DDW ^^, 051 109 ;72
DW 00 ; end
Tbl2_Macrol37:
DW 108
073 ;122
;121
DW
DW 072
DW 109
00 ;end
Tbl2_Macrol38:
DW 108
DW 051 ;72
DW 058 ;144
DW 109
A-163
----------------------- Page 165-----------------------

DW 00 ;end
7
Tbl2_Macrol39:
DW 108
DW 108
DW 078 ;127
DW 051 ;72
DW 109
DW 00 ;end
Tbl2
^Macrol40:
DW 108 ;SEQ 6
DW 105 ;109
DW 123
DW 00 ;end
Tbl2_Macrol 41:
DW 100
DW 115
DW 116
DW 057 ;78
DW 051 ;72
DW 00 ;end
;
Tbl2_Macrol42:
DW 076 ;125
DW 069 ;118
DW 121
DW 118
DW 00 ;end
Tbl2_Macrol43:
DW 108
*.
DW 125
DW 057 ;78
DW 122
DW 00 ;end
;
Tbl2_Macrol44:
DW 108
DW 125
DW 057 ;78
DW 122
DW 00 ;end
;
Tbl2_Macrol45:
DW 108
DW 121
DW 109
DW 00 ;end
;END FEED
;END GEORGE 07/05/98
;WAKE
;GEORGE 07/06/98
Tbl2__Macrol46: ;SG DONE
DW 124 ;02
DW 125
DW 126
DW 00 ;end
A-164
----------------------- Page 166-----------------------

Tbl2_J!acrol47: ;SG DONE
DW 124
DW 125
DW 127
DW 00 ;end
Tbl2_Macrol48: ;SG DONE
DW 124
DW 128
DW 127
DW 00 ;end
;
Tbl2_Macrol49: ;SG DONE
DW 124
DW 129
DW 055 ;*0.»
DW 00 ;end
;
Tbl2_Macrol50: ;SG DONE
DW 124
DW 130
DW 131
DW 132
DW 00 ;end
;
Tbl2_Macrol51: ;SG DONE
DW 124
DW 130
DW 131
DW 123 ;*12
DW 00 ;end
; ••
TL12_Macrol52: ;SG DONE
DW 124
DW 130
DW 133
DW 132
DW 00 ;end
Tbl2_Macrol53: ;SG DONE
DW 124
DW 130
DW 133
DW 123 ;M2
DW 00 ;end
Tbl2_Macrol54: ;SG DONE
DW 124
DW 134
DW 135
DW 131
DW 00 ;end
Tbl2_J4acrol55: ;SG DONE
DW 124
DW 134
DW 136
DW 131
DW 00 ;end
A-165
----------------------- Page 167-----------------------

Tbl2_Macrol56: ;SG DONE
DW 124
DW 134
DW 135
DW 133
DW 00 ;end
Tbl2__Macrol57: ;SG DONE
DW 124
DW 134
DW 136
DW 137
DW 133
DW 00 ;end
;
Tbl2__Macrol58: ;SG DONE
DW 124
DW 138
DW 139
DW 00 ;end
Tbl2_Macrol59: ;SO DONE
DW 124
DW 140
141
;end
DW
DW 00
;
Tb^M&croieO DW : 124 ;SG DONE
DW 142
DW 143
141
;end
; DW
DW 00
?
Tbl2_Macrol61: ;SG DONE
DW 124
DW 144
DW 145
DW 146
141
;end
,DW
DW 00
Tbl2_Macrol62: ;SG DONE
DW 124
DW 147
DW 141
DW 00 ;end
;
Tbl2_Macrol63: ;SG DONE
DW 124
DW 148
EW 00 ;end
;
Tbl2
-Hacrol64: ;SG DONE
DW 124
DW 053 ;29
DW 149
DW 150
DW 00 ;end
A-itf
----------------------- Page 168-----------------------

;
Tbl2_Macrol65: ;SG DONE
DW 124
DW 151
DW 00 ;end
;
Tbl2_Macrol66: ;SG DONE
DW 124
DW 152
DW 131
DW 153
DW 154
DW 00 ;end
;
Tbl2_Macrol67: ;SG DONE
DW 124
DW 152
DW 155
DW 153
DW 154
DW 00 ;end
;
Tbl2_Macrol68: ;SG DONE
DW 124
DW 152
;DW 153
DW 131
DW 156
DW 154
DW 00 ;end
Tbl2_Macrol69: ;SG DCME
DW 124
DW 053 ;*38
DW 155
DW 156
DW 154
DW 00 ;end
END WAKE 07/06/98
END GEORGE
;GEORGE 0//06/98
;HUNGER
Tbl2_Macrol7G: ;SG D.NE ;HUNGER
DW 159
DW 165
DW 412 ;DMH
DW 00 ;end
ib !2_Macrol71: ;SG DONE
DW 160
DW 165
DW 412 ;DMH
DV-J 00 ;end
;
Tbl2_Macrol72: ;SG DONE
DW 160
DW 00 ;end
Tbl2JHacrol73: ;SG DONE
A-167
----------------------- Page 169-----------------------

DW 168
DW 159
DW 165
DW 412 ;DMH
DW 00 ;end
;
Tbl2_Maciol74: ;SG DONE
DW 168
DW 160
DW 165
DW 412 ;DMH
DW 00 ;end
x2_Macrol75: ;SG DONE
DW 168
DW 160
DW 412 ;DMH
)
DW 00 ;end
Tbl2 Macrol76: ;SG i,ONE
DW 163
DW 158
DW 159
DW 00 ;end
Tbl2_ Macrol77: ;SG DONE
DW 163
DW 158
DW 160
DW 00 ;end
;
Tbl2_Macrol78: ;SG DONE
DW 163
DW 157
DW 159
DW 00 ;end
Tbl2_Macrol79: ;SG DONE
DW 163
DW 157
DW 160
DW 00 ;end
Tbl2_Macrol80: ;SG DONE
DW 163
DW 168
DW 159
DW 163
DW 00 ;end
Tbl2_Macrol81: ;SG DONE
DW 163
DW 168
DW 160
DW 163
DW 00 ;end
Tbl2_Macrol82: ;SG DONE
DW 163
A~168
----------------------- Page 170-----------------------

DW 163
DW 168
DW 161
DW 159
DW 165
DW 412 ;DMH
DW 00 ;end
;
Tbl2_Macrol83: ;SG DONE
DW 163
DW 163
DW 168
DW 161
DW 160
DW 165
DW 412 ;DMH
DW 00 ;end
Tbl2_Macrol84: ;SG DONE
DW 163
DW 163
DW 168
DW 162
DW 160
DW 00 ;end
Tbl2_Macrol85: ;SG DONE
DW 168
DW 161
DW 159
DW 00 ;end
Tbl2 Macrol66: ;SG DONE *.
DW 168
DW 161
DW 160
DW 00 ;end
Tbl2_Macrol87: ;SG DONE
D:* 168
DW 162
DW 159
DW 00 ;end
;
Tbl2_Macrol88: ;SG DONE
DW 168
DW 162
DW 160
DW 00 ;end
Tbl2_Macrol83: ;SG DONE
DW 168
DW 166
DW 159
DW 00 ;end
;
Tbl2_Macrol90: ;SG DONE
DW 168
DW 167
DW 159
A-169
----------------------- Page 171-----------------------

DW 165
DW 412 ;DMH
DW 00 ;end
Tbl2_Macrol91: ;SG DONE
DW 168
DW 167
DW 160
DW 165
DW 412 ;DMH
DW 00 ;end
;
Tbl2_Macrol92: ;SG DONE
DW 168
DW 167
DW 160
DW 00 ;end
Tbl2__Macrol93: ;SG DONE
DW 163
DW 163
DW 00 ;end
;
Tbl2_Macrol94: ;SC DONE
DW 163
DW 163
DW 165
DW 412 ; DMH
DW 00 ; end
Tbl2_Macrol95: ;SG DONE
DW 168
DW 161
DW 159
DW 00 ;end
Tbl2_Macrol96: ;SG DONE
DW 168
DW 161
DW 160
DW 00 ; end
;
Tbl2_Macrol97: ;SG DONE
DW 168
DW 162
DW 159
DW 00 ;end
;
Tbl2_Macrol9d: ;SO DONE
DW 168
DW 162
DW 160
DW 00 ; end
;
Tbl2_Macrol99: ;SG DONE
DW 164
DW 168
DW 161
DW 159
DW 165
A-170
----------------------- Page 172-----------------------

DW 00 ;end
;
Tbl2_Macro200: ;SG DONE
DW 164
DW 168 ;fs40
DW 162
DW 159
DW 165
DW 00 ;end
;
Tbl2_Macro201: ;SG DONE
DW 164
DW 168 ;40
DW 162
DW 160
DW 165
DW 00 ;end
END HUNGER
END GEORGE 07/06 /98
;INVERT
;GEORGE 07/07/98
Tbl2_Macro2C'2: ;SG DONE ;INVERT
DW 164 ;64
DW 00 ;end
Tbl2_Macro203: ;SG DONE
DW 164 ;64
DW 169
DW 00 ;end
;
Tbl2_Macro204: ;SG DONE
DW 164 ;64
DV: 108 ;40
D’W 174
DW 166
DW 175
DV 00 ;end
;
Tbl2__Macro205: ;SG DONE
DW 164 :64
DW 176
DW 00 ; end
Tbl2_Macro206: ;SG DONE
DV 188
DW 177
DV 00 ;end
Tbl2_Macro207: ;SG DONE
DW 18o
DW 178
DW 00 ;ena
Tbl2_Macro208: ;SG DONE
DW 170
DW 177
DW 177
A-171
----------------------- Page 173-----------------------

DW 00 ;end
;
Tbl2_Macro209: ;SG DONE
DW 170
DW 178
DW 177
DW 00 ;end
;
Tbl2_Macro210: ;SG DONE
DW 170
DW 177
DW 178
DW 00 ;end
Tbl2_Macro211: ;SG DONE
DW 170
DW 178
DW 178
DW 00 ;end
Tbl2_Macro212: ;SG DONE
DW 171
DW 163 ;63
DW 00 ;end
Tbl2_Macro213: ;SG DONE
DW 171
DW 166 ;40
DW 179
DW 180
DW 165 ;65
DW 00 ;end
;
Tbl2_Macro214: ;SG DONE
DW 171
DW 168 ;40
DW 181
DW 180
DW 165 ;65
DW 00 ;end
Tbl2_Macro215: ;SG DONE
DW 171
DW 168
DW 179
DW 182
DW 165 ;65
DW 00 ;end
Tbl2_Macro216: ;SG DONE
DW 171
DW 168 ;40
DW 181
DW 182
DW 00 ;end
Tbl2_Macro217: ;SG DONE
DW 164 ;64
DW 175
DW 164 ;64
A-172
----------------------- Page 174-----------------------

DW 00 ;end
Tbl2__Macro218: ;SG DONE
DW 164 ;64
DW 183
DW 164 ;64
DW 00 ;end
;
Tbl2_Macro219: ;SG DONE
DW 164 ;64
DW 170
DW 170
DW 00 ;end
Tbl2_Macro220: ;SG DONE
DW 171
DW 179
DW 180
:w 00 ;end
Tbl2_Macrc221: ;SG DONE
DW 171
DW 181
DW 180
DW 00 ;end
Tbl2_Macro222: ;S3 DONE
DW 171
DW 17S
DW 184
DW 163 ;63
DW 00 ;end
Tbl2_Macro223: ;SG DONE
DW 171
T-.T.J 181
DW 185
DW 00 ;end
Tbl2_Macro224: ;SG DONE
DW 164 ;64
DW 179
DW 166
DW 00 ;end
;
Tbl2_Macro225: ;SG DONE
DW 164 ;64
DW 181
DW 186
DW’ 00 ;end
Tbl2_Macro226: ;SG DONE
DW 164 ;64
DW 181
DW 185
DW 00 ;end
t
Tbl2_Macro227: ;SG DONE
DW 164 ;64
DV; 181
A-173
----------------------- Page 175-----------------------

DW 184
DW 163 ;63
DW 00 ;end
;
Tbl2_Macro228: ;SG DONE
DW 164 ;64
DW 179
DW 1S7
DW 00 ;end
;
Tbl2_Macro229: ;SG DONE
DW 164 ;64
DW 181
DW 187
DW 00 ;end
;
Ttl2_Macro230: ;SG DONE
DW 172
DW 158
DW 178
DW 00 ;end
Tbl2__Macro231: ;SG DONE
DW 164 ;64
DW 181
DW 189
DW 00 ;end
;
Tbl2_Macro232: ;SG DONE
DW 172
DW 175
DW 00 ; end
Tbl2_Macro233: ;SG DONE
DW 172
DW 183
DW 00 ;end
;
Tbl2_Macro234: ;SG DONE
DW 172
DW 172
DW 164 ;64
DW 00 ;end
-
Tbl2_Macro235: ;SG DONE
DW 173
DW 00 ;end
;
Tbl2_Macro236: ;SG DONE
DW 190
DW 00 ;end
;
Tbl2_Macro237: ;SG DONE
DW 191
DW 00 ;end
Tbl2_Macro238: ;SG DONE
DW 192
DW 00 ;end
;PND GEORGE 07/07 /98
A-174
----------------------- Page 176-----------------------

;END INVERT
;GEORGE 07/07/98
;BACK
Tbl2_Macro239: ;BACKSG ;SGDON^
DW 193
DW 193
DW 00 ;end
;
Tbl2__Macrc240: ;SGDONE
DW 193
DW 194
DW 195
DW 00 ;end
;
Tbl2 Macro241: ;SGDONE
DW 193
DW 196
DW 195
DW 00 ;end
;
Tbl2_Macro242: ;SGDONE
DW 193
DW 194
DW 197
DW 00 ;en:l
Tbl2_Macro243: ; SC-JONE
DW 193
DW 196
DW 197
DW 00 ;end
Tbl2_Macro244: ;SGDONE
DW 198
DW 199
DW 200
DW 201
DW 00 ;end
Tbl2_Macro245: ;SGDONE
DW 198
DW 199
DW 202
DW 201
DW 00 ;end
;
Tbl2_Macro246: ;SGDONE
DW 198
DW 199
DW 200
;148
;end
DW 184 ;212
DW 00
;
Tbl2_Macro247: ;SGDONE
DW 198
DW 199
DW 202
DW 184 ;148 ;212
DW 00 ;end
A-175
----------------------- Page 177-----------------------

Tbl2_Macro248: ;SGDONE
DW 198
DW 198
DW 00 ;end
Tbl2_Macro249: ;SGDONE
DW 198
DW 203
DW 204
DW 00 ;end
;
Tbl2_Macro25J: ;SGDONE
DW 198
DW 205
DW 206
DW 207
DW 204
DW 00 ;end
Tbl2_Macro251: ;SGDONE
DW 196
DW 205
DW 208
DW 233
DW 204
DW 00 ;end
Tbl2_Macro252: ;SGDONE
DW 198
DW 205
DW 206
DW 233
DW 204
DW 00 ;end
Tbl2_Macro253: ;SGDONE
DW 198
DW 209
DW 210
DW 00 ;end
Tbl2__Macro254: ;SGDONE
DV 198
DW 209
DW 21?
DW 212
DW 213
DW 00 ;end
Tbl2_Macro255: ;SGDONE
DW 198
DW 209
DW 214
DW 00 ;end
;
Tbl3_Macro256: ;SGDONE
DW 198
DW 215
DW 216
A-176
----------------------- Page 178-----------------------

DW 217
DW 00 ;end
;
Tbl3_Macro257: ;SGDONE
DW 198
DW 215
DW 216
DW 218
DW 00 ;end
Tbl3_Macro258: ;SGDONE
DW 219
DW 220
DW 209
DW 217
DW 199
DW 234
DW 00 ;end
;
Tbl3_Macrc259: ;SGDONE
VW 219
DW 220
DW 209
DW 205
DW 217
DW 234
DW 00 ;end
Tbl3_Macro260: ;SGDONE
DW 219
DW 220
DW 209
DW 205
DW 216
DW 234
DW 00 ;end
Tbl3_Macro261: ;SGDONE
DW 221
DW 222
DW 00 ;end
;
Tbl3_Macro262: ;SGDONE
DW 221
DW 223
DW 222
DW 00 ;end
;
Tbl3_Macro263: ;SGDONE
DW 198
DW 224
DW 199
DW 00 ;end
;
Tbl3_Macro264: ;SGDONE
DW 198
DW 224
DW 205
DW 00 ;end
;
A-177
----------------------- Page 179-----------------------

Tbl3_Macro265: ;SGDONE
DW 198
DW 225
DW 205
DW 00 ;end
;
Tbl3_Macro266: ;SGDONE
DW 226
DW 201
DW 00 ;end
;
Tbl3_Macro267; ;SGDONE
DW 198
DW 227
DW 227
DW 228
DW 229
DW 00 ;end
Tbl3_Macro268: ;SGDONE
DW 198
DW 227
DW 227
DW 230
DW 229
DW oc ;end
;
Tbl3_Macro269: ;SGDONE
DW 198
DW 194
DW 19*
DW 00 ;t d
;
Tbl3_Macro2 0: ;SGDONE
DW 198
DW 18
DW 205
DW 00 ;end
Tbl3_Macro271: ;SGDONE
DW 198
DW 196
DW 205
DW 00 ;end
Tbl3_Macro272: ;SGDONE
DW 198
DW 235
DW 231
DW 199
DW 00 ;end
;
Tbl3_Macro273: ;SGDONE
DW 198
DW 235
DW 231
DW 205
DW 00 ;end
;
Tbl3_Macro274: ;SGDONF
A-J78
----------------------- Page 180-----------------------

DW 198
DW 235
DW 232
DW 205
DW 00 ;end
;
Tbl3__Macro275: ;SGDONE
DW 198
DW 236
DW 232
DW 205
DW 00 ;end
END GEORGE 07/07/98
END BACK
GEORGE 07/08/98
SICK
Tbl3_Macro276: ;SJ DONE ;STrK3
DW 237
DW ;135 ;40
DW 117 ;41
DW 238
DW 00 ;end
Tbl3_Macro277: ;SG DONE
DW 237
DW 168 ;135 ;4C
DW 239
DW 238
DW 00 ; end
Tbl3_Macro278: ;SG DONE
DW 237
DW 168 ;135 ;40
DW 117 ;41
DW 240
DW 00 ;end
Tbl3_Macro279: ;SG DONE
DV 237
DV 53 ;45
DW 239
DW 240
DW ^0 ;end
;
Tbl3_Macro280: ;SG DONE
DW 237
DV 241
DV 00 ;end
;
Tbl3 Macro281: ;SG DONE
DW 237
DW 242
DW 00 ;end
;
Tbl3__Macro282: ;SG DONE
237
DW 243
A-179
----------------------- Page 181-----------------------

DW 244
DW 00 ;end
Tbl3_Macro283: ;SG DONE
DW 250
DW 117 ;41
DW 245
DW 00 ;©nd
;
Tbl3_Macro284: ;SG DONE
DW 250
DW 239
DW 245
DW 00 ;end
;
Tbl3_Jiacro285: ;SG DONE
DW 250
DW 239
;51
;end
DW 182
DW 00
Tbl3__Macro286: ;SG DONE
DW 237
DW 246
DW 250
DW 00 ;end
;
Tbl3_Macro287: ;SG DONE
DW 237
DW 247
DW 250
DW 00 ;end
Tbl3__Macro288: ;SG DONE
DW 237
DW 00 ;end
J
Tbl3_Macro289: ;SG DONE
DW 237
DW 248
EW 250
DW 00
Tbl3_Macro290; ;JO OONE
DW 237
DW 249
DW 00 ;end
Tbl3_Macro291: ;SG DONE
DW 250
DW 250
DW 00 ;end
;
Tbl3Jttacro292 s ;SG DONE
DW 250
DW 248
EW 00 ;end
;END SICK
;END GEORGE 07/08/98
. -v A-180
----------------------- Page 182-----------------------

;GEORGE 07/08/98
;LIGHT
Tbl3_Macro293:
DW 251
DW 00 ;end RB
Tbll_Macro294:
DW 263
; DW 00 ;end RB
Tbl3_Macro294:
DW 252
DW 00 ;end RB
Tbl3_Macro295:
DW 253
DW 00 ;end RB
Ttl3_Macro296:
DW 254
DW 00 ;end RB
;
Tbl3_Macro297:
DW 255
DW 00 ;end RB
;
Tbl3_Macro298:
DW 256
DW 00 ;end
Tbl3__Macro299:
DW 257
DW 00 ;end
Tbl3_Macro300:
DW 258
DW 00 ;end
;
Tbl3_Macro301:
DW 259
DW 00 ; end
Tbl3_Macro302:
DW 260
DW 00 ;end
Tbl3_Macro303:
DW 261
DW 00 ;end
;
Tbl3_Macro304:
DW 262
DW 00 ;end
;
Tbl3_Macro305:
DW 263
DW 00 ;end
;
Tbl3_Macro306:
DW 264
A-181
----------------------- Page 183-----------------------

DW 00 ;end
Tbl3JMacro307:
DW 265
DW 00 ;end
END GEORGE 07/08/98
END LIGHT
GEORGE 07/08/98
DARK
Tbl3_Macro308:
DW 266
DW 00 ;end
;
Tbl3__Mocro309:
DW 267
DW 00 ;end
;
Tbl3_Macro310:
DW 268
DW 0C ;end
;
Tbl3_Macro311:
DW 269
DW 00 ;end
;
Tbl3_Macro312:
DW 270
DW 00 ;end
;
Tbl3__Macro313:
DW 271
DW 00 ;end
Tbl3__Macro314:
DW 272
DW 00 ;end
;
Tbl3_Macro315:
DW 273
DW 00 ;end
;
Tbl3_Macro316:
DW 274
DW 00 ;end
«
Tbl3_Macr&317:
DW 275
DW 00 ?end
Tbl3_Macro318:
DW 276
DW 00 ;end
Tbl3_Xacro319:
DW 277
DW 00 ?end
i
Tbl3_Macro320:
DW 278
A-182
----------------------- Page 184-----------------------

DW 00 ;end
;
Tbl3_Macro321:
DW 279
DW 00 ;end
Tbl3_Macro322:
DW 280
DW 00 ;end
;
Tbl3_Macto323:
DW 281
DW 00 ;end
Tbl3__Macro324:
DW 282
DW 00
Tbl3_Macro325:
DW 283
DW 00 ;end
Tbl3_Macro326:
DW 284
DW 00 ;end
Tbl3__Macro327:
DW 285
DW 00 ;end
Tbl3_Macro328:
DW 286
DW 00 ;end
Tbl3_Macro329:
DW 287
DW 00 ;end
Tbl3_Macro330:
DW 288
DW 00 ;and
;
Tb _Macro331:
DW 289
DW 00 ;end
;END DARK
;END GEORGE 07/08/98
GEORGE 07/08/98
SOUND
Tbl3_MacroJ32:
DW 290 ;Sl-Al/S9-A1/S1-A2 SOUND js
DW 00 ;end
;
Tbl3_>!acro333:
DW 291 ;S2-A1/S10-A1/S2-A2 SOUND js
DW 00 ;end
;
Tbl3_>lacro334:
A-183
----------------------- Page 185-----------------------

DW 292 ;S3-A1/S11-A1 SOUND js
DW 00 ;end
;
Tbl3_Macro335:
DW 293 ;S4-A1/S12-A1 SOUND js
DW 00 ;end
Tbl3__Macro336:
DW 310
DW 294 ;S5-A1/S13-A1 SOUND (with say/m2) ja
DW 00 ;end
?
Tbl3_Mncro337:
DW 295 ;S6-A1/S14-A1 SOUND js
DW 00 ;end
;
Tbl3_Macro338:
DW 310
DW 296 ;S7-A1/S15-A1 SOUND (with say/m2) js
DW 00 ;end
;
Tbl3_Macro339:
DW 297 ;S8-A1/S16-A1 SOUND js
DW 00 ;end
;
Tbl3__Macro340:
DW 296 ;S3-A2 SOUND js
DW 00 ;end
?
Tbl3_Macro341:
DW 299 ;S4-A2 SOUND js
DW 00 ;end
;
Tbli_Macro342: s
DW 310
DW 300 ;S5-A2 SOUND (with say/m2) js
DW 00 ;end
;
Tbl3_Macro343:
DW 310
DW 301 ;S7-A2 SOUND (with say/m2) js
DW 00 ;end
;
Tbl3_Macro344:
DW 302 ;S8-A2 SOUND ja
DW 00 ;end
;
Tbl3_Macro345:
DW 303 ;S3’A3 SOUND js
DW v O ;end
;
Tbl3JMacro346:
;S4-A3 SOUND js
;end
DW 304
DW 00
J
Tbl3_Macro347:
DW 310
DW 305 ;S7 A3 SOUND (with say/m2) js
DW 00 ;end
A-184
----------------------- Page 186-----------------------

Tbl3_Macro348:
DW 306 ;S1-A4 SOUND js
DW 00 ;end
;
Tbl3_Macro349:
DW 307 ;S3-A4 SOUND js
DW 00 ;end
;
Tbl3_Macro350:
DW 308 ;S6-A4 SOUND js
DW 00 ;end
Tbl3__Macro351:
DW 309 ;S8-A4 SOUND js
DW 00 ;end
END GEORGE 07/08/98
END SOUND
;TILT
;GEORGE 07/09/93
Tbl3_Macro352:
DW 310 ;S1 A1 TILT/S4 A1 TILT js
DW 00 ;end
Tbl3_Macro353:
DW 311 :S2 A1 TILT js
DW 00 ;end
;
Tbl3_Macro354:
DW 312 ;S3 A1 TILT js
DW 00 ;end
Tbl3_Macro355:
DW 313 ;S5 A1 TILT js
DW 00 ;end
Tbl3_Macro356:
DW 314 ;S A1 TILT js
DW 00 ;end
;
Tbl3_Macro357:
DW 315 ;S7 A1 TILT js
DW 00 ;end
;
Tbl3__Macro358:
DW 313 ;S8 A1 TILT js
DW 316
DW 00 ;end
;
Tbl3_Macro359:
DW 317 ;S9 A1 TILT js
DW 00 ;end
;
Tbl3_Macro360:
DW 318 ;S10 A1 TILT js
DW 00 ;end
;
Tbl3_Macro361:
A-18S
----------------------- Page 187-----------------------

DW 310 ;Sll A1 TILT js
DW 319
DW 00 ;end
f
Tbl3_Macro362:
DW 320 ;S12 A1 TILT js
DW 00 ;end
;
Tbl3_Macro363:
DW 321 ,313 A1 TILT js
DW 00 ;end
;
Tbl3_Jiacro364:
DW 322 ;S15 A1 TILT js
DW 00 ;end
;
Tbl3_Macro365:
DW 323 ;Si6 A1 TILT js
DW 00 ;end
;
Tbl3_Macro366:
DW 324 ;SI A1 TILT js
DW 00 ;end
;
Tbl3_Macro367:
DW 324
DW 325 ;S2 A1 TILT js
DW 00 ;end
;
Tbl3__Macro368:
DW 326 ;S5 A2 TILT js
DW 00 ;end
;
Tbl3_Macro369: •»
DW 313
DW 327 ;S7 A2 TILT js
DW 00 ;end
;
Tbl3_Macro370:
DW 313
DW 328 ;S8 A2 TILT js
DW 00 ;end
;
Tbl3_Macro371:
DW 310
DW 329 ;SI1 A2 TILT js
DW 00 ;end
?
Tbl3_Macro372:
DW 330 ;S12 A2 TILT js
DW 00 ;end
Tba.J_!J acro373:
DW 313
DW 331 ;SI3 A2 TILT js
DW 00 ;end
;
Tbl3_Macro374:
DW 332 ;S12 A2 TILT js
DW 00 ;end
A-186
----------------------- Page 188-----------------------

Tbl3_Macro375:
DW 333
DW 00 ;end
Tbl3_Macro376:
DW 334
DW 00 ;end
;
Tbl3_Macro377:
DW 334
DW 335
DW 00 ;end
;
Tbl3_Macro378:
DW 336
DW 00 ;end
Tbl3_Macro379:
DW 313
DW 337
DW 00 ;end
Tbl3 Macro380:
DW 313
DW 338
DW 00 ;end
;
Tbl3_Macro381:
DW 339
DW 00 ;end
;
Tbl3_Macro3£2:
DW 317
DW 340
DW 00 ;end
;
Tbl3 Macro383:
DW 341
DW 00 ;end
;
Tbl4_Macro384:
DW 310
DW 329
DW 342
DW 00 ;end
;
Tbl4_Macro385:
DW 313
DW 343
DW 00 ;end
;
Tbl4_Macro386:
DW 313
DW 344
DW 00 ;end
Tbl4__Macro387:
DW 334
DW 345
A-187
----------------------- Page 189-----------------------

DW 00 ;end
;
Tbl4_Macro388:
DW 346
DW 00 ;end
;
Tbl4_Macro389:
DW 313
DW 347
DW 00 ;end
Tbl4_Macro390:
DW 310
DW 348
DW 00 ;end
Tbl4_Macro391:
DW 313
DW 349
DW 00 ;end
Tbl4_Macro392:
DW 313
DW 350
DW 00 ;end
;END TILT
;END GEORGE 07/09/98
IR
;GEORGE 07/09/98
Tbl4_Macro393:
DW 351
DW 00 ;end
;?
Tbl4_Macrc394:
DW 352 seq5, IR agel
DW 00 ;end
f
Tbl4_Macro395:
DW 353 seq6 # IR agel
DW 354
DW 00 ;end
#
Tbl4_Hacro396:
DW 356 ;seq7 ir agel
DW 355
DW 00 ;end
Tbl4_Macro397:
DW 357 ;seq8 ir agel
DW 00 ;end
;
Tbl4_Macro398:
DW 358 ;seq9 ir agel
DW 00 ;end
;
Tbl4_>!acro399:
DW 359 ;seq 10,360 ir agel
DW 00 ;end
A-188
----------------------- Page 190-----------------------

Tbl4_Macro400:
DW 360 ;seq !2 ir agel,age2,age,3
DW 00 ;end
;
Tbl4_Macro401:
DW 361 ;seql3,14 ir agel
DW 00 ;end
;
Tbl4_Macro402:
DW 362 ;seql5 ir agel
DW 00 ;end
;
Tbl4__Macro403:
DW 363 ;seql6 ir agel
DW 00 ;end
Tbl4_Macro404:
DW 364 ;seql ,2,3 ir age2
DW 00 ;end
;
Tbl4_Macro405:
DW 365 ;seq4,5 ir age2
DW 00 ;end
Tbl4_Macro406:
DW 366 ;seq6 ir age2
DW 00 ;end
;
Tbl4_Macro407:
DW 367 ;seq7 ,8 ir age 2
DW 00 ;end
Tbl4_Macro408:
DW 368 ;seq9 ir age2
DW 00 ;end
Tbl4_Macro409:
DW 369 ;seqlO ir age2
DW 00 ;end
Tbl4_Macro410:
370 ;seqll ir age2
DW 00 ;end
Tbl4_Macro411:
DW 371 ;seql3,14 ir age2
DW OC ;end
;
Tbl4_Macro412:
DW 372 ;seql5 ir age2
DW 00 ;end
Tbl4__Macro413:
DW 373 ;seql6 ir age2
DW 00 ;end
Tbl4_Macro414:
DW 374 ;seql,2,3,4.5 ir age3
DW 00 ;end
A-189
----------------------- Page 191-----------------------

Tbl4_J4acro415:
DW 375 ;seqS ir age3
TO 00 ;end
Tbl4_Macro416:
TO 376 ;seq7,8 ir age3
DW 00 ;end
;
Tbl4_Macro417:
TO 377 ;seq9 ir age3
TO 00 ;end
Tbl4_Macro418:
TO 378 ;seqll ir age3
TO/ 00 ;end
*
Tbl4_Macro419:
DW 379 ;seql3,14 ir age3
TO 00 ;end
Tbl4_Macro420:
DW 380 ;seql5 ir age3
TO 00 ;end
;
Tbl4_Macro421:
DW 381 ;seql,2,3,4.5 ir age4
TO 00 ;end
Tbl4_Macro422:
TO 382 ;seq6 ir age4
TO 00 ;end
Tbl4_>iacro423:
TO 383 ;seq7,8 ir age4
TO 00 ;end
Tbl4_Macro424:
TO 384 ;seq9 ir age4
TO 00 ;end
Tbl4 Macro425:
TO 385 ;seql0 ir age4
TO 00 ;end
;
Tbl4__Macro426:
TO 386 ;soqll ir age4
TO 00 ;end
Tbl4_Macro427:
TO 387 ;seql2 ir age4
TO 00 ;end
;
Tbl4_Macro428:
TO 389
TO 388 ;seql4 ir age4
TO 389
TO 00 ;end
;
Tbl4_Macro429:
A-190
----------------------- Page 192-----------------------

DW 389 ;seql5 ir age4
DW 390
DW 00 ;cnd
END GEORGE
END IR
; START FURBY SAYS DMH
Tbl4_Macro430:
DW 50 ; TICKLE
DW 00 ;end
;
Tbl4_Macro431:
DW 196 ; PET
DW 00 ;end
Tbl4_Macro432:
DW 71 ; SOUND
DW 00 ;end
Tbl4 Macro433:
DW 391 ; LIGHT
DW 00 ;end
Tbl4_Macro434:
DW 196 ; soft purr
DW 00 ;end
Tbl4 Macro435:
DW 392 ; no light
DW 00 ;end
Tbl4_Macro436:
DW 393 ; loud sound
DW 00 ;end
Tbl4 Macro437:
DW 115 ; burp (hide and seek)
DW 00 ;end
Tbl4_Macrc438:
DW 116 ; sigh (hide aiid ;eek)
DW 00 ;end
;
Tbl4_Macro439: ; win sound (dmh)
dw 376
dw 376
dw 367
DW 00 ;end
END FURBY SAYS DMH
; start diagnostic tables
Tbl4_Macro440: ; start diagnostic beeps
DW 400
DW 00 ;end
;
Tbl4_Macro441: ; press key beep
DW 401
DW 00 ;end
A-I91
----------------------- Page 193-----------------------

;
Tbl4_Macro442 s ; pass beep
DW 402
DW 00 ;end
Tbl4__Macro443:
DW 403 ; fail beep
DW 00 ;end
Tbl4_Macro444: ; speaker test tone
DW 404
DW 00 ;end
;
Tbl4_Macro445: ; motor cal
DW 405
DW 00 ;end
Tbl4_Macro446: ; feedl
DW 406
DW 00 ;end
Tbl4_Macro447: ; feed2
DW 407
DW 00 ;end
;
Tbl4_Macro448: ; light
DW 408
DW 00 ;end
;
Tbl4_Macro449: ; sound
DW 409
DW 00 ;end
;
Tbl4__Macro450: ; go to sleep
DW 410
DW 00 ;end
end of diagnostic tables dmh
Tbl4_Macro451:
DW 117 ; HIDE AND SEEK SOUND DHM
DW 00 ;end
Tbl4_Macro452:
DW 118 ; HIDE A!>JD SEEK SOUND DHM
DW 00 ;end
;
Tbl4_Macro453:
delay
ME DHM
NAME -KOKO- DMH
DW 399
DW 395
DW 110
DW 00 ;end
;
Tbl4_Macro454:
delay
ME DHM
NAME -MEME- DMH
DW 399
DW 395
DW 396
DW 00 ;end
;
Tbl4_Macro455:
A-192
----------------------- Page 194-----------------------

DW 399 ; delay
; ME
; NAME "E-DAY" DMH
DW 395
DW 112
DW 00 ;end
Tbl4JMacro456:
399 ; delay
; ME
; NAME -DO-MOH- DMH
;end
DW
DW 395
DW 397
DW 00
Tbl4_Macro457:
DW 399 delay
DW 395 ME
DW 114 NAME -TO-TYE- DMH
DW 00 ;end
Tbl4_Macro458:
DW 399 delay
DW 395 ME
DW 117 NAME "BOO- DHM
DW 00 ;end
Tbl4_Macro459:
DW 399 delay
DW 395 ME
DW 398 NAME 'TOH-LOO" DHM
DW 00 ;end
;
Tbl4_Macro460:
DW 399 delay
DW 395 ME
DW 120 NAME -A-TAY" DHM
DW 00 ;end
Tbl4_Macro461:
DW 399 delay
DW 395 ME
DW 131 NAME "WAY-LOH" DMH
DW 00 ;end
;
Tbl4_Macro462:
DW 399 delay
DW 395 ME
DW 143 NAME -U-TYEDW 00
;
Tbl4_Macro463:
; delay
; ME
; NAME -A-LOH- DMH
DW 399
DW 395
DW 145
DW 00 ;end
Tbl4_Macro464:
DW 399 delay
DW 395 ME
DW 152 NAME "KA" DMH
DW 00 ;end
;
Tbl4_Macro465:
DW 399 ; delay
A-193
----------------------- Page 195-----------------------

DW 395 ; ME
DW 166 ; NA?:F -DAH- DMH
DW 00 ; nd
;
Tbl4_Macro466:
DW 3 *9 ; delay
; ME
; NAME -BOH-BAY' DMH
DW 3..
DW 175
DW 00 ;end
Tbl4_Macro467:
399 ; delay
; ME
; NAME "NAH-BAH- DMH
DW
395
DW 177
DW 00 ;end
Tbl4_Macro468:
DW 129 ; dcdle do, ne love you DMH
DW 129
DW 151
DW 00 ;end
;
Tbl4_Macro469: ; SING A SONG DMH
DW 219
D%T 220
DW 219
DW 220
DW 219
DW 220
DW 00 ;end
;
Tbl4 Ma ro470: f B’JRB ATTACK DMH
DW 115
DW 115
DW 115
DW 115
DW 115
DW 115
DW .5
DW 115
DW 0G ;end
;
Tbl4_Macro471: ; WIN SOUND DMH
DV; 313
DW 338
DW 376
DW 00 ;end
;
Tbl4_Macro472:
DW 46
DW 00 ;end
fbl4_Macro473: ; ME DONE (DMH)
DV 53
DW 123
DW 00 ;end
;
Tbl4_Macro474: ; LISTEN ME (DMH)
DW 394
A-194
----------------------- Page 196-----------------------

DW 53
DW 00 ;ena
;
Tbl4_Macro475:
DW 411
DW 00 ;end
Tbl4_/lacro476:
399 ; delay
; ME
; NAME "LOO-LOO" DMH
DW
DW 395
DW 186
DW 00 ;end
;
Tbl4__Macro477:
399 ; delay
; ME
; NAME - JVH-MAY- DMH
DW
DW 395
DW 194
DW 00 ?end
;
Tbl4 Macro478:
DW 399 delay
DW 395 ML
DW 201 NAME "'TOC-LOO" DMH
DW 00 ;end
;
Tbl4_Macro479:
DW 399 delay
DW 395 ME
DW 208 ME "MAY H
-MAY
DW 00 ;end
Tbl4_Macro480:
DW 399 delay
DW 395 ME
DW 224 NAME "MAY-LAH- DMH
DW 00 ;end
-
Tbl4_Macro48i:
399 ; de1ay
; ME
; DAH-NOH-LAH
DW
DW 395
DW 228
DW 00 ;end
;
Tbl4_Macro482:
DW 399 delay
DW 395 ME
DW DW 152 398 NAME "TJH-LOO-KAH' D^:H
DW 00 ;end
;
Tbl4_Macro483:
DW 399 delay
DW 395 ME
DW 152 KA-DA
DW 166
DW 00 ;end
;
Tbl4_Macro484:
; delay
; ME
DW 399
DW 395
A-J95
----------------------- Page 197-----------------------

DW 224 . MAY-LAH-KA
DW 152
DW 00 ;end
?
ribl4__Macro485:
DW 4
DW 00 ;ena
J
Tbl4_Macro486:
DW 4
DW 00 ;end
Tbl4_Macro487:
DW
DW JO ;end
;
Tbl4_Macro488:
DW 4
DW CO ;end
Tbl4_Macro4S9:
DW 4
DW 00 ;end
Tbl4_>!acro490:
DW 4
DW 00 ;end
;
Tbl4_Macro49 ”’ :
DW
DW 00 ;end
Tbl4 Macro492:
DW 4
DW 00 ;end
;
Tbl4_M tcro493:
DW 4
DW CC ;end
Tbl4_Macro4S4:
DW 4
DW 00 ;end
;
Tbl4_Macro495:
DW 4
DW 00 ;end
Tbl4_Macro49 :
DW 4
DW 00 ;end
;
Tbl4_Macro497:
DW 4
DN1 00 ;end
;
Tbl4_Macro49S:
DW 4
DW 00 ;end
;
A-196
----------------------- Page 198-----------------------

Tbl4_Macro499:
DW 4
DW 00 ;end
;
Tbl4_Macro500:
DW 4
DW 00 ;end
J
Tbl4_Macro501:
DW 4
DW 00 ;end
Tbl4_Macro502:
DW 4
DW 00 ;end
Tbl4_Macro503:
DW 4
DW 00 ;end
Tbl4_Macro504:
DW 4
DW 00 ;end
Tbl4_Macro505:
DW 4
DW 00 ;end
;
Tbl4_Macro506:
DW 4
DW 00 ;end
Tbl4_Macro507:
DW 4
DW 00 ;end
Tbl4_Macro508:
DW 4
DW 00 ;end
;
Tbl4_Macro509:
DW 4
DW 00 ;end
;
Tbl4_Macro510:
DW 4
DW 00 ;end
?
Tbl4_Macro511:
DVJ 4
Ur’ 00 ;end
A-197
----------------------- Page 199-----------------------

;; ;
* * * • • •• SAYSENT pointer tables (128 max per table 255 tables max)
Spch_grpl:
DW Tbll_say000
DW
Tbll
^sayOOl,Tbll_sayC02.Tbll_say003,Tbll_sayQ04,Tbll_say005
DW
Tfcll_say00ci ,Tbll_say007,Tbll_say008.Tbll_say009,Tbll_say01C
DW
Tbll_sayO11.Tbll_sayO12,Tbll_sayO13.Tbll_sayO14.Tbll_sayO15
DW
Tbll_sayO16,Tbll_sayO17,Tbll_sayO18.Tbll_sayOIf ,Tbll_say"20
DW
Tbll_say021.Tbll_say022,Tbll_say023,Tbll_say024 #Tbll_sayC25
DW
Tbll__say026,Tbll_sayC27,Tbl1_sayG28,Tbll_say029.Tbll_sayC30
DW
Tbll_say031,Tbll_say032,Tbll_sayC33,Tbll_say034 ,Tbll_say035
DW
Tbll_say036,Ibll_cay037,Tbll_sayC38,Tbll_say039,Tbll_say040
DW
Tbll_say041 f Tbl1 _say042,Tbl- _sayC43 ,Tbll_say044,Tbll_say045
DW
Tbl1_say046 # Tbll_say047,Tbll__say048,Tbll_say049,Tbll_say050
DW
Tbll_say051,Tk.I_say052,Tbll_»ay053(Tbll_say054 ,Tbll_say055
DW
Tbll_say056,Tbll_say .7,Tbll_say058,Tbll__say059,Tbll_say060
DW
Tbll_say061 ,Tbll_sa.C62.Tbll_say063,T _say064,Tbll_say065
DW
Tbll__say066,Tbll_say067,Tbll_say068,Tbll__say069.Tbll_say070
DW
Tbl1_say071,Tbll_say072,Tbll_say0?3,Tbll_say074,Tbll__say075
DW
Tbll_say076 ,Tbll__say077,Tbll_say078,Tbll_say079,Tbll_say080
DW
Tbll_»ay081.Tbll_say082,Tbll_say083,Tbll_say084.Tbll_say085
DW
Tbll_say086,Tbll_say087,Tbll_say088.Tbll_say089,Tbll_say090
DW
Tbll_say091,Tbll_say092.Tbi:_say093.Tbll_say094,Tbll_say095
DW Tbll_say096,Tbll_say097,Tbll__say098,Tbll_say099
DW
Tbll__saylOO,Tbll_sayl01.Tbll_oayl02,Tbll_saylQ3.Tbll_sayl04
Tbll_sayl05.Tbll_sayl06,Tbll__sayl07,Tbll_say108,Tbll_sayl09
Tbll_sayi10,Tbll_sayll1,Tbll_sayll2.Tbll_sayll3 # Tbll_sayll4
Tbll__eayl15,Tbll_say116,Tbll_say117,Tbll_say118,Tbll_say119
Tbll_sayl20 # Tbll_sayl21,Tbll_sayU2,Tbll_sayl2J ,Tbll_sayl24
Tbll_sayl25,Tbll_say!26,Tbll_say!27
DW
DV.
DW
DW
DW
A 198
----------------------- Page 200-----------------------

;
Spch_grp2:
Tbl2_sayl28
Tbl2_sayl29,Tbl2__sayl30,Tbl2_sayl31,Tbl2_sayl32,Tbl2_sayl33
Tbl2__sayl34,Tbl2_aayl35,Tbl2_sayl36,Tbl2_sayl37,Tbl2_sayl38
Tbl2_sayl39,Tbl2_aa/140,Tbl2__sayl41,Tbl2_sayl42.Tbl2_sayl43
Tbl2__sayl44,Tbl2_sayl45.Tbl2_aayl46,Tbl2_sayl47,Tbl2_sayl48
Tbl2_sayl49.Tbl2_sayl5u,Tbl2_sayl51.Tbl2_sayl52.Tbl2_sayl53
Tbl2_sayl54,Tbl2_aayl55,Tbl2_sayl56.Tbl2_sayl57,Tbl2_sayl58
Tbl2_sayl59,Tbl2_sayl60 4 Tbl2_sayl61,Tbl2_aay*» «2,Tbl2_sayl63
Tbl2__sayi64,Tbl2_aayl65,Tbl2__sayl66,Tbl2_sa_ «.b7,Tbl2_sayl68
Tbl2__sayl69,Tbl2_sayl70.Tbl2__say171,Tbl2_say172,Tbl2_sayl73
Tbl2__sayl74,Tbl2_sayl75,Tbl2_sayl76 fTbl2_aayl77,Tbl2__sayl78
Tbl2_sayl79,Tbl2_aayl80,Tbl2_sayl81,Tbl2_sayl82,Tbl2_sayl83
Tbl2_sayl84 ,Tbl2_aayl85,Tbl2__sayl86,Tbl2_sayl87,Tbl2_sayl88
Tbl2_sayl89,Tbl2_sayl90,Tbl2_sayl91,Tbl2_sayl92 ,Tbl2_sayl93
Tbl2_sayl94,Tbl2_sayl95.Tbl2_sayl96,Tbl2_sayl97,Tbl2_sayl96
Tbl2_sayl99,Tbl2_say200,Tbl2_say201,Tfcl2_say202,Tbl2_say203
Tbl2_say204.Tbl2_say205.Tbl2_say206,Tbl2_say207,Tbl2_say203
Tbl2_say209,Tbl2__say210,Tbl2_say211,Tbl2_say212,Tbl2_say213
Tbl2_say214fTbl2_say215,Tbl2_aay216,Tbl2_say217.Tbl2_say218
Tbl2_say2i9,Tbl2_say220,Tbl2_say221.Tbl2_say222.Tbl2_say223
Tbl2_aay224,Tbl2_say225,Tbl2_say226,Tbl2_say227,Tbl2_say226
Tbl2_say229fTbl2_say230,Tbl2_say231,Tbl2_say232,Tbl2_say233
Tbl?_say234,Tbl2_say235 ,Tbl2_cay236,Tbl2_say237,Tbl2_say238
Tbl2_say239,Tbl2_say240.Tbl2_say241.Tbl2_say242,Tbl2_say243
Tbl2__say244.Tbl2_.fir.y245.Tbl2_say246,Tbl2_sav247,Tbl2_say248
Tbl2_say249 ,Tbl2_s^y250,Tbl2_say251,Tbl2_say252,Tfcl2_say253
Tbl2_say254,Tbl2_5;ay255
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
;
Spch_grp3:
Tbl3_say256
Tbl3__say257,Tbl3_say258,Tbl3_say259,Tbl3_say260,Tbi3_*ay2 l
Tbl3_say262(Tbl3_say263,Tbl3_say264,TL13_say265,TL13_say266
Tbl3_say267fTbl3_say268,Tbl3_say269,Tbl3_say270 #Tbl3_say271
Tbl3_say272,Tbl3_say273.Tbl3_say274,Tbl3
Tbl3_say277,Tbl3_say278,Tbl3_say279.Tbl3-_say aay280 275..Tbl Tbl33._say ay276 281
Tbl3_say282,Tbl3_say283,Tbl3_say284,Tbl3_say285.Tbl3. ay286
Tbl3_8ay287.Tbl3_say288,Tbl3_say289,Tbl3_say290,Tbl3_say291
Tbl3
„aay292.Tbl3_say293,Tbl3_say294,Tbl3_say295.Tb!3_say296
Tbl3_say297.Tbl3_aay298,Tbl3_say299,Tbl3_aay300 # Tbl3_say301
Tbl3_say302 # Tbl3_say303,Tbl3_say304 # Tbl3_say305,Tbl3_say306
Tbl3_aay307 # Tbl3_say308fTbl3_say309,Tbl3
-
say310.rbl3_say3U
Tbl3_aay312,Tbl3_aay313,Tbl3_say314,Tbl3_say315,Tbl3_say316
Tbl3_8ay317,Tbl3_say318,Tbl3_say319,Tbl3_say320,Ibl3_say321
Tbl3_say322 # Tbl3_say323,Tbl3..say324,Tbl3_say325.1.13_say3?f
Tbl3_say327,Tbl3_say328,Tbl? aay329,Tbl3_aay330,Tbl3_aa'. 331
Tbl3_say332,Tbl3_say333.Tbl iay334,Tbl3_say335fTbl3_say336
Tbl3__say337,Tbl3_say338,Tbl say339,Tbl3_say340,Tbl3_5ay341
Tbl3_aay342,Tbl3_aay343,Tbl _say344,Tbl3_say345,Tbl3_say346
Tbl3_aay347,Tbl3_aay348,Tbl3_say349 # Tbl3_say350 # Tbl3_say351
Tbl3_say352 # Tbl3_say353,Tbl3_aay354,Tbl3_say355 # Tbl3_say356
Tbl3_say357 #Tbl3_aay358.Tbl3.„ aay359 #Tbl3_say360,Tbl3_say361
Tbl3_say362,Tbl3_say363,Tbl3_say364,Tbl3_say365,Tbl3_say366
Tbl3_say367 #Tbl3_aay368 # Tbl3„say369.Tbl.3 say370,Tbl3_cay3'?l
Tbl3_say372 # Tbl3
-
say373.Tbl3_say374 4 Tbl.3 aay375,Tbl3_say376
Tbl3_say377 #Tbl3_aay378.Tbl3_say379.Tbl3_aay380,Tbl3_say381
DW
DW
DW
DW
D».
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
A-199
----------------------- Page 201-----------------------

» -• •-• »'• » -• • * (/) *• *•
> H n
o 3*
rt (P
l- Hsr to r or
cr M- tr cr K H- «0 o r i
rr rr rr C (0 o
»-* 3(0 IP to *CO 0 §S§S g 5? § g g g H g H g g S S 5p s g g g g g g g g.g s
3 w
rt t*l
rt,
O C7N -J M- MX to o
c n O R n t o 3 n V,
< *M— 'ftt> r<• ft rr> I D> n «Q OX
i r c r c r r r c r D' t r t r c r c r t r c r c r t r c r t r c r t r c r t r t r t r c r D' t r D' D'
I I I I I I I I I I I I I I I I I I I I I I I I I i I
c n w t n w t n t o t n m t n w t n c n t D t n t f l t n o t a t o t o B J w n e a w w w
L/1 i/l > j-> 4* ^ ^ ^ 49» g p y ^ ^ ^ 4* l/J O J O J U i
H o o o u i o u 'o' o u ^ o o c c v j ' o u' c u t o m o u 'j m ^ o’ i r ^> o i n o u ^ w w t-' o u i o u i o u i o u J H H O O ^ V O O O' #®k
t r c r c r c r t r c r t r t r t r t r c r o' t r o'
I I I I I I I I 1 I i I I I I I I I I I I I I I I i
w w w w t o t o w w t n t a t a w t n w w w t a w t n t o t D t n t a B t n t a
M O O v O V O Q D O D s3 s J ^ (M P l O <» <» W W W K) H H O O «) V) C O
t r c r c r t r c r t r c r t r c r c r _
£± A «fc»
I I I I I I I I i I I I I I I I I I I I I I I I i
n i n (A i M M t n m w w B B w w w B m t a w t a t o t a t a t n t o
£B Q| Q t 0» C i) f t £> C» & » » O O O » D' » » a » P» » » »
O O s J W s J W >O v O C D -J K J v J K 0D 'J '0) OV s J M (T. U>J W ’ l P'^J I O i» >W W M K J M >) W) ’H M O O M J W 'J W *J W ) »O C D 'J
3
_ „ _ _ _ _ _ c r o' D' t r c r t r D t r
k-. k-. v-' v
_* k-' k-« v-' k-* k-' »~-‘ k~' k-' k-» k-' k~* k-, k-' k— k-' k-' k-’ k-' k-' k-' k-'
I I I I I I I I I I I I I I I I I I I I I I I I I
B i D W » w «n w w w t n i n w <n i» o i n » M y» t t » » » B t a
b b & d f t D i D i (l i [i) &> 9 l> (i i O) P D i p K 9 l l i|i P> 9 (1 [l>
4*k v i4^ 4^
O O t O CDU» a5 ^U i a O O C D s I v J C h C M 3 W C D U C D U C D U J O ^ l O ^3 ^W C D W W U i t J t O H H O O U J U Q O (X) W Q D W C n W 0O U J C D
o* D* t r c r t r t r o* t: t r t r
M H M H P M H H H H M H M H H H H H M H M M M P M
i* i' i* i> |I» ^ <5» ^ <k <k fk
I I I I I I I I I I I I I I ( I I I I I I I I I I
t Q t o t o t n n t o t n t o t o t A t n i n t o t n t o t o m t n a t o t o t n n t n i A
jj\ 4^ 4^ 4^ ^ 4^ 4» 4 4^ 4\ 4^ 4^ 4v 4^ 4 ~ 4^ 4v 4^ 4^
0 0 '0 «) ® 0 0 *J ‘J l T k » l/' l O i t» <» U i u r o K J H H O O «>'0 ©
(0 <k V£ ^ V O i t k «t) <> V O i k t f) <9i k O t k V O <k V O f k k O f k V O <k V O <k (0
0» (T1> 3H 3 ^ 3
I s vpj >-coc
U) c o
*-• 11 11 n »1 M
ra> to to » to o tv
® i p C L c
rr H M O. O'
O I t »
o n <
O rt rr pi 0i
k-* O
C rr
M - <0 I
rt <PI “• *WT3 1 mO om «<P>
C M
<t> H
O
r h X
i O
r»>
r» (0 lo
§ $
r<
I s ? -tr3->CO3 ato>
r- x
3*
<Q 3 » < 0 £» 3 3 3 3 3 3 3 3 3 3 3 3 - 1
O rH- r r f t O I Q H t r
O O M O r t M H
c H 3 :T: U»
•o M r r • O I
CQ » H- 2 • LH *0C 9 w
Brt «» **0I P 3Orr* 2»r1^ *rt o1,
3 9
n
•O O B
*• k-*
a t w
r-*- S
C w Ul
•9 rr
-C 3*
I P I t
rt
00
n n 3*
ui
< tr rt rt
£"
0 O'
C *-•- -* O M
I P r r i p C M
O
- 3*
3* 3*
O M* %
o c o3O 3o* to c r S i r i r ^ ^ S S t r ^ c r ^ t r S S
>1 I P r t o> *0
» 3
IP rt
r t O (t
O »1 H- I P
« o
B
O ft t~“ X
< n 10 rr
o o* » o C O
?3 • crI P-* oCt o Bt o rt mto % % % %
I Q I P <1 ort, a aip -O3' -O3* 3 3 3 o-
< M
»» P u n
k-* a
O C £ M
<D w •a
f p
I P 3
a u*
K>
3
----------------------- Page 202-----------------------

8Fh ;hi voice (8f is very squeteeeke) (8F=143)
;one step higher than normal use range 81-8F (129-143)
;normal voice
;one step lower than normal
;lo voice ( very low)
81h
00
; 01
; 2fh use range 01 *>F (01-47)
; ;
A math routine in ’say_0 * converts the value for or -
; if <80 then subtracts from 80 to get the minus version of u
; ie, if number is 70 then TI gets 10 (which is -10)
; If number is 80 or > 80 then get sent literal as positive.
NOTE: MAX POSITIVE IS 8B
MAX NEGATIVE is 2F ( 80h
- 2Fh or 51h)
8Bh is hi voice (8f is very squeeeeeke)
2Fh lo voice ( very low)
; When entering changes,
; and it is modified by adding or subtracting a pitch change :::
'Voice’ holds the current pitch for Furby
, ex: Voice+8 increases the pitch from the current voice by 8
; ex: Voice-10 decreases the pitch from the current voice by 10
; The next group of entries are the speech words.
; The last line is the terminator of 'FF ’
(BOTTOM)
1 is very fast
46 is average
255 is very slow
;
46 (speed of speech)
(dc sound 123)
(do sound 43)
DB
DB 123
DB 43
DB FFH
PITCH PROGRAMMING RANGE:
Vcice^8 (highest)
Voice-20 (lowest)
Tbll_sa/0f J:
DB 46
Voice
163
DB
DB
DB FFH
;GEORGE 07/03/98
Tbll_say001: ;dON START SEQ1 AGE1
DB 46 ;sj *ech speed
Vcice+8
1-9,162;end lo2,164,149
DB
DB ;DONE 1FRONT SEQ1
DB FFA
;
Tbll_say002:
A-201
----------------------- Page 203-----------------------

DB 52 ;speech speed
DB Voice+8 ;system pitch setting
DB 117,59 ;DONE 1FRONT SEQ2 agel
DB FFH ;end
Tbll_say003:
DB 46 ;speech speed
;system pitch setting
;1front seq3 - seq4-partl-SEQ7PART2
Voice-4
118
DB
DB
DB FFH ;end
;
Tbll_say904:
DB 46 ;speech speed
DB Voice ;system pitch setting
DB 62,22,85 ;Ifrone seq3 part2
DB FFH ;end
Tbll _say005:
50 ;speech speed
;system pitch setting
;lfront seq4 part 2
DB
Voice+8
56, 39
DB
DB
DB FFH ;end
;
Tbll _sayOC6:
DB 46 .• speech speed
Voice ;pitch control
162, 162,99, 117
DB
DB ;seq5 agel front part of seqf
DB FFH ;end
Tbll_say007:
DB 55 ; speech speed
•.
system pitch setting
;seq6 agel front back part
; erd
Voice * 8
156
DB
DB
DB FFH
Tbll _say008:
DB 46 ;speech speed
Voice ;pitch control
162 , 162,99, 10, 39
DB
DB ;SEQ7 FRONT AGE1 ADD SAY 003
DB FFH ;end
;
Tbll_say009:
46 ,* speech speed
system pitch setting
DB
Voice
99 99, 145
DB
DB ;SEQ8 FRONT AoEl
DB FFr ;end
Tbll_say010:
46 ;speech speed
;system pitch setting
DB
DB Voice
DB 98 ;seq9 FRONT AGE1
DB FFH ;end
Tbll_sayOU:
;speech speed
;system pitch setting
96,165.165,165,129,149
; end
DB 30
DB Voice+8
DB ;seqlO FRONT ASE1 ADD SAY20
DB FFH
Tbll_say012:
A-202
----------------------- Page 204-----------------------

DB 50 ;speech speed
Voice ;system pitch
136,165,162,45
;end
’ ’ing
, eqll FRONT AGE1 ADD SAY20
DB
DB
DB FFH
Tbll_say013:
58 ;speech speed
;system pitc; setting
DB
Voice
i:9,136,117
DB
DB ;seql2 FRONT AGE1 ADD
SAY20 ON FRONTPART
DB ;end
;
Tbll_say014:
DB 60 ;sr
Voice*8 t.itch : et ing
145,162
DB
DB ;seql3 FRONT AGE1
ADD SAY22
DB FFH ;end
;
Tbll_say015:
;speech speed
;system pitch setting
DB 46
Voice+8
156
DB
DB ;seql4 FRONT AGE1
DB FFH ;end
Tbll__sayQ16:
;speech speed
;system pitch setting
DB 46
Voices7
119,58
DB
DB ;seql5 FF T AGE1
DB FFH ;end
Tbll_say017:
;speech speed
•.
system pitch setting
;seq16 FRONT AGE1 BETWEEN 2(FAY20)ADDSAY37
;end
DB 46
DB Voice
DB 37
DB FFH
;
Tbll__say018:
;speech speed
;system pitch setting
;SEQ16 FRONT AGE1
DB 46
Voice
123
FFH
DB
DB
DB ;end
;
Tbll_sayQ19:
;speech speed
;system pitch setting
;SEQ1 FRONT AGE2 REPEAT 22
DB 46
Voice
118
DB
DB
DB FFH ;end
Tbll_say020:
;speech speed
;system pitch setting
;SEQ2 FRONT ADD 20 TO FRONT
;end
DB 46
Voice+7
77
,35
DB
DB
DB FFH
;
Tbll_say021:
;speech speed
/system pitch setting
;SEQ3AGE2 FROf'JT AID FF}9AGE1
DB 46
Voice
39,39
DB
DB
DB FFH ;end
A-203
----------------------- Page 205-----------------------

Tbll_say022:
DB 56 ;speech speed
;system pitch setting
;SEQ4 AGE2 FRONT
Voice-*7
156
DB
DB
DB FFH ;end
Tbll_say023:
/speech speed
;system pitch setting
;SEQ4 AGE2 FRONT
DB 46
Voice+7
8,162,22
DB
DB
DB FFH ;end
Tbll_say024:
;speech speed
Voice*7 ;system pitch setting
117,81,27
FFH
DB 46
DB
DB ;SEQ5 AGE2 FRONT
DB ;end
Tbll_say025:
;speech speed
;system pitch setting
;SEQ6 AGE2 FRONT
DE 46
DB Voic
59,35,46,164,77
/ end
DB
DB Ff- H
Tbll_say026:
;speech speed
;system pitch setting
; £ F.Q 7 AGE2 FRONT PART 1
DB 46
DB Vcice*8
DB 99
DB FFH ;end
Tfcll_say027:
;speech speed
/ system pitch setting
;SEQ 7 AGE2 FRONT PART 2
DB 46
Vcice+7
60,39,117
DE
DB
D5 FFH ;end
Tbll_say02r:
;speech speed
system pitch setting
DB 46
Voice
145
DB
DB /SEQ 8 AGE2 FRONT say45(2)*22
DB FFH ;end
Tbll_say0?9:
;speech speed
,- system pitch setting
;FRONT SEQ9 AGF2
DB 46
Vcice+5
149 ,162.162,164,149
DB
DB
DB 1 H ;end
;
Tbll_say03Q:
/speech speed
/ system pitch setting
DB 60
Voice+7
96,163,163,129
/ end
DB
DB ;SEC10 FRONT AGE 2 ADD 48
DB FFH
Tbll_say^31:
/ speech speed
/ system pitch setting
DB 60
Voice*8
39,63
DB
DB / SEQ11 FRONT AGE 2
DB FFH /end
A-204
----------------------- Page 206-----------------------

Tbll_say032:
DB 46 ;speech speed
Voice*7 ;system pitch setting
128,117
DB
DB ;SEC12 FRONT AGE 2 ADD 20
DB FFH ;end
Tbll_say033:
56 •speech speed
;system j ch setting
;SEQ14 FRONT AGE2
DB
Voice*7
99,55,162,28
DB
DB
DB FFH ;end
;
Tbll_say034:
;speech spec\
;system pitch setting
;SEQ15 fRONT AG_2 ADD 20
DB 46
Voice*6
136,34
DB
DB
DB FFH ;end
Tbll_say035:
;speech speed
;system pitch setting
DB 56
Vcice-*6
35,161,48.162,93,133
DB
DB ;SEQ16 FRONT AGE2 ADD20 TO
BEGGINING
DB -FH ;end
;
Tbll_say036:
;speech speed
;system pitch setting
DP 50
Voice+3
162,1
DB
DB ;SEQ1 FRONT AGE2 ADD 20
DB FFH ;end
;
Tbll_sayQ37:
;speech speed
•.
system p'tch setting
;SEC2 FRONT \GE3
DB 46
Voice
81.77 52
DB
DB
DB FFH ;end
Tbll_say038:
;speech speed
;system pxtch setting
;SEQ3 FRONT AGE3 ADD29
DB 46
Voice*8
1.1
FFH
DB
DB
DB ;end
;
Tbll_say039:
;speech speed
•.
system pitch setting
DB SO
Voice*6
162.14,27
DB
DB ;SEQ4 FRONT A3E4 ADD41
DB FFH ;end
;
ERROR
Tbll_say040:
;speech speed
•.
system pitch setting
DB 46
DB Voice
DB
DB FFH ;end
;
A-205
----------------------- Page 207-----------------------

Tbll_say040:
DB 46 ;speech speed
;system pitch setting
;SEQ6 FRONT AGE3
DE Voice
DB 99,35,47,58
DB FFH ;end
Tbll_say041:
DB 46 ;speech speed
;system pitch setting
;SEQ7 FRONT AGE3 ADD 22
Voice
99,60,77.23
r
DB
DB FFH ;end
Tbll_say 42:
DB 46 ;speech speed
;sy weir, pitch setting
;bEQ8 FRONT AGE3 ADD 22
Voice
99,145
DB
DB
DB FFH ;end
ERROR
Tbll_say044:
;speech speed
Voice ;system pitch setting
4 GO TO 22
FFH
DB 46
DB
DB
DB ;end
Tbll_say043:
DB 30 ;speech speed
;system pitch setting
96,165,165,165 ,129,149
DB Voice*8
DB ;seqlO FRONT .\G£3 ADD
SAY20
DB FFH ;end
“bll_say044:
50 ;speech speed
;system pitch setting
;SEQ11 FRONT AGE3
DB
Vcice-*4
145
DB
DB
DB Fr'K ;end
Tbll_say045:
;speech speed
;system pitch setting
;SEQ12 FRONT AGE3 (HEEY,TICKLE MEI ALD2C
DB 46
Voice
119,77
DB
DB
DB FFH ;end
Tbll_say046:
;speech speed
stem pitch setting
DB 46
Voice
128
DB
DB ;SE013 fRONT AGE3 (NANNY,NANNY) ADD !:
DB FFH ;end
;
Tbll_say047:
;speech *peed
;syst m pitch setting
;SEC i fRONT AGE3 (RASBERRY* hE HE HE ) ADD2C
;end
DB 46
Voice
136,117
DB
DB
DB FFH
Tbll_say048:
DB 46 ;speech Bpeed
A-206
----------------------- Page 208-----------------------

Voice
35,162,47
DB ;system pitch setting
DB ;SEQ16 kAH LOVE FRONT AGE3 ADD 20
DB FFH ;end
Tbll_say049:
DB 56 ;speech speed
;system pitch setting
;SEQ16 (U-NYE QUICK KISS) FRONT AGE3 \DD20
DB Voices6
DB 81,133
DB FFH ;end
Tbll__say050:
;speech speed
;system pitch setting
; SEQ2 (TICKLE) FRONT AGE4
;end
DB 46
DB Voice
DB 77
DB FFH
;
Tbll_say051:
;speech speed
Vaice+6 ;system pitch setting
;SEQ2 (AGAIN) FRONT AGE4
;end
DB 46
DB
DB 1
DB FFH
;
Tbll_say052:
;speech speed
;system pitch setting
;SEC3 (YOU) FP.ONT AGE4
;end
DB 46
DB Voice
DB 93
DB FFH
;
Tbll_say053:
;speech speed
.•system pitch setting
;SLQ3 (ME) FRONT AGE4
;end
DB 46
DB Voice
DB 52
DB FFH
;
Tbll_say054:
;speech speed
•.
system pitch setting
;SEQ4 (LOVE) FRONT AGE4
;end
DB 46
DB Voice
DB 47
DB FFH
;
Tbll_say055:
;speech speed
;system pitch setting
;SEQ5 (HE HE Hr- FRONT AGE4
DB 46
Voice*6
117
DB
DB
DB fFH ;end
;
Tbll__say056:
;speech speed
•.
system pitch etting
;SEQ5 (BIG FUN) FRONT AGE4 ADD26
DB 46
Voice
8,27
DB
DB
DB FFH ;end
Tbll_say057:
;speech speed
•.
system pitch setting
;SEQ8 (NO) FRONT AGE4
;end
DB 46
DB Voice
DB 60
DB FFH
;
Tbll_say058:
DB 46 ;speech speed
A-207
----------------------- Page 209-----------------------

DB Voice .•system pitch setting
;SEQ8 (PLEASE' FRONT AGE4
;end
DB 68
DB FFH
Tbll_say059:
46 ;speech speed
;system pitch setting
;SEQ9 (HEEY) FRONT AGE4 ADD71
;enc
DB
Voice+8
119
DB
DB
DB FFH
Tbll_say060:
;speech speed
;system pitch setting
;SEQ14 (PARTY) FRONT AGE4
;end
DB 46
DB Voice
DB 66
DB FFH
Tbll_say061:
;speech speed
;system pitch setting
;SEQ15 (WA WA WA) fRONT AGE4 ADD 22
;end
DB 46
Voice
108
DB
DB
DB FFH
END GEORGE 07/03/98
;GEORGE 07/04/98
;START SAY FORTUNE
Tbll_say062:
;speech speed
;system pitch setting
;FORTUNE TELL (ASK)
DB 46
DB VoiceDB 3
DB FFH ;end
Tbll_say063:
;speech speed
;system pitch setting
•.
FORTUNE TELL (YES)
DB 46
DB Voice
DB 92
DB FFH ;end
TblI_say0b4:
;speech speed
;system pitch setting
.•FORTUNE TELL (BIG)
DB 46
Db Voice
DB 8
DB FFH ;end
Tbll_say065:
;9pe.< h speed
;system pitch setting
•.
FORTUNE TELL (VERY.BIG)
DB 46
Vcice+6
84.8
FFH ;end
DB
DB
DB
Tbll_say066:
;speech speed
;system pitch setting
•.
FORTUNE TELL (SEE YES)
100
Voice
162.70
FFH ;end
DB
DB
TB
DB
Tbll_say067:
•.
speech speed
;system pitch setting
•.
Fortune tell (SLOW WHINE)
DB 0
Voice-4
157.162.157
;end
DB
DB
DB FFH
A-208
----------------------- Page 210-----------------------

Tbll_say068:
;speech speed
•.
system pitch 'etting
•.
FORTUNE TELL (02WHA)
DB 46
DB Voice
DB 64
DB FFH ;end
Tbll_say069:
;speech speed
•.
system pitch setting
•.
FORTUNE TELL <NO)
DB 46
DB Voice*5
DB 60
DB FFH ;end
;
Tbll_say070:
;speech speed
•.
system pitch setting
•.
FORTUNE (WORRY)
DB 46
DB Voice*?
DB 90
DB FFH ;end
Tbll_say071:
;speech speed
*,
system pitch setting
•.
FORTUNE (SOUND)
DB 46
DB Voice*?
DB 73
Du FFH ;end
;
Tbll_say072:
;speech speed
•.
system pitch setting
•.
FORTUNE (GOOD)
46
Voice
DR
DB
DB 28
DB FFH ;end
;
Tbll_say073:
;speech speed
.- system, pitch setting
;FORTUNE (VERY)
DB 4c
DB Voice
DB 84
DB FFH ;end
;
Tbll_say074:
speech speed
system pitch setting
FORTUNE (WHOOPEE)
DB 50
Voice*8
159
DB
DB
DB FFH ;end
;
Tbll_say075:
;speech speed
;system pitch setting
•.
FORTUNE (GOOD)
DB 46
DB Voice-5
DB 28
DB FFH ;end
Tbll_say076.
;speech speed
;system pitch setting
•.
FORTUNE (RASPBERRY)
DB 56
Voice*7
136
DB
DB
DB FFH ;end
;
Tbll_say077:
•.
speech speod
•.
system pitch setting
•.
FORTUNE (oH oH)
DB 50
Voice
129
FFH ;end
DB
DB
DB
A-2Q9
----------------------- Page 211-----------------------

;
Tbll_say078:
DB 50 ;speech speed
;system pitch setting
;FORTUNE (MAY BEE)
DB Voice+7
DB 49
DB FFH ;end
;END SAY FORTUNE
;END GEORGE 07/04/98
;START HANGOUT
;GEORGE 07/04/98
Tbll__say079:
56 ;speech speed
;system pitch setting
;SEQ1 HANGING(DE DE DE ,DUK
DB
Voiced
110
TB
DB DUM DUM
DUM) AGE1
DB FFH ;end
;
Tbll_say080:
;speech speed
;system pitch setting
;SEQ1 HANGING{ DUM DUM DUM) AGE1; ADD 83
DB 60
Voice 8
109
DB
DB
DB FFH ;end
;
Tbll_sayQ81:
;speech speed
;system pitch setting
;SEQ2 HANGING (BEEDO)
DB 56
Voice+8
116
DB
DB
DB FFH ;end
Tbll_say082:
;speech speed
;system pitch setting
:SEQ3 HANGING (YA DA DA )
DB 46
Voice+7
113
DB
DB
DB FFH ;end
;
Tbll_say083:
;speech speed
;system pitch setting
:SEQ3 HANGING (OMPAH bRUMM)
DB 53
Voice*5
162,114.162,114
;end
DB
DB
DB FFH
;
Tbll_say084:
;speech speed
Voice^-8 ;system pitch setting
115
DB 46
DB
DB :SEQ3 HANGING (YA DA DA OMPAH bFUKM BABABUM)
DB FFH ;end
;
Tbll_say085:
;speech speed
Voice+5 ;system pitch setting
126,163 ;SEQ4 HANGING (LA LA)
;end
DB 60
DB
DB
DB FFH
Tbll_say086:
;speech speed
Voice+5 / system pitch setting
127
DB 56
Db
Db ;SEQ4 HANGING (LA LA)
DB FFH ;end
A-210
----------------------- Page 212-----------------------

Tbll_say087:
DB ;speech speed
Voice ;system pitch setting
;SEQ5 HANGING (HUMMMMMM)
46
DB
DB 101
DB FFH ;end
Tbll_say088.
;speech speed
Voice ;system pitch setting
;SEQ5 HANGING (BO DAH WA LO)
DB 46
DB
DB 11
DB FFH ;end
Tbll_say089:
;speech speed
Vcice+7 ;system pitch setting
143,163 ;SE . *6 HANGING (SNORE)
;end
DB 46
DB
DB
DB FFH
9
Tbll_say090:
;speech speed
Voice ;system pitch setting
;SEQ6 HANGING (SHOUT)
DB 46
DB
DB 148
DB FFH ;end
Tbll_say091:
;speech speed
Voice ;sys'.em pitch setting
63, **5 ;SEQ6 HANGING (OK,KAH)
FFH ;end
DB 46
DB
DB
DB
;
Tbll_say092:
;speech speed
Voice ;system pitch setting
;SEQ6 HANGING (U-TYE)
DB 46
DB
DB 82
DB FFH ;end
;
lbll__say093:
;speech sp^ei
;system p z'i setting
;SEQ7 HANGING (SOFTER)
DB 60
Voice+8
144
DB
DB
DB FFH ;end
;
Tbll_say094:
;speech speed
;system pitch setting
;SEQ7 HANGING (SOFTER)
DB 46
Vcice-4
144
DB
DB
DB FFH ;end
Tbll_say095:
;speech speed
;system pitch setting
;SEQ8 hANGING (kITTY KITTY)
DB 46
Voice
124,162
FFH ;end
DB
DB
DB
;
Tbll__say096:
DB 56
;system pitch setting
;3EQ9 HANGING (DO BE DOBE DO)
Voice
11.
FFH ;end
DB
DB
DB
A-211
----------------------- Page 213-----------------------

Tbll_say097
DB 60 ;speech speed
/ system pitch setting
;SEQiO HANGING (YAWN)
Voice+7
161,164,164,161
;end
DB
DB
DB FFH
;
Tbll_say098:
100
Voice+6
;speech speed
/system pitch setting
;SEQ11 AND SEQ12 HANGING (SIGH)
DB
DB
DB 140
DB FFH / end
Tbll_say099:
46 / speech speed
/system pitch setting
/SEQ13 SEQ14 HANGING (HAA)
DB
Voices8
100
DB
DB
DB FFH / end
Tbll_sayl00:
DB 46 ;speech speed
Voice / system pitch setting
/SEQ14 HANGING (HEEY)
DB
DB 119
DB FFH z end
;
Tbll_sayl01:
/speech speed
Voice / system pitch setting
132,165 ,132
/ end
DB 46
DB
DB /SEQ16 HANGING (PHONE) ADD20
DB FFH
Tbll
.saylv *>:
/speech speed
Voice / system pitch setting
165,165,165,165
/ end
DB 46
DB
DB ;SEQ16 HANGING (PAUSE) ADD20
DB FFH
Tbll_sayi03:
/speech speed
/system pitch setting
/SEQ6 HANGING (UP)
DB 46
DB Voice+5
DB 83
DB FFH / end
Tbll_sayl04:
/ speech speed
Voice / system pitch setting
;SEQ6 HANGING AGE3 (ME)
DB 46
DB
DB 52
DB FFH ;end
;
Tbll_sayl05:
;speech speed
Voice / system pitch setting
;SEQ6 HANGING AGE3 (OK)
DB 46
DB
DB 63
DB FFH / end
Tbll_sayl06:
/speech speed
Voice /system pitch setting
;SEQ5 HANGING AGE3 AND 4
DB 46
DB
DB 13
DB FFH z end
A
-212
----------------------- Page 214-----------------------

END HANGOUT
Tbll_sayl07:
;speech speed
Voice ;system pitch setting
165,165 ;Fortune delay
FFH ;end
DB 46
DB
DB
DB
END GEORGE 07/04/98
START FEED
GEORGE 07/05/98
START fEED
spch_grp2 was here
; Saysent groups for Tfcl 2
;STARTS AT 128
Tbll_sayl08:
;speech speed
Voice ;system pitch setting
166
FFH
DB 100
DB
;SEQ1 FEED AGE1 (UUMMM)
;end
DB
DB
NOT USED
Tbl2_sayl29:
;speech speed
;system pitch setting
;SEQ1 FEED AGE1 (AY-TAY)
;end
DB 46
DB Voice*8
# DB
DB FFH
Tbll_sayl09:
;speech speed
Voice ;system pitch setting
167.167
FFH ;end
DB 100
DB
DB ;SEQ1 FEED AGE1 (AAAAH)
DB
;
Tbll_sayll0:
;speech speed
•.
system pitch setting
;SEQ2 FEED AGE1 (KOH-KOH)
;end
DB 56
DB Voice*3
DB 39
DB FFH
k
;
Tbll_saylll:
;speech speed
Voice*7 ;system pitch setting
;SEQ2 FEED AGE1 (MEE MEE)
DB 56
DB
DB 55
5 FFH ;end
;
Tbll_sayll2:
;speech speed
Voice ;system pitch setting
;SEQ2 FEED AGE1 (E-DAY)
DB 50
DB
DB 25
DB FFH •end
;
A
-21J
----------------------- Page 215-----------------------

Tbll_sayll3:
DB 58 ;speech speed
Voice+7 ;system pitch setting
23 ;SEQ2 FEED AGE1 (DO MOH)
FFH ;end
DB
DB
DB
;
Tbll_sayll4:
;speech speed
Voice ;system pitch setting
;TOH-DYE
;end
DB 58
DB
DB 79
DB FFH
;
Tbll_sayll5 r
;speech speed
Voice ;system pitch setting
;BURE
;end
DB 46
DB
DB 97
DB FFH
Tbll _sayll6:
;speech speed
Voice / system pitch setting
140
FFH
DB 46
DB
;SIGH
;end
D5
DB
Tbll _sayll7:
;speech speed
Voice / system pitch setting
; BOO
DP 46
DB
DB 10
DB FFH / end
Tbll _sayll8:
;speech speed
Voice / system pitch setting
;WAH
end
DB 46
DB
DB 85
DB FFH
Tbll_sayll9:
;speech speed
.system pitch setting
;TGH-LOO
DB 60
DB Voice*8
DB 80
DB FFH ;end
;
Tbll _sayl20:
;speech speed
/ system pitch setting
DB 46
DB Voice + 8 ? A TAY
DB 7
DB FFH ;end
Tbll _sayl21:
;speech speed
Voice / system pitch setting
;SEQ1 FEED AGE2 HUNGRY
DB 46
DB
DB 33
DB FFH ;end
143 SAME AS TBL1_SAY072
Ybl2_sayl43:
/ speech speed
/ system pitch setting
/ SEQ2 FEED AGE3 (GOOD)
;end
DB 46
DB Voice
DB 28
DB FFH
A-214
----------------------- Page 216-----------------------

144 SAME AS TBL1_SAYC53
Tbl2_sayl44:
DB 46 ;speech speed
;system pitch setting
;SEQ2 FEED AGE3 PLEASE
;end
DB Voice+7
DB 68
DB FFH
;
Tbll_jsayl22:
46 ;speech speed
;system pitch setting
;SEQ2 FEED AGE3 LIKE
DB
Voice
DB -2
DB 43
DB FFH ;end
;Tbl2_sayll8:
6G ;speech speed
;system pitch setting
;SEQ10 HANGING (YAWN)
DB
Voice-8
161,164,161
DB
DB
DB FFH ;end
Tbl2_sayll9:
;speech speed
;speech speed
;system pitch setting
DB 6C
DB 55
Voice+3
165,165,144,165,144,165,144 , 165,144
DB
DB
Voice ;system pitch setting
144
FFH
DB
DB
DB ;end
Tbll_sayl23:
;speech speed
Voice ;system pitch setting
;seq4 feed done
DB 46
DB
DB 20
DB FFH ;end
END GEORGE 07/05/96
END FEED
WAKE
GEORGE 07/06/96
;START AT 2
Tbll_sayl24: ;SG DONE
;speech speed
;pitch control
DB 70
Voicet-6
165,161
FFH ;end
DB
DB
DB
;PASS
Tbll__sayl2S: ;SG DONE
;speech speed
;pitch control
DB 55
Voice-2
162,63,35
;end
DB
DB
DB FFH
;PASS
Tbll_sayl26: ;SG DONE
|;B eech speed
Voice ;system pitch setting
DB 55
DB
A-2/5
----------------------- Page 217-----------------------

DB 82
DB FFH ;end
;PASS
Toll_sayl27: ;SG DONE
;speech speed
Voice ;system pitch setting
164,83
;end
DB 55
DB
DB
DB FFH
Tbl2 s*yl28 j ;SG DONE
;speech speed
Voice ;system pitch setting
63,52
;end
DB 55
DB
DB
DB FFH
Tbl2_sayl29: ;SG DONE
;speech speed
Voice ;system pitch setting
162,139
;end
DB 40
DB
DB
DB FFH
TBL1_SAY55
Tbll_say8: ;SG DONE
;speech speed
rsystem pitch setting
DB 46
Voice*8
117
DB
DB
DB FFH ;end
Tbl2_sayl30: ;SG DONE
;speech speed
;system pitch setting
DB 55
LB Vcice-2
DB 63
DB FFH ;end
Tbl2_sayl31: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 46
B 86
DB FFH ;end
;
;SG DONE
;speech speed
Voice ;system pitch setting
Tbl2_sayl32:
DB 46
DB
DB 79
DB FFH ;end
TBL1_SAY122
Tbll_sayl2: ;SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice
DB 20
DB FFH ;end
;SG DONE
;speech speed
Voice ;system pitch setting
Tbl2_sayl33:
DB 46
DB
DB 72
DB FFH ;end
;SG DONE
;speech speed
;system pitch setting
Tbl2__sayl34:
DB 55
DB Voice+3
A-216
----------------------- Page 218-----------------------

DB 158
DB FFH ;end
Tbl2_sayl35: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 46
DB
DB 35
DP FFH ;end
;
Tbl2_8i/136: ;SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice+5
DB 52
DB FFH ;end
Tbl2_sayl37: ;SG DONE
;speech speed
/system pitch setting
DB 55
DB Voice+8
DB 8
DB FFH ;end
;
Tbl2_~ayl38: ;SG DONE
DB 45 /speech spee<
Voices8 /system pit rh setting
137,137,137,136
DB
DB
DB FFH /end
Tbl2__sayl39: /SG DONE
;speech speed
Voice /system pitch setting
149
DB 60
DB
DB
DB FFH ;end
Tbl2_s. 140: /SG DONE
;speech speed
/ system pitch setting
DB 40
DB Voice-3
DB 16
DB FFH /end
?
Tbl2_s«yl41: /SG DONE
/speech speed
/ system pitch setting
DB 20
Vaice+5
161
DB
DB
DB FFH ;end
Tbl2_sayl42: /SG DONE
;speech speed
/ system pitch setting
DB 46
DB Voice-9
DB 74
DB FFH ;end
;
Tbl2_sayl43: /SG DONE
/speech speed
/system pitch setting
DB 80
DB Voice+4
DB 82
DB FFH / end
Tbl2_sayl44: /SG DONE
/speech speed
Voice /-ystem pitch setting
DP 46
PB
A-217
----------------------- Page 219-----------------------

DB 14
DB FFH ;end
Tbl2_sayl45: ;SG DONE
;speech speed
Voice ;pitch control
DB 46
DB
DB 6
DB FFH ;end
Tbl2_sayl46: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 46
DB
DB 83
DB FFH ;end
Tbl2_say!47: ;SG DONE
;speech speed
Voice ;pitch control
DB 70
DB
DB 7
DB FFH ;end
Tbl2_sayl48: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 60
DB
DB 37
DB FFH ;end
?BL1_SAY53
Tbll_say29: ;SG DONE
;speech speed
;system pitch setting
DB 46
DE Voice
DB 52
DB FFH ;end
Tbl2_sayl49: ;SG DONE
;speech speed
;system pitch setting
DB 30
DB DB 47 Vcice-5
DE FFH ;end
Tbl2_say150: ;SG DONE
*,
speech speed
;system pitch seating
DB 6C
DB Voice 3
DB 81
DB FFH ;end
;
Tbl2__sayl51: ;SG DONE
;speech speed
•.
system pitch setting
DB 55
DB Voice-7
DB 53
DB FFH ;end
Tbl2_say152: ;SG DONE
;speech speed
Voice-10 ;system pitch setting
DB 40
DB
DB 35
DB FFH ;end
;SG DONE
;speech speed
Voice
-10 ;system pitch setting
Tt sayl53:
DB 46
DB
A-218
----------------------- Page 220-----------------------

DB 39
DB FFH ;end
;
Tbl2_sayl54: ;SG DONE
;speech speed
;system pitch setting
DB 55
Voice*3
165,165,144,165,144,165.144.165.165,165,165,144
;end
DB
DB
DB FFH
Tbl2__sayl55: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 46
DP
DB 72
DB FFH ;end
Tbl2__sayl56: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 60
DB
DB 1
DB FFH ;end
TBL1_SAY53
Tbll_say38: ;SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice
DB 52
DB FFH ;end
END GEORGE 07/06/98
END WAKE
.- GEORGE 07/06/98
;HUNGER
Tbl2_sayl57: ;SG DONE ;HUNGER
;speech speed
Voice+6 ;system pitch setting
DB 65
DB
DB 63
DB FFH ;end
;SG DONE
;speech speed
Voice ;system pitch setting
Tbl2__sayl58:
DB 7C
DB
DB 23
DB FFH ;end
Tb]2_sayl59: ;SG DONE
;speech speed
;system pitch setting
DB 40
DB Voice-7
DB 7
DB FFH ;end
;SG DONE
;speech speed
Voice ;system pitch setting
Tbl2 sayl60:
DB 55
DB
DB 33
DB FFH ;end
;SG DONE
;speech speed
Tbl2_sayl61 ?
DB 75
A-219
----------------------- Page 221-----------------------

DB .oice ;system pitch setting
DB 55
DB FFH ;end
;
Tbl2_sayl62: ;SG DONE
;speech speed
Voice
-15 ;system pitch setting
DB 40
DB
DB 84
DB FFH ;end
Tbl2_sayl63: ;SG DONE
;speech speed
;system pitch setting
DB 65
Voice+8
157
DB
DB
DB FFH ;end
;
Tbl2_sayl64: ;SG DONE
;speech speed
•.
system pitch setting
DB 55
Vcice*6
119
DB
DB
DB FFH ;end
Tbl2_sayl65: ;SG DONE
;speech speed
;system pitch setting
DB 65
DB Vcice+8
DB 85
DB FFH ;end
Tbl2_sayl66: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 55
DB
DB 14
DB FFH ;end
;
Tbl2__sayl67: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 40
DB
DB 8
DB FFH ;end
Tbl2_sayl68: ;SG DONE ;SAME AS SAY135 WITH DIFFERENT MOTOR
POS.
;speech speed
Voice jsystem pitch setting
DB 46
DB
DB 35
DB FFH ;end
;END GEORGE 07/06/98
;END HUNGER
.-GEORGE 07/07/96
;INVERT
;WAS68
Tbl2_sayl69: ;SG DONE ;INVERT
;speech speed
Voice ;system pitch setting
DB 85
DB
DB 36
Du FFF ;end
;
A-220
----------------------- Page 222-----------------------

Tbl2_sayl70: ;SG DONE
/speech speed
/system pitch setting
DB 55
DB Voice+8
DB 94
DB FFH ;end
Tbl2_sayl71: ;SG rONL
/speech speed
/system pitch setting
DB 70
Voice*8
158
DB
DB
DB FFH /end
Tbl2_sayl72: /SG DONE
;speech speed
Voice*8 /sy. am pitch setting
148
DB 55
DB
DB
DB FFH / end
;
Tbl2_sayl73: /SG DONE
/speech speed
/ system pitch jetting
100
Voice+8
DB
DB
DB 97
DB FFH / end
;
Tbl2_sayl74: / SG DONE
/speech speed
/ system pitch setting
DB 50
DB Voice*5
DB 8
DB FFH / end
Tbl2_sayl75: /SG DONE
/speech speed
/system pitch setting
DI 55
DB Voice-5
DB 9 *.
DB FFH / end
;
Tbl2_sayl76: /SG DONE
/speech speed
Voice-10 /system pitch setting
DB 50
DB
DB 54
DB FFH /end
Tbl2_sayl77; /SG DONE
/speech speed
/system pitch setting
DB 70
DB Voice-6
DB 57
DB FFH / end
;
Tbl2_sayl78: /SG DONE
;speech speed
Voice /system pitch setting
DB '*’ 4
DB
DB 24
DB FFH ;end
;
Tbl2_sayl79: /SG DONE
;speech speed
Voice-5 /system pitch setting
DB 55
DB
DB 10
DB FFH /end
;
A-221
----------------------- Page 223-----------------------

Tbl2_sayl80: ;SG DONE
;speech speed
;system pitch setting
DB 65
DB Voice-5
DB 80
DB FFH ;end
;
Tbl2_saylSls ;SG DONE
;speech speed
Voice-10 ;system pitch setting
DB 55
DB
DB 60
DB FFH ;end
;
Tbl2_sayl82: ;SG DONE
;speech speed
Voice 10 ;system pitch setting
DB 55
DB
DB 43
DB FFH ;end
Tbl2_sayl83: ;SG DONE
;speech speed
;system pitch setting
DB 75
DB Voice-8
DB 90
DB FFH ;end
;
Tbl2_sayl84: ;SG DONE
;speech speed
;system pitch setting
DB 75
DB Voice-4
DB 29
DB FFH ;end
Tbl2_sayl85: ;SG DONE
;speech speed
;system pitch setting
DB 55
DB Voice**-5 *.
DB 34
DB FFH ;end
;
Tbl2_sayl86: ;SG DONE
;speech speea
;system pitch setting
DB 65
DB Voice+2
DB 45
DB FFH ;end
Tbl2_sayl87: ;SG DONE
;speech speed
;system pitch setting
DB 65
Voice
DB -7
DB 39
DB FFH ;end
;
;SG DONE
;speech speed
;system pitch setting
Tbl2_sayl88:
DB 35
Voice
130
DB
DB
DB FFH ;end
Tbl2_sayl56:
Tbll_say88: ;SG DONE
;speech specd
;system pitch setting
DB 75
DB Voi.®
DB 23
DB FFH ;end
A-222
----------------------- Page 224-----------------------

Tbl2_sayl89: ;SO DONE
;speech speed
Voice ;system pitch setting
DB 55
DB
DB 1
DB FFH ;end
Tbl2_sayl90:
100
Voice
;speech sp^ed
;system pitch setting
DB
DB
DB 97
DP FFH ;end
;
Tbl2_sayl91:
100
Voice-10
;speech speed
;system pitch setting
DB
DB
DB 97
DB FFH ;end
Tbl2_sayl92:
;speech speed
;system pitch setting
DB 100
DB Voice-20
DB 97
DB FFH ;end
;END GEORGE 07/07/98
;END INVERT
;start at 202
Tbl2_sayl93: ;SG DONE ;BACKSG
;speech speed
Voice ;system pitch setting
DB 70
DB
DB 153
DB FFH ;end
Tbl2_sayl94: ;SG DONE
;speech 3peed
Voice ;system pitch setting
DB 75
DB
DB 2
DB FFH ;end
~!b 2_sayl95: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 55
DF
DB 39
DB FFH ;end
;
Tbl2__sayl96: ;SG DONE
;speech speed
Voice+4 ;system pitch setting
; PET
DB 65
DB
DB 67
DB FFH ;end
Tbl2_sayl97: ;SG DONE
;speech speed
Voice*5 ;system pitch setting
DB 75
DB
DB 1
DB FFH ;end
;
Tbl2_sayl98: ;SG DONE
;speech speed
Voice-10 ;system pitch setting
DB 55
DB
A-223
----------------------- Page 225-----------------------

DB 146
DB FFH ;end
;
Tbl2_sayl99: ;SG DoNE
DB 55 ;speech speed
DB Voice+5 ;system pitch setting
DB 35
DB FFH ;end
;
Tbl2
.say200: ;SG DONE
80 ;speech speed
;system pitch setting
DB
Voice
DB -b
DB 55
DB ** FFH ;end
Tbl2_say201: ;SG DONE
;speech speed
Voice-5 ;system pitch setting
DB 70
DB
DB 62
DB FFH / end
Tbl2_say202: ;SG DONE
80 ;speech speed
;system pitch setting
DB
DB Voice-5
DB 84
DB FFH ;end
Tbl2_sayl48
Tbl2_say212: / SG DONE
70 ;speech speed
/ system pitch setting
DB
Voice
DB -5
DB 29
DB FFH ;end
Tbl2_say203: ;SG DONE
;speech speed
Voice / system pitch setting
DB 70
DB
DB 37
DB FFH / end
#
Tbl2_say204: ;SG DONE
/ speech speed
Voice /syste:.. pitch setting
152
DB 55
DB
DB
DB FFH / end
;
Tbl2_say205: / SG DONE
;speech speed
/ system pitch setting
DB 65
DB Voice-5
DB 52
DB FFH ;end
;
Tbl2_say206: /SO DONE
/speech speed
Voice*2 /system pitch setting
DB 65
DB
DB 47
DB FFH ;end
Tbl2_say207: /SG DONE
A-224
----------------------- Page 226-----------------------

DB 65 ;speech speed
DB Voice-3 ;system pitch setting
DB 81
DB FFH ?end
?
Tbl2_say208: ;SG DONE
70 ;speech speed
Voice+6 ;system pitch setting
DB
DB
DB 48
DB FFH ;end
;
Tbl2_say209: ;SG DONE
;speech speed
Voice+3 /system pitch setting
161
DB 70
DB
DB
DB FFH ;end
;
Tbl2_say210: jSG DONE
55 ;speech speed
Voice /system pitch setting
DB
DB
DB 15
DB FFH ;end
;
Tbl2_say211: ;SG DONE
;speech '•peed
Voice-10 ; Sj .em pitch setting
DB 45
DB
DB 8
DB FFH ;e**d
;
Thl2_say212: ; *.’G DONE
;speech speed
Voice-10 /system pitch setting
DB 55
DB
DB 42
DB FFH ;end
;
Tbl2_say213: /SG DONE
/speech speed
Voice-15 /system pitch setting
DB 65
DB
DB 57
DB FFH /end
Tbl2_say214: ;SG DONE
;speech speed
Voice /system pitch setting
DB 50
DB
DB 75
DB FFH ;end
Tbl2_say215: /SG DONE
/speech spe* d
Voice /system pitch sett ng
101
DB 55
DB
DB
DB FFH / end
:
Tbl2_say216: /SG DONE
jspeech speed
/system pitch setting
DB 70
Voice
DB -3
DB 49
DB FFH ;end
Tbl2_say217: /SG DONE
A-225
----------------------- Page 227-----------------------

DB 75 ;speech speed
DB Voice*5 ;system pitch setting
DB 86
DB FFH ;end
Tbl2_say218: /SG DONE
55 ;speech speed
Voice ;system pitch setting
DB
DB
DB 72
DB FFH ;end
Tbl2_say219: ;SG DONE
55 ;speech speed
Voice*5 ;system pitch setting
150
DB
DB
DB
DB FFH ;end
;
Tbl2_say220: ;SG DONE
55 ;speech speed
;system pitch setting
DB
Vcice*5
151
DB
DB
DB FFH ;end
Tbl2_say221: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 55
DB
DB 97
DB FFH /end
Tbl2_say222: ;SG DONE
;speech speed
Voice ;system pitch setting
165,149
;end
DB 70
DB
DB
DB FFH
;
Tbl2_say223: ;SG DONE
;speech speed
Voice ;system pitch setting
129
DB 55
DB
DB
DB FFH ;er.1
;
Tbl2_say224: ;SG DONE
;speech speed
;system pitch setting
DB 75
DB Voice-4
DB 50
DB FFH / end
TL12_say225: ;SG DONE
;speech speed
Voice+5 /system pitch setting
DB 55
DB
DB 32
DB FFH ;end
;
Tbl2_say226: ;SG DONE
;speech speed
Voice*5 /system pitch setting
165 » 140
FFH /end
DB 55
DB
DB
DB
Tbl2_say227: /SG DONE
A-226
----------------------- Page 228-----------------------

DB 65 ;speech speed
Voice ;system pitch setting
144
DB
DB
DB FFH ;end
;
Tbl2_say228: ;SG DONE
DB 85 /speech speed
DB Voice /system pitch setting
DB 18
DB FFH z end
Tbl2_say229: /SG DONE
50 /speech speed
Voice+8 /system pitch setting
118
FFH /end
DB
DB
DB
DB
;
Tbl2__say230: /SG DONE
65 ;speech speed
Voice /system pitch setting
DB
DB
DB 66
DB FFH / end
Tbl2_say231: ;SG DONE
/speech speed
Voice+8 /system pitch setting
r3 70
DB
DB 87
DB FFH / end
;
Tbl2_ say232: ;SG DONE
/speech speed
/ system pitch setting
DB 60
DB Voice*8
DB 71
DB FFH ;end
;
Tbl2_say233: /SG DONE
;speech speed
Voice /system pitch setting
DB 55
DB
DB 93
DB FFH / end
;
Tbl2_say234: /SG DONE
/speech speed
/syster pitch setting
DB 46
Voice-20
161
DB
DB
DB FFH /end
;
Tbl2_say235:
/speech speed
/system pitch setting
DB 70
Db Voice
DB 81
DB FFH / end
;
Tbl2_say236:
/speech speed
/system pitch setting
DB 70
DB Voice
DB 93
DB FFH ;end
;
A-227
----------------------- Page 229-----------------------

;SICK
;GEORGE 07/08/98
;start at 39
Tbl2_say237: ;SG DONE ;SICK1
;speech speed
;system pitch setting
DB 55
Voice+5
165,141
FFH ;end
DB
DB
DB
Tbl2_sayl35
Tbll_say40: ;SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice
DB 35
DB FFH / end
Tbll_sayll7
Tbll_say41: ;SG DONE
;speech speed
/ system pitch setting
DB 46
DB Voice
DB 10
DB FFH ;end
Tbl2_say238: ;SG DONE
;speech speed
Voice ;system pitch setting
DB 46
:B
DB 40
DB FFH ;end
;
Tbl2_say239: /SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice-5
DE 60
DB FFH ;end
;SG DONE
;speech speed
Voice ;system pitch setting
Tbl2_say240:
DB 50
DB
DB 30
DB FFH / end
Tbll_say53
Tbll_say45: ;SG DONE
;speech speed
;system pitch setting
DB 46
DB Voice
DB 52
DB FFH / end
Tbl2_say241: ;SG DONE
;speech speed
,- system pitch setting
DB 70
DB Voice-8
DE 17
DB FFH ,end
Tbl2_say242: ;SG DONE
;speech speed
Vo c«-10 /system pitch setting
DB «0
DB
DB 46
DB FFH / end
;
/SG DONE
/speech speed
/ system pitch setting
Tbl2_tay243:
DB 55
DB Voice-8
A-228
----------------------- Page 230-----------------------

DB 8
DB FFH ;end
;
Tbl2_say244: ;SG DONE
;speech speed
;system pitch setting
DB 40
DB Voice-8
DB 73
DB FFH ;end
Tbl2_say245: ;SG DONE
;speech speed
;system pitch setting
DB 75
DB Voice-5
DB 80
DB FFH ;end
Tbl2_sayl82
Tbll_say51: ;SG DONE
;speech speed
Voice-10 ;system pitch setting
DB 55
DB
DB 43
DB FFH ;end
Tbl2_say246: ;SG DONE
/ speech speed
Voice ;system pitch setting
DB 70
DB
DB 9
DB FFH ;end
Tbl2_say247: ;SG DONE
;speech speed
;system pitch setting
DB 60
Voice-12
90,165
DB
DB
DB FFH ;end
Tbl2_say248: ;SG DONE
;speech speed
Voice / system pitch setting
140
DB 100
DB
DB
DB FFH ;end
Tbl2_say249: ;SG DONE
;speech speed
Voice-20 /system pitch setting
162,129
FFH ;end
DB 40
DB
DB
DB
;
Tbl2_say250: /SG DONE
;speech speed
Voice ;system pitch setting
142
FFH ;end
DB 100
DB
DB
DB
END GEORGE 07/08/98
END SICK
;LIGHT
/GEORGE 07/08/98
/starts at 2
Tbl2_say251:
DB 40 /speech speed DONE RB BEGIN LIGHT
D.(BRIGHTER)
A-229
----------------------- Page 231-----------------------

n
Voice ;pitch control
119,18
FFK
DB
DB
DB ;end
Tbll_say252:
;speech speed
;pitch control
;end
DB 40 DO NOT USE
DB SEE SAY 15
DB FFH
Tbl2_sa> *.52:
;speech speed
Voice+5 ;system pitch setting
142
DB 75 Done RB
DB
DB
DB FFH ;end
;
Tbi2_say253:
;speech speed
Voice ;system pitch setting
158,165,165,14,6
;end
DB 46 done RB
DB
DB
DB FFH
Tbl2_say254:
;speech speed
Voice ;system pitch setting
102,145
;end
DB 46 done RB
DB
DB
DB FFH
Tbl2_say255:
;speecn speed DONE RB
Vcice+8 ;system pitch setting
119,35,164,5.81
FFH ;end
DB 46
DB
DB
DB
fb !3_say256:
;speech speed DONE RB
;system pitch setting
DB 46
Voice-4
148,163 , 145
;end
DB
DB
DB FFH
;
Tbl3_say257:
;speech speed
Voice ;system pitch setting
131,164,95,149,123
;end
DB 46 DONE RB
DB
DB
DB FFH
Tbl3_say258:
;speech speed
•.
system pitch setting
DB 55 SEQ 4, AGE 2 DONE RB
Voice-4
158,163,8,6
;end
DB
DB
DB FFH
Tbl3_say259:
,speech s. d
•.
system p^.tch setting
DB 45 SEQ 6, AGE 2 DONE RB
Voice+8
119,35,70,81
;end
DB
DB
DB FFH
;
Tbl3_say260:
DB 46 ;speech speed RB LvjNE
A-230
----------------------- Page 232-----------------------

Voice>8 ;system pitch setting SEQ 1, AGE 3
119,66
FFH ;end
DB
DB
DB
;
Tbl3_say261:
DB 46 ;speech spt. d SEQ 4, AGE 3 RB DONE
Voice-3 ;system p tch setting
158,14,42
;end
DB
DB
DB FFH
;
Tbl3_say262:
;speech speed
;system pitch setting
DB 46 SEQ 6 AGE 3 RB DONE
Voice-3
119,35,5,93
;end
DB
DB
DB FFH
;
Tbl3_say263:
;speech speed
;system pitch setting
DB 60 SEQ 2, AGE 1 RB DONE
Voice+8
131,95,149
;end
DB
DB
DB FFH
;
Tbl3_say264:
;speech speed
;system pitch setting
DB 46 RB DONE
Vcice-4
158,8,42
;end
DB
DB
DB FFH
;
Tbl3_say265: RB DONE
;speech speed
;system pitch setting
DB 46
Voice-4
119,35,70,93
DB
DB
DB FFH ;end
END GEORGE 07/06/98
END LIGHT
DARK
GEORGE 07/08/98
Tbl3_say266:
BEGIN LIGHT D. (DARKERI
SEQ i AGE 1 RB DONE
;speech speed
;system pitch setting
DB 52
Voice +8
119,10,162,6
DB
DB
DB FFH ;end
Tbl3_say267:
;speech speed
;system pitch setting
DB 46 SEQ 2 AGE 1 DONE RB
Voice+8
119,6,21
;end
DB
nB
Di. FFH
;
Tbl3_say268:
;speech speed
/system pitch setting SEQ 3 PGE 1 DONE RB
DB 55
Voice+8
119,6.163,82.163,23
;end
DB
DB
DB FFH
Tbl3_say269:
;speech speed
•system pitch setting SEQ 4 AGE 1 DONE R5
DB 40
Voice*8
158,101,163,104
DB
DB
A-231
----------------------- Page 233-----------------------

DB FFH end
Tbl3_say270:
70 ;speech speed
;system pitch setting
DB
Voice+8
148.10,6,148
;end
DB
DB
DB FFH
Tbl3__say271:
59 / speech speed
;system pitch setting
;SEQ6 AGE4/SEQ14 AGE4 LIGHT js
DB
Voice*4
149,163 ,21,21
;end
DB
DB
DB FFH
Tbl3_say272:
;speech speed
;system pitch setting
DB 52
Voice*8
119,35,162,10,5,81
;end DONE RB
DB
DB
DB FFH
Tbl3_say273:
;speech speed
;pitch control
DB 60
Voice*8
63,163,149,163,163,51,35,152
DB ONE RB
DB
DB FFH / end
Tbl3_say274:
;speech speed
Voice*2 ;system pitch setting
119,60.6
FFH ;end
DB 52
DB
DB
DB
Tbl3_say275:
;speech speed
•.
pitch control
DB '2
DB Voice*2
DB 119,60.45 ,85
DB FFH ;end DONE RB
Tbl3_say276:
;speech speed
;system pitch setting
DB oil
Vcice*2 DONE RB
119,42,82,23
DB
DB
DB FFH / end
Tbl3_say277:
/speech speed
;system pitch setting
DB 70
Voice*2
148,60,6.148
;end
DB
DB
DB FFH DONE RB
Tbl3_Fay278:
/speech speed
/ system pitch setting DONE RB
DB 52
Voice+2
119,52,60,70,81
DB
DB
DB FFH ;end
;
Tbl3_say279:
;speech speed
Voice / system pitch setting
119,10,42
DB 52
DB
DB
A-232
----------------------- Page 234-----------------------

DB FFH ;end DONE RB
Tbl3_say280:
DB 52 ;speech speed
Voice ;system pitch setting DONE RB
119,10,34,85
;end
DB
DB
DB FFH
;
Tbl3_say281:
;speech speed
Voice ;system pitch setting
119,42,83,23
;end
DB 60
DB
DB
DB FFH DONE RB
Tbl3_say282:
;speech speed
Voice ;system pitch setting
119,52,60,5,93
;end
DB 52
DB
DB
DB FFH DONE RB
Tbl3_say283:
DB 60 ,* speech speed !'NOTE!! PRINTED T, HAD
WRONG WORD NUMBER FOR "KISS"
Voice ;system pitch setting
63,149,162,38,35,152
DONE RB
DB
DB
DB FFH ;end
Tbl3_say284:
;speech speed
Voice ;system pitch setting
119,60,42
FFH
DB 52
DB
DB
DB ;end DONE RB
;
Tbl3_say285:
;speech speed
;system pitch setting
DB 52
Voice-3
119,60,34,85
DB
DB
DB FFH ;end
;
Tbl3_say286:
;speech speed
Voice ;system pitch setting
119,42,8",68
;end
DB 60
DB
DB
DB FFH
;
Tbl3__say287:
;speech speed
Voice ;system pitch setting
148,60,42,148
;end
DB 70
DB
DB
DB FFH
Tbl3_say288:
;speech speed
Voice ;system pitch setting
119,163,52,60,70.93
;end
DB 46
DB
DB ;SEQ7 AGE4/SEQ15 AGE 4 LIGHT js
DB FFH
;
Tbl3_say289:
;speech speed
Voice ;system pitch setting
DB 50
DB
A-233
----------------------- Page 235-----------------------

63,165,149.38,52,152 ;SEQ8 AGE4/SEQ16 AGE 4 LIGHT < B
;end
DB
DB FFH
END GEORGE 07/08/98
END DARK
SOUND
•start 43
*Dl3_say290:
;speech speed
Voice ;system pitch setting
163,148,165,17
;end
DB 50
DB
;Sl-Al, ^ '1/S1-A2 SOUND js
;S9-A2/SI-A3/S9-A3 SOUND js
DB
DB FFH
Tbl3_say291:
;speech speed
Voice ,* system pitch setting
85
,165,165,165
165,165,140
,end
DB 46
DB
S2-A1/S10-A1/S2-A1 SOUND js
S1G-A2/S2-A3/S10-A3 SOUND js
S2-A4/S1G-A4 SOUND js
DB
DB
DB FFH
Tbl3_S'iy292:
;speech speed
Voice ;system pitch setting
121,165,164,14,163,41,21
;end
DB 50
DB
DB ;S3~A1/Sll-Al SOUND js
DB ~FH
Tbl3_say293:
;speech speed
Voice ;system pitch setting
163,129,164,5,162,41
;end
DB 46
B
DB ;S4-A1/Sl2-/w . JND js
^B FFH
Tbl3_say294:
;speech speeu
Voice ;system pitch setting
35,163,89
;end
DB 46
DE
DB ;S5-A1 Slo A1 SOUND (with say/irJ- 1 js
DE FFH
Tbl3__say295:
;speech speed
Voice ;system pitch setting
163 ,148,163,36 ;S6-A1/S14-A1/S6-A2 SOUND js
;S14-A2/S6-A3/S14-A3 SOUND js
DB 53
DB
DB
DB FFH ;end
Tbl3_say2r':
;speech speed
Voice ;system pitch setting
;S7-A1/S15-A1 SOUND (with say/m2) js
l > 53
DB
DB 17
DE FFH ;end
Tbl3_say29 ):
;speech speed
Voice ;system pitch setting
122,164,21,164,21
;end
DB 60
DB
;S8-A1/S16-A1 SOUND js
;S8-A3/S16-A3 SOUND js
DB
DB FFH
Tbl3_say298:
4
;spee.h speed
Voice ;system pitch setting
DB 46
DB
A-234
----------------------- Page 236-----------------------

121,165,164,8,16".41.21 ;.;3-A2/Sli-A2 SOUND js
DB FFH ;end
DB
Tbl3_say299:
;speech speed
Voice ;system pitch setting
163,129,164,5,165,73
;end
DB 46
DB
DB ;S4-A2/S12-A2 SOUND js
DB FFH
;
Tbl3_say300:
;speech speed
Voice ;system pitch setting
35,165,31
DB 46
DB
DB ;S5-A2/S13-A2/S5-A3 SOUND (with say/m2)
js
DB FFH ;end ;S13-A3/S5-A4/S13-A4 SOUND (with say/m2)
js
;
Tbl3_say301:
;speech speed
Voice ;system pitch setting
8,162,41,163,85
DB 46
DB
DB ;S7-A2/S15-A2 SOUND (with
say/m2) js
DB FFH ;end
Tbl3_say302:
;speech speed
Voice ;system pitch setting
122,164,21
;end
DB 60
DB
DB ;S8-A2/S16-A2 SOUND js
DB FFH
Tbl3_8ay303:
;speech speed
Voice ;system pitch setting
121,165,164,14,163,73,21
- end
DB 46
DB
DB ;S3-A3/Sll-Al SOUND js
DB FFH
;
Tbl3_say304:
;speech speed
Voice ;system pitch setting
163,129,164,35,165,44
;end
DB 46
DB
;S4-A3/S12-A3 SOUND js
;fi-A4/S12-A4 SOUND js
DB
DB FFH
Tbl3_say305:
;speech speed
Voice ;sys.em pitch setting
8,73,164,85
FFH
DB 46
DB
;S7-A3/SI5-A3 SOU*tt> (with say/m2)js
;S7-A4/S15-A4 SOUND (with say/m2)js
DB
DB ;end
J
Tbl3_say306:
;speech speed
DB Voice ;system pitch setting
164,148,164,163,46
DB FFH ;end
DB 55
DB ;S1-A4/S9-A4 SOUND js
;
Tbl3_say307:
;speech speed
DB Voice ;system pitch setting
121,165,164,8,163,73,21
DB FFH ;end
DB 46
DB ;S3-A4/S11-A4 SOUND js
;
A-235
----------------------- Page 237-----------------------

Tbl3_say308:
DB 55 ;speech speed
Voice ;system pitch setting
164,148,164,163,54
;end
DB
DB ;S6-A4/S14-A4 SOUND js
DB fr'FH
;
Tbl3_say309:
;speech speed
Voice /system pitch setting
122,164,163,88,164,21
*,
end
DB 60
DB
DB ;S8-A4/S16-A4 SOUND js
DB FFH
END SOUND
;TILT
;GEORGE 07/09/98
Tbl3_say3U:
;speech speed
;pitch control
DB 56
Voice*-8
160
DB
DB ;S1 A1 TILT/S4 A1 TILT/S14 A1 TILT js
DB FFH ;end
Tbl3_say311:
46 ;speech speed
/ pitch control
; S2 A1 TILT js
DB
Voice
157 36
FFH ;end
DB
DB
DB
;
Tbl3_say312:
;speech speed
Voice /system pitch setting
158,9
FFH ;end
DB 46
DB
DB ;S3 A1 TILT js
.*
DB
;
Tbl3_say313:
;speech speed
/system pitch setting
;S5 A1/S4 A2/S2 A3/S2 A4 TILT js
DB 46
Voice*8
154
DB
DB
DB FFH /end
;
Tbl3_say314:
/speech speed
Voice /system pitch setting
159,82,39
FFH / end
DB 46
DB
DB /S6 A1 TILT js
DB
Tbl3_sa.,315:
/ speech speed
Voice /system pitch setting
155,39,39
/end
DB 46
DB
DB /S7 A1 TILT/S6 A2 TILT js
DB FFH
;
Tbl3_say316:
;speech speed
Voice /system pitch setting
37,152
FFH ;end
DB 46
DB
DB ;S8 Al TILT (with say/m5) js
DB
Tbl3_say317:
A-236
----------------------- Page 238-----------------------

DB 46 ;speech speed
Voice ;system pitch setting
154,120
;end
DB
DB ;S9 A1 TILT/S9 A2 TILT js
DE FFH
;
Tbl3_say318:
;speech speed
Voice ;system pitch setting
155,120,120
? end
DB 46
DB
DB ;S10 A1 TILT/S10 A2 TILT js
DB FFH
Tbl3_say319:
;speech speed
Voice ;system pitch setting
35,57
FFH ;end
DB 46
DB
DB ;SI1 A1 TILT (with say/m2) js
DB
;
Tbl3_say320:
;speech speed
Voice ;system pitch setting
158 ,10,80
FFH ;end
DB 48
DB
DB ;SI2 A1 TILT js
DB
Tbl3_say321:
;speech speed
Voice ;system pitch setting
119,160
;end
DB 46
DB
DB ;S13 A1 / SI5 A3 TILT js
DB FFH
Tbl3__say322:
;speech speed
Voice ;system pitch setting
160,9
FFH ;end
DB 46
DB
DB ;SI5 A1 TILT js
*.
DB
;
Tbl3_s /323:
;speech speed
Voice ;system pitch setting
154,149
;end
DB 46
DB
DB ;SI6 A1 / S15 A2 / S13 A3 TILT js
DB FFH
;
Tbl3_say324:
;speech speed
Voice ;system pitch setting
160
DB 46
DB
DB ;S1 A2/S3 A2/S1 A3/S1 A4 TILT js
DB FFH ;end
?
Tbl3_say325:
;speech speed
Voice / system pitch setting
52,9
FFH ;end
DB 46
DB
DB ;S2 A1 TILT (with say/ml6) js
DB
;
Tbl3_say326:
;speech speed
Voice /system pitch setting
* 159,83,39
FFH ,*end
DB 46
DB
DB ;S5 A2 TILT js
DB
Tbl3_say327:
Ar237
----------------------- Page 239-----------------------

DB 46 ;speech speed
Voice ;system pitch setting
52,43,81,152
;end
DB
DB ;S7 A2 TILT (with say/m5) js
DB FFH
Tbl3_say328:
;speech speed
Voice ;system pitch setting
155
DB 46
DB
DB ;S8 A2 TILT (with say/m5) js
DB FFH ;end
Tbl3_say329:
;speech speed
Voice /system pitch setting
52,57
;end
DB 46
DB
DB ;Sll A2 TILT (with say/m2) js
DB FFH
Tbl3_say330:
;speech speed
Voice ;system pitch setting
158,60,80
;end
DB 46
DB
DB ;S12 A2 TILT js
DB FFH
;
Tbl3_say331:
;speech speed
Voice ;system pitch setting
163,156
FFH ;end
DB 46
DB
DB ;S13 A2 TILT (with say/m5) js
DB
Tbl3_say332:
;speech speed
Voice / system pitch setting
8
,22,85
;end
DB 46
DB
DB /S14 A2 TILT js
DB FFH
Tbl3_say333:
/speech speed
Voice / pitch control
154
,118.163,145,165,162,118
DB 46
DB
DB /SI6 A2/S14 A3/S14 A4
TILT js
DB FFH z end
Tbl3_say334:
/speech speed
Voice /system pitch setting
159
DB 46
DB
DB /S3 A3 TILT js
DB FFH Z end
;
Tbl3_say335:
/ speech speed
Voice / pitch control
83,1
DB 46
DB
DB /S4 A3/S4 A4 TILT (with say/m26) js
DB FFH /end
Tbl3_say336:
/speech speed
Voice /system pitch setting
155,52,62,85
;end
DB 46
DB
DB ZS5 A3 TILT js
DB FFH
;
A-238
----------------------- Page 240-----------------------

Tbl3_say337:
DB 50 ;speech speed
DB Voice ;system pitch setting
52,48,93,152
FFH ;end
DB ;S6 A3 TILT (with say/m5) js
DB
Tbl3_say338:
;speech speed
Voice ;system pitch setting
155
DB 46
DB
DB ;S7 A3/S7 A4 TILT (with say/m5) js
DB FFH ;end
;
Tbl3_say339:
;speech speed
Voice ;system pitch setting
155,120,163,149
;end
DB 46
DB
DB ;S8 A3/S8 A4 TILT js
DB FFH
Tbl3_say340:
;speech speed
Voice ;system pitch setting
165,129
FFH ;end
DB 46
DB
DBDB ;S9 A3/S9 A4 TILT (with sa^ 'ir.9) js
;
Tbl3_say341:
;speech speed
Voice ;system pitch setting
160,163 ,120,120
;end
DB 46
DB
DB ;S10 A3/S10 A4 TILT (with say/mlcljs
DB FFH
;
Tbl3_say342:
;speech speed
Voice ;system pitch setting
163,23
FFH ;end
DB 46
DB
DB ;Si1 A3/SI5 A4 TILT (with say / m2&21) js
DB
;
Tbl3_say343:
;speech speed
Voice ;system pitch setting
164,156
FFH ;end
DB 55
DB
DB ;S12 A3 TILT (with say/m5) js
DB
;
Tbl3__say344:
*,
speech speed
Voice ;system pitch setting
163,1,163,1,117
;end
DB 46
DB
DB ;S16 A3 TILT (with say/m5) js
DB FFH
;
Tbl3_say345:
;speech speed
Voice ;system pitch setting
27,162,149
FFH ;end
DB 46
DB
DB ;S3 A4 TILT (with say/m26) js
DB
Tbl3_say346:
;speech speed
Voice ;8ystem pitch setting
155,52,29,163,85
;end
DB 46
DB
DB ;S5 A4 TILT js
JB FFH
;
A-239
----------------------- Page 241-----------------------

Tbl3_say347:
DB 46 ;speech speed
Voice ;system pitch setting
52,47,93,164,152
;end
DB
DB ;S6 A4 TILT (with say/m5) js
DB FFH
Tbl3_say348:
;speech speed
Voice ;system pitch setting
52,24,68
;end
DB 46
DB
DB ;S11 A4 TILT (with say/m2) js
DB FFH
;
Tbl3_say349:
;speech speed
Voice /system pitch setting
22,149
FFH ;end
DB 46
DB
DB ;S13 A4 TILT (with say/m5) js
DB
?
Tbl3_say350:
;speech speed
Voice / system pitch setting
163,1,163.39,163,117
;end
DB 46
DB
DB /SI6 A4 TILT (with say/ro5) js
DB FFH
END GEORGE 07/09/98
/GEORGE
/IR 07/09/98
Tbl3_say35l:
/ speech speed
/pitch control
/SEQ1,seq2,seq3 ,seq4 ir age 1
DB 46
DB Vcice*8
DB 40
DB FFH ;end
Tbl3_say352:
/speech speed
/ pitch control
/ seq5, ir agel
DB 46
Voice
66,162,85
;end
DB
DB
DB FFH
;
Tbl3__say353:
/ speech speed
Voice / system pitch setting
19,85 /seq6, ir agel
FFH ;end
DB 46
DB
DB DANCE WAH
DB
Tbl3__say354:
/speech speed
/ system pitch setting
/seq6, ir agel DO DO DO
DB 46
Voices8
162,164,134,134
DB
DB
DB FFH / end
;
Tbl3__say355:
/ speech speed
/ system pitch setting
/seq7 ir agel
DB 46
Voice+2
134,134,25,19
;end
DB
DB
DB FFH
Tbl3_say356:
DB 50 /speech speed
A-240
----------------------- Page 242-----------------------

Voice+8 ;system pitch setting
162
DB
DB
DB FFH ;end EMPTY SPACE
;
Tbl3_say357:
42 ;speech speed
;system pitch setting
;seq8 ir agel
DB
Voice
102,97,118,34
;end
DB
DB
DB FFH
Tbl3_say358:
;speech speed
Voice ;system pitch setting
;seq9 ir agel
DB 50
DB
117,34,22
;end
DB
DB FFH
;
Tbl3_say359:
;speech speed
Voice ;system pitch setting
34,78,145,145
;end
DB 50
DB
DB ;seqlO,11 ir agel
DB FFH
;
Tbl3_say360:
;speech speed
Voice ;system pitch setting
150,151,93,71
;end
DB 50
DB
DB ;seql2 ir agel TWINKLE
DB FFH
Tbl3_say361:
;speech speed
Voice ;system pitch setting
91,31,165,165,165,165,165,165,128,31
DB 46
DB
DB ;seql3,14 ir
agel
DB FFH ;end
;
Tbl3_say362:
;speech speed
Voice ;system pitch setting
161.72,161
;end
DB 46
DB
DB ;seq !5 ir agel
DB FFH
Tbl3_say363:
;speech speed
Voice ;system pitch setting
144.144,144,144
;end
DB 60
DB
DB ;seq !6 ir agel
DB FF;{
;
Tbl3_say364:
;speech speed
;system pitch setting
;seql,2,3 ir age2
DB 46
Voice+5
81,40
FFH ;end
DB
DB
DB
Tbl3_say365:
;speech speed
;system pitch setting
;seq4,5 ir age2
DB 46
Voice+8
81.40
DB FFH ;end
DB
DB
Tbl3_say366:
A-241
----------------------- Page 243-----------------------

DB 46 ;speech speed
;system pitch setting
;seq6 ir age2
Voice*8
66,159
FFH ;end
DB
DB
DB
Tbl3_say367:
46 ;speech speed
;system pitch setting
DB
Voice*7
19,165,165,165,164,85,134,165,135
DB
DB ;seq7,8 ir
age2
DB FFH ;end
;
Tbl3_say368:
;speech speed
;system pitch setting
DB 46
Voice*3
118,25,34
;end
DB
DB ;seq9 ir age2
DB FFH
Tbl3_say369:
;speech speed
;system pitch setting
DB 51
Voice+8
102,97,118
;end
DB
DB ;seqlO ir age2
DB FFH
;
Tbl3_say370:
;speech speed
Voice*5 ;system pitch setting
117,34,22
FFH ;end
DB 46
DB
DB ;SEQ11 ir age2
DB
Tbl3__say371:
;speech speed
Voice ;system pitch setting
91,31,165,165,165,165.165,165,124,31
DB 48
DB
DB ; seql3,14 ir
age2
DB FFH ;end
Tbl3_say372:
;speech rpeed
Voice ;system pitch setting
161 ,72,161
;end
DB 55
DB
DB ;seq!5 ir age2
DB FFH
Tbl3_say373:
;speech speed
Voice ;system pitch setting
143,144,143
FFH ;end
DB 50
DB
DB ;seql6 ir age2
DB
;
Tbl3_say374:
;speech speed
Voice ;pitch control
14,40
FFH ;end
DB 50
DB
DB ;seql,2,3,4,5 ir age3
DB
Tbl3_say375:
;speech speed
;system pitch setting
;seq6 ir age3
DB 46
Voice*5
35,48,66
FFH ;end
DB
DB
DB
A-242
----------------------- Page 244-----------------------

Tbl3_say376:
50 ;speech speed
;pitch control
:seq7,8 ir age3
DB
Voice^S
19,12,134,134
;end
DB
DE
DB FFH
Tbl3_say377:
46 ;speech speed
;system pitch setting
;SEQ9 ir age3
DB
Voice*3
34,85,99
FFH ;end
DB
DB
DB
Tbl3_say378:
;speech speed
;system pitch setting
;seqll ir age3
DB 46
Voice+2
156,25,34
;end
DB
DB
DB FFH
Tbl3_say379:
;speech speed
/ system pitch setting
DB 50
Voice+3
63,165,165,165,165,165,124,31
;end
DB
DB ;seql3,14 ir age3
DB FFH
;
Tbl3_say380:
;speech speed
;system pitch setting
DB 70
Voice+4
35,72,162,162,162,162.162,162,162,162,162,162,161
DB
DB
DB FFH ;end
;
Tbl3_say381:
/ speech speed
40 Voice ,85-5 ;SEQl /system ,2,3,4pitch ,5 IRsetting AGE4
FFH ;end
DB 58
.*
DB
DB
DB
f
Tbl3_say382:
;speech speed
,- system pitch setting
;seq6 ir age4
DB 46
Voice-*6
81,66,21
FFH ;end
DB
DB
DB
?
Tbl3_say383:
;speech speed
/ system pitch setting
/seq7,8 ir age4
DB 46
Voice>7
134,134,25,19
DB
DB
DB FFH / end
;
Tb14_say384:
/speech speed
Voice+8 /system pitch setting
34,78,145,145 ;seq9 ir age4
FFH / end
DB 50
DB
DB
DB
Tbl4_say385:
/speech speed
;system pitch setting
seqlO ir age4
SAY NUMBERS MODIFIED TO MATCH CORRECT
DB 50
Voice+8
119,44,52,71,150
y end
DB
DB
DB FFH
A-243
----------------------- Page 245-----------------------

DIALOGUE
Tbl4__say386:
DB 46 ;speech speed
;system pitch setting
seqll ir age4
Voice+8
34,85,99
FFH ;end
DB
DB
DB
;
Tbl4_sav387:
DB 50 ;speech speed
;system pitch setting
;seq!2 ir age4
Voice+1
119,124,31
DB
DB
DB FFH ;end
Tbl4_say388:
DB 56 ;speech speed
;system pitch setting
;seql4 ir age4
Voice+3
162,63
FFH ;end
DB
DB
DB
Tbl4_say389:
DB 60 ;speech speed
;system pitch setting
;SEQ10 HANGING (YAWN)
;speech speed
;system pitch setting
;seq!5 ir age4
DB Voice-8
DB 161,164,161
DB 46
Voice+3
161 ,144,144
DB
DB
DB FFH ;end
Tbll_say41:
46 ;speech speed
;system pitch setting
;seql6 ir age4
DB
Voice+4
142,144,143
;end
DB
DB
DB FFH
Tbll_say42:
46 ;speech speed
;system pitch setting
DB
DB Voice
DB 4
DB FFH ;end
Tbl4_say390:
55 ;speech speed
/system pitch setting
DB
Voice+3
165,165,144,165,144,165,144,165 ,144
;end
DB
DB
DB FFH
;END IR
;END GEORGE
; ADDED BY DMH (FOR FURBY SAYS)
Tbl4_say391:
;speech speed
*,
system pitch setting
; LIGHT (FURBY SAYS)
;end
DB 46
DB Voice
DB 42
DB FFH
; ADDED BY DMH (FOR FURBY SAYS)
A-244
----------------------- Page 246-----------------------

Tbl4_say392:
DB 52 ;speech speed
Voice ;system pitch setting
;no light
;end
DB
DB 60.42
DB FFH
Tbl4_say393:
;speech speed
Voice ;system pitch setting
164.163.46 ; LOUD SOUND
;end
DB 55
DB
DB
DB FFH
;
Tbl4_say394: ; DMH
;speech speed
•.
system pitch setting
*,
LISTEN (FURBY SAYS)
DB 46
Voice
164.163.44
DB
DB
DB FFH ;end
Tbl4_say395:
;speech speed
•.
system pitch setting
;(ME) with names (dmh)
;end
DB 46
Voice
52.163
FFK
DB
DB
DB
;
Tbl4__say396:
;speech speed
•.
system pitch setting
;name (MEE MEE) (dmh)
DB 56
Voice
162,55
FFH ;end
DB
DB
DB
Tbl4_say397:
;speech speed
•.
system pitch setting
;(DO MOH)
DB 58
DB Voice
DB 163,23
DB FFH ;end
Tbl4_say398:
;speech speed
•.
system pitch setting
;TOH-LOC
DB 60
DB Voice
DB 80
DB FFH ;end
;
Tbl4_say399:
;speech speed
•.
system pitch setting
; DELAY 1 SECOND DMH
DB 60
Voice
165
DB
DB
DB FFH ;end
;;
start of diagnostic tables dmh
Tbl4_say400:
;speech speed
;system pitch setting
; used at start of diagnostics
DB 0
Voice*16
168,168,168
FFH ;end
DB
DB
DB
Tbl4_say401:
•.
speech speed
;system pitch setting
;key beep
DB 20
Voice*13
169,165
DB
DB
A-245
----------------------- Page 247-----------------------

; DB -
DB FFH ;end
Tbl4_say402:
20 ;speech speed
;system pitch setting
/pass test
DB
Voice*5
169,163,169,163,169
DB
DB
DB 2
DB FFH ;end
Tbl4_say403:
;speech speed
;system pitch setting
;fail test tone
DB 96
Voice-40
169.163
;end
D3
DB
DB FFH
Tbl4_say404:
;speech speed
;system pitch setting
/ speaker tone test
DB 46
DB Voice
DB 169
DB FFH ;end
;
Tbl4_say405:
;speech speed
Voice / system pitch setting
163
FFH
DB 46
DB
DB / no sound for start of motor cal
DB / end
;
Tbl4_say406:
/ speech speed
/ system pitch setting
;feedl
DB 20
Voice*5
169,163,169,163,169
/ end
DB
DB
DB FFH
Tbl4_say407:
/ speech speed
/ system pitch setting
/ pass feed sw
DB 20
Voice*5
169,163,169,163,169
DB
DB
DB FFH / end
Tbl4_say408:
/speech speed
/ system pitch setting
/ pass light test
DB 20
Voice*5
169,163,169,163,169
DB
DB
DB FFH /end
;
Tbl4_say409:
/ speech speed
/system pitch setting
/ pass sound test
DB 20
Vcice*5
169,163,169,163,169
DB
D"
DB FFH / end
Tbl4_say410:
20 ;speech speed
/ system pitch setting
DB
Voice*5
169,163,169,163,169
DB
DB / pass all test complete
DB 159
DB FFH / end
;
Tbl4_say411:
A-246
----------------------- Page 248-----------------------

DB 60 ;speech speed
;system pitch setting
; HIDE ME
; HIDE ME (HIDE AND SEEK) DHM
Voice*3
31,52
FFH ;end
DB
DB
DB
Tbl4_say412:
DB 100 ;speech speed
Voice ;system pitch setting
167,167,167
;end
DB
DB ;SEQ1 FEED AGE1 (AAAA'M
DB FFH
;
Tbl4_say413
Tbl4_say414
;
Tbl4_say415
;
Tbl4_say416
;
Tbl4_say417
;
Tbl4_say418
Tbl4_say419
Tbl4_say420
Tbl4_say421
;
Tbl4__say422
Tbl4_say423
;
Tbl4_say424
Tbl4_say425
;
Tbl4_say426
Tbl4_say427
;
Tbl4__say428
Tbl4_say429
;
Tb i.4_ iay430
;
Tbl4_say431
;
Tbl4__say432
Tbl4_say433
Tbl4_say434
Tbl4_say435
Tbl4_say436
Tbl4_say437:
A-247
----------------------- Page 249-----------------------

I
Tbl4__say438
*
Tbl4_say439
Tbl4_say440
»
Tbl4_say441
;
Tbl4_say442
;
Tbl4_say443
#
Tbl4_say444
#
Tbl4_say445
4
Tbl4_say446
4
Tbl4_say447
;
Tbl4_say448
;
Tbl4_say449
9
Tbl4_say450
Tbl4_say451
;
Tbl4_say452
Tbl4_say453
;
Tbl4_say454
Tbl4_say455
Tbl4_say456
;
Tbl4_say457
9
Tbl4_say458
4
Tbl4_say459
#
Tbl4_say460
;
Tbl4_say461
;
Tbl4_say462
#
Tbl4_say463
*
Tbl4_say464
;
Tbl4_say465
l
Tbl4_say466
;
Tbl4_say467
A-248
----------------------- Page 250-----------------------

t
Tbl4_say468:
;
Tbl4_say469:
;
Tbl4_say470:
s
Tbl4__say471:
Tbl4_say472:
;
Tbl4_say473
;
Tbl4_say474
;
Tbl4_say475
;
Tbl4_say476
Tbl4_say477
;
Tbl4_say478
Tbl4_say479
;
Tbl4_say480
;
Tbl4_say481
;
Tbl4_say482
;
Tbl4_say483
;
Tbl4_say484
;
Tbl4_say485
i
Tbl4_say486
Tbl4_say487
;
Tbl4__say488
Tbl4_»ay489
Tbl4_say490
Tbl4_say491
Tbl4_say492
;
Tbl4_say493
$
Tbl4_say494
Tbl4_say495:
J
Tbl4_say496:
;
Tbl4_say497:
A-249
----------------------- Page 251-----------------------

•O•• HtT -'• H '• H 3 9 — H — H«r ~ S'‘
«: ** **
3 H
o *r tr tr tr tr
ft o 3 H *-» H* V-- H >- M M
o r*» o *n A. *> f* ^
r-*» rr ! I I I I I ! i I I
m n a
0 0»
I (0 O in w u to to to to to a w
til 0 0 0 0 0
*< K
tn a»
o o
u»
•G tt & 0 » & 0
rt *< K K *< •< < »< K *< •<
s s s s s s s s s s s s s i rr ft GOOD © 03 © © ui cn ai tr to cn O' i_n cn U1 VO VO 01
vo a>
•c B O-» oVO oCP 'oJ oOV o<-P oto oM oo
o C
y ©
-
3 to
rr
©
»*J -» <
'rl O' O CP
*tr—9• Htr•3»— •s»—*•s*—*1 c r t r t r t r t r t r t r t r H M M H M h X cn M-
3'
. '3. «x '3
O O O O O O O O O O O O O
i n i r i» i k W U i K J W H H O O O
O H O i H U l M ^ P O l H W M O
M
o r
t p
3 X 2 X X 3 X 3 X
.. £
T to nj
•0 *
© C
© »0
t o ©
*d r
© m
d M
*
H H *9 H u.
t r t r t r t r
H H M H M M H M M M P H
H M H M M H M H M H H M
'*
x'
x'
x'
x'
0 0 0 0 0 0 0 0 0 0 0 0
y u n ^ t o U w w w M H O O
v J f J ^J W v l M O W -J t O v J W
9 H *-9 H H H H *-9 H
t r t r t r t r t r t r t r t r t r
3 3 3
0 0 0 0 0 0 0 0 0 0 0 0
l/I U l i> f t W W W W H M O O
C D U i a O J C D W C D U C O W C D U
9 H
t r T r
*0 0 0 0 0 0 0 0 0 0 0 0 *X X X'x 2 X 3 X X W X
U M J l f' A U l W f J W H ^ O O
VO 4t k V£> t f» V£ <* l0 £k V p £» V0 t f*
3 3 3 3 3 3 3 3 3 3 3 3
I-* »-* MMMM ^ *-* *-* *-
PC 3 X 3*3C 3 2 3 3's 3 3
0 0 0 0 0 0 0 0 0 0 0 0
0f l' »U U f l O C P O L P O L P O c n O L P ^ i i W W t J f J M M O
????????
o
3 I3 I3'xWx 'x >
3gt rat r Zto
3>r
3 3 33
^*3 I3 I3 I 8r
-t r 3 H I t r 3Ht r Ht r Ht r Ht r 333 7
<©
1 1
.*
1 1
U
----------------------- Page 252-----------------------

TSZ-Y
IICM
_
ETqi'0ieH
_
£:iqi’60EW
_
aqJ.'80£H'Ctqi't0eW“EI'«.
90EW-Eiqi'SOEWEiqi‘90EW~EXqi'£OEH“ETqi•ZOEWEXqi
I0EW-Etqi'00EW“Etqi'66ZM“Exqx'863VTExqi'66^W“Etqi
96CM-EXqi'Q6ZW-EXqA'>6ZW-exqi'E6SM~EXqi'Z6ZW Exqx
X6 EWEXqi'06ZW-EXqi'68ZH“EXqi.'88ZH"£ Xqi't8J>rEXqi
98uw"Exqi'saeWEx^i'mH“Exqi'Eezw 'Exqx'ZBZH Exqx
X 8ZW~EXqi'08ZH~EXqi'66ZW~EXqi'86ZH Exqx'66ZW"EXqi
96ZW~EXqi’S6ZH"~EXqi'»6ZH~EXqi'£6ZW“EXqi'ZLZtCtxqi
X 6ZW-Exqj.'06ZW-EXqi'69ZWExqj.’89ZW~E xqi'69ZW Exqi
99ZW-Exqi'S9ZM“EXqi'>9ZM“EXqi'E9ZH~EXqi'Z9ZW EXqi
X9ZM-EXqi'09ZW
_
£Xqi'65ZW-EXqi'8SZH ''EXqi'65ZK“EXqi
9SZW-EXqi
MQ
MO
MQ
MQ
«a
MO
MO
MQ
MO
MQ
MQ
MQ
: 6”JOlow
il
SSZVTSXqX'frSZW 2XqX
8EseW fr2W"’2zxqx XqX'' zssi £.fr3W-rzxqx “2XqX''9xsztf fr3rf“'2zxqx XqX''Soszw *2W_22XqX xqx''*6*fr2zwW-2zxqx XqX
£'*^Z>WCZ “3\XqX <U'' .ZZVZ E21*W“32XqX XqX'*9X*£32>W'r" 32XqX XqX'# S0fr £:2- HW”22XqX XqX''6frE £22WW_2 2XPX XqX
112W~2XqX'2£CW“3XqX'I £2W“2tqj.'0£2W“2iqX'6Z2W 2XPX
822W"’tqi'Z.c2W“2iqX /922W“2iqX,922W 2iqX'*22W*“2XqX
£22K~2iqX'222H"~2tqX'\ ZZhC2iqX'022W 2iqX'6I2W 2iqX
812W~:< iqx'.Z T2W~2iqx'912W“2tqx's12H"2iqX'fr12W"21qx
EX 2W*“3XqX'3X2Vr3XqX'XX 2W 2iqX'0t2H"2iqX'602W ciqx
8.02W"2iqX * L02W“2iqX # 902H“2iqX'S0cW“2iqX'*02W 2iqx
£02W“"2iqX'202W“2iqX'I02M“2iqX'002W'" 2iqX 1 66tw 2xqx
86IW"”2TqX'X6XH 2XqX'96XW 2XqX'S6lW 2XqX'*6XW 2XqX
£6 T *r2iqx'26iw zrqx'i6iw 2xqx'06xw 3xqx'68xw > xqx
88IW“2iqX‘L8IW~2iqX'98IW~2iqX'58IVT!‘ iqX'fr8XH 2tqx
£8IW*-2TqX'29Ivr2iqX'I8IWTiqX'08IW~2iqX'6 Z.Ttf“2TqX
8XIW~2iqX # X£XW 2iqx'9tiw ZiqX'SUVTZTqX'W.l!*r-Tqx
£Ltw~2iqx'2Liw ztqx'xxxtf 2xqx'0z.xw"2xqx'69xw
89 XW~2XqX'C9XW~2X XX'99XW 2iqX'S9lW“2iqX'fr9XW 2XPX
£9tM~ZtqX 4 29 XW"“2iqX'X9 XW""2XqX # 09 XW~2XqX'6SXW”"2XqX
8siw"“2iqx * LSiw”2iqx *9sxw—2xqx'5sxw""3xqx'frsiw~ziqx
£SIW~2iqX'2SXW 2iqX'I5IW”2tqX # 0SIM 3iqX #6MH~2TqX
8MW '2iqX # Z.MW“2iqX *9MM“2iqX #snw"2iqx #^^iw“2iqx
£ MW~2iqX'2frXW~2XqX'I MW“2iqX'0MM"2iqX'6 £TW~2iqx
8£IW 2XqX'iL£ XW 2iqx'9EXW 2iqX'S£IW 2XqX'fr £ XW 3iqX
£ £IW ZTqX'ZETtf 2iqx # l £iw 2iqx #0£iw 2XqX'62XW ciqx
83TH"2iqX
MQ
MQ
MQ
mm
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
qx MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MCI
MQ
:£cLt6 JOiow
!
LZIH liqX #92IW TIP
-
#9ZIW Iiqx
^^IW"'XIqX # £3iw“liqx * 23IW“t IPX # X 2IW"IiqX * 03IW~IiqX
6IIW IiqX,8IlM“IiqX'XIIH”IiqX #9IXW"XiqX # SIIwrXTqX
6^oxw xxw xxqx xxqx''8Exxjrxxqx ox*rxxqx'^£.oxwxxqx xxkrxxqx' '9xxxtrxxqx oxwr:xqx''sox oxxvrxxqx *rxxqx
froxw“xxqx # £oxw~xxqx'zoxiTxxqx # xoxwxxqx * oox>rxxqx
66o>rxxqx'86owrxxqx'x6oW“xxqx #96owrxxqx
s6ow~xiqx'fr6ow”xxqx'E6o*rxxqx'36oi'rxxqx'x6ow""xxqx
060H"XXqX * f30W~X xqx #88OW”::qx'L80M"X xqx'980H-Xxqx
5so>rxxqx #^8ow“"xxqx # £8OH xxqx *zsowxxqx # xsow“xxqx
08cw^xxqx 46coWxxqx # 8xow~xxqx # xxojrxxqx'9xowrx xqx
sxow“xxqx # frz.ow“xxqx'£LOw‘"xxqx # 3xoH
_
xxqx'x /Loir‘xiqx
0X0M~XXqj.#690W“XXqX,890W"TXqX # X90kTXXqX,990W“XTqX
59ovrxiqx^9oW”xTqx'£90prxxqx'29otrxxqx # x90M“xxqx
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MQ
MA
----------------------- Page 253-----------------------

Tbl3_M312,Tbl3_M313,Tbl3_M314,Tbl3_M315,Tbl3_M316
Tbl3__M317,Tbl3__M318,Tbl3_H319,Tbl3_M320,Tbl3_M321
Tbl3_M322,Tbl3_M323.Tbl3_M324,Tbl3_M325,Tbl3__M326
Tbl3__M327,Tbl3_M328,Tbl3_J!329.Tbl3_!> 330,Tbl3__M331
Tbl3__M332,Tbl3_M333,Tbl3_M334,Tbl3.J<335,Tbl3_M336
Tbl3_M337,Tbl3_J*338.Tbl3_M339,Tbl3_!> 340,Tbl3_M341
Tbl3_M342,Tbl3JK343,Tbl3_J4344,Tbl3_J«345,Tbl3.J!346
Tbl3__M347,Tbl3
^M348,Tbl3_>M349,Tbl3_J«350,Tbl3_M351
Tbl3_M352,Tbl3_#353,Tbl3J4354,Tbl3_M355.Tbl3_M356
Tbl3_M357,Tbl3_M358,Tbl3_M359,Tbl3_M360,Tbl3_J4361
Tbl Tbl33____MM362 367.,Tbl Tbl33^jH368 363,,Tbl Tbl33__MM369 364,,Tbl Tbl33___MM370 365,,Tbl Tbl33___HM371 366
Tbl3_M372,Tbl3_M373,Tbl3_M374,Tbl3_M375.Tbl3_M376
Tbl3__M377,Tbl3_M378,Tbl3_M379,Tbl3_M380,Tbl3_M381
Tbl3_M382,Tbl3_M383
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
Motor__grp4:
Tbl4_M384
Tbl4_JM385,Tbl4_M386,Tbl4_M387,Tbl4_M388,Tbl4_M389
Tbl4_M39Q,Tbl4_ M391.Tbl4_M392,Tbl4_M393,Tbl4_M394
Tbl4_M395,Tbl4_M396,Tbl4_M397,Tbl4_M398,Tbl4_M399
Tbl4_M400,Tbl4_M401.Tbl4_M402,Tbl4_M403,Tbl4_M404
Tbl4_M405,Tbl4_M406,Tbl4_M407,Tbl4_M408,Tbl4_M409
Tbl4_JM410,Tbl4_M411,Tbl4_M412,Tbl4_M413,Tbl4_M414
Tbl4_M415,Tbl4_M416,Tbl4_M417,Tbl4_M418,Tbl4__M419
Tbl4_M420,Tbl4_M421,Tbl4_M422,Tbl4_M423,Tbl4_M424
Tbl4_M425,Tbl4_M426,Tbl4_M427,Tol4_M428.Tbl4_M429
Tbl4_M430,Tbl4_M431,Tbl4_M432,Tbl4_M433,Tbl4_M434
Tbl4_M435 # Tbl4_M436,Tbl4_M437,Tbl4_M438 f Tbl4_M439
Tbl4_M440,Tbl4__M441,Tbl4__M442,Tbl4_M443,Tbl4_M444
Tbl4_M445,Tbl4_M446,Tbl4_M447,Tbl4_M448,Tbl4_M449
Tbl4_M450,Tbl4_M4514Tbl4__M452,Tbl4_M453,Tbl4__M45.4
Tbl4_M455,Tbl4_M456,Tbl4_M457,Tbl4_M458,Tbl4_M459
Tbl4_M460,Tbl4_M461,Tbl4_M462 #Tbl4_M463,Tbl4_M464
Tbl4_M465,Tbl4_M466,Tbl4_M467,Tbl4_M468,Tbl4__M469
Tbl4_>1470,Tbl4_M471 #Tbl4_M472,Tbl4_M473,Tbl4_>'.474
Tbl4_M475 # Tbl4_M476,Tbl4_M477,Tbl4_M478,Tbl4_M479
Tbl4_M480,Tbl4_M481 ,Tbl4_M482,Tbl4_H483,Tbl4_M484
Tbl4_M435,Tbl4_>1486,Tbl4_M487,Tbl4_M488 # Tbl4_H489
Tbl4_M490 # Tbl4_M491,Tbl4_M492,Tbl4_M493,Tbl4_M494
Tbl4__M495,Tbl4__M496,Tbl4_M497,Tbl4__M498.Tbl4_M499
Tbl4_M500,Tbl4_M501,Tbl4_MS02,Tbl4_M503,Tbl4_M504
Tbl4_M505.Tbl4_M506,Tbl4_M507,Tbl4J<508.Tbl4_M509
Tbl4_M510,Tbl4_M511
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
Each motor table has the following format:
The first line is the delay between motor steps.
The next group of lines are the motor steps.
The last line is the terminator command.
Delay table - a number from 0 - 255. THe entry is multiplied by
a 2.9 mSec timer. Therefore l*2.9mSec 2=5.8msec 255=739mSec.
The motor step is entered as a decimal number *>f 10-190.
’00' is a PAUSE command base on the motor delay setting.
A-252
----------------------- Page 254-----------------------

'FF' or '255' is the end of table command.
TABLES WITH ENDING STEP NOT WITHIN REQUIRED RANGE(10-20),(132.136)
M94,M127,M131,M139.M140,M143,M146
WITH DUPLICATE STEPS PUT CONSECUTIVELY
M187,M193,M219,M220,M229,M237,M241,M242
M250,M310fM321,M369
Tbll_M000:
DB 50 ;motor delay between steps
10,135
FFH ;end
DB
DB
;GEORGE 07/03/96
Tbll_>1001: ;dON START SEQ1 AGE1
DB 1 ;motor delay between steps
DB 190,133
DB FFH
;dON START SEQ2 AGE1
;motor delay between steps
150,145,138,120,145,133,147,133
;end
Tbll_M002:
DB 1
DB
DB FFH
;
Tbl1_M003:
DB 10 ;motor delay between steps
DB 90,100,0,0,0,100,0,0,0,0,133 ;CONNECTED M23 ;dON START
SEQ3 AGE1
145,160,0,0,0,160
;end
DB
DB FFH
;
Tbll_M004:
;motor delay between steps
;CONNECTED M22 ;aON START
DB 1
DB 200,190,160,100,133
SEQ3 AGE1
DB FFH ;end
;
Tbll_M005:
;motor delay between steps
; DONE conected m22 seq4 agel
DB 5
170,130,90,100,133
;end
DB
DB FFH
;
Tbll_M006:
;motor delay between steps
;seq5 front1 agel
DB 10
150.200,0,0,150,133
;end
DB
DB FFH
Tbll_M007:
;motor delay between steps
;SEQ6 FRONT1 AGE1 HORSE LAUGH
DB 1
120,150,133
FFH ;end
DB
DB
;
Tbl1
—M008:
;motor delay between steps
;SEQ7 FRONT AGE1
DB 10
DB 150,200.150,170,133
A-253
----------------------- Page 255-----------------------

DB FFH ;end
Tbll_M009 ;
DB 10 ;motor delay between steps
DB 150,200,150,190,170,120,133 ;SEQ8,FRONT AGE1
DB FFH ;end
;
Tbll_M010:
1 ;motor delay between steps
;SEQ9,FRONT AGE1
DB
180,100,133
;end
DB
DB FFH
;
Tbll_M011:
;motor delay between steps
;SEQ10,FRONT AGE1
DB 1
80
,0,1^0,0,125,0,0,133
;end
DB
DB FFH
;
Tbll_M012:
;motor delay between steps
125,0,0,0.0,0,0,0,0,133,80,133 ;SEQ11,FRONT AGE1
;end
DB 10
DB
DB FFH
Tbl1_M013:
DB 20 ;motor delay between steps
145,133.145,133,145,133,145
125,0.0.0,0,0,130,0.0,90,133
DB
DB ;seql2 FRONT AGE1 ADD
SAY20 TO FRONT
DB FFH ;end
;
Tbll_M014:
DB 10 ;motor delay between
steps
DB 90,130,120,0,0,133 ;seql3 FRONT AGE1 ADD
SAY 22
DB FFH ;end
;
Tbll_M015:
DB 10 ;motor delay between
steps
DB 125.110,133 ;seql4 FRONT AGE1 ADD
SAY22
DB FFH ;end
;
Tbl1_M016:
DB 1 ;motor delay between steps
160.0,0,133,125.150.133 ;seql5 FRONT AGE1
j end
DB
DB FFH
;
Tbll_M017:
;motor delay between steps
120,133.125,150,120,0,0,0.0,0,0,0,0,133
DB 10
DB ;seql6 FRONT
AGE1 ADD 37
DB FFH ;end
;
Tbl1_M018:
DB 1 ;motor delay between steps
DB 124,0,115,0,133,120,133 ;seql6 FRON1
AGE1 ADD 37
DB FFH ;end
;
A-254
----------------------- Page 256-----------------------

Tbll_M019:
DB 10 ;motor delay between steps
90,100,0,0,0,100,0,0,0,0,133
175,160,0,0,0,160,0,0,0,0,133
;end
; DB ;SEQ1 FRONT AGE2
DB
DB FFH
Tbll_M020:
10 ;motor delay between steps
;SEQ2 fRONT AGE2
DB
143,150,133,155,133
;end
DB
DB FFH
;
Tbll_M021:
DB 1 ;motor delay between steps
180.133.180.133
100.70.10.133
;end
DB
DB ;SEQ3AGE2 FRONT ADD SEQ9AGE1
DB FFH
Tbll_M022:
;motor delay between steps
;SEQ4 AGE2 FRONT
DB 10
140,150,133
;end
DB
DB FFH
;
Tbll_M023:
;motor delay between steps
120,133,0,0,0,0.0,0,0,140,150,133
;end
DB 1
DB ;SEQ4 AGEZ
DB FFH
;
TbllJM024:
;motor delay between steps
;SEQ5 AGE2 FRONT
150,140,138,120.145,133,0,147,133
;end
DB 5
;
DB
DB FFH
Tbll_M025:
•.
motor delay between steps
150,200,0,0,150,133,143,133,143
133,110,133
;end
DB 1
DB
DB ;SEQ6 AGE2 FRONT
DB FFH
Tbll_M026:
;motor delay between steps
;SEQ 7 AGE2 FRONT PARTI
DB 10
142,150,133
;end
DB
DB FFH
;
Tbl1JM027:
,-motor delay between steps
;SEQ 7 AGE2 FRONT PART2
150,145,160,133,145,133,145,133
;end
DB 1
DB
DB FFH
; danger always followed by 003: dmh
Tbll_M028:
;motor delay between steps
;SEQ8 MIDDLE OF 22,AND 4SOMETHING
DB 1
30,70 ;<- OK
;end
DB
DB FFH
;
Tbll_M029:
;motor delay between steps
;SEQ 9 TITTER
DB 1
DB 390,133
DB FFH ;end
A-255
----------------------- Page 257-----------------------

Tbll_JMQ30:
;motor delay between steps
; SEQ10 FRONT AGE2
DB 1
120,133,140,150,133
;end
DB
DB FFH
#
Tbll_M031:
DB 5 ;motor delay between steps
DB 180,160,133,115,105,133 ;SEQ11 FRONT
AGE 2 ADD 41
DB FFH ;end
;
Tbl1_M032:
;motor delay between steps
145,133,145,133,145,133,0,120,115,133
;SEQ12 FRONT AGE 2 ADD 20
DB 10
DB
DB FFH
;
Tbll_M033:
•.
motor delay between steps
150,170,190,133,120,133,135,133,150,0,0,133
DB 1
DB ;SEQ14
FRONT
DB FFH ;end
Tbl1_M034:
/ motor delay between steps
/SEQ15 FRONT AGE2 ADD 20
DB 10
125,0,0.0,0,0,133 ,145,133
z end
DB
DB FFH
Tbl1 M035:
DB 1 / motor delay between steps
120,0,0,0.0,0.0,0,133,145
133,0,150,133.110,133.120,0,0,133
DB
DB ;SEQ16 FRONT AGE2
ADD 20
•-
DB FFH / end
;
Tbl1_M036:
/ motor delay between steps
/ SEQ1 FRONT AGE3
LB 1
155,0,0,0,133
/end
DB
DB FFH
;
Tbl1_M037:
/motor delay between steps
;SEQ2 FRONT AGE3
DB 1
140,150,133,120,133,110.133
;end
DB
DB FFH
Tbll_M038:
/ motor delay between steps
/ SEQ3 FRONT AGE3
DB 1
155,0,0,0.133,155,0.0,0,133
/ end
DB
DB FFH
Tbll_ M039:
DB 1 / motor delay between steps
190,0,0,133 /SEQ4 FRONT AGE3
s end
DB
DB FFH
ERROR
Tbll_M040:
DB 10 /motor delay between steps
DB 140,150,133 /SEQ5 FRONT AGE3 ADD
SEQ14AGE1
; DB FFH / end
A-256
----------------------- Page 258-----------------------

;
Tbll__M040:
DB 10 ;motor delay between steps
150,200,0,0,150,133,143,133
143,133,110,0,0,133
;end
DB
DB ;SEQ6 FRONT AGE3
DB FFH
Tbll_M041:
;motor delay between steps
160,140,0,150,133,160,140,133
150,160,133
;end
DB 1
DB
DB ;SEQ7 FRONT AGE3
DB FFH
Tbll_M042:
•.
motor delay between steps
;SEQ?
DB 1
30,70,120
160,140,0,150,133,160,140,133
;end
DB
; DB
DB FFH
Tbl1_M043:
;motor delay between steps
;SEQ10 FRONT AGE3
DB 10
80,0,150.0,125.0,0,133
;end
DB
DB FFH
Tbl1 M044:
,-motcr delay between steps
;SEQll
DB 1
100,133 ,120,133
;end
DB
DB FFH
;
Tbll_M045:
;mctor delay between steps
;SEQ12 FRONT AGE3
DB 10
DB 150,0,0,133,120,100,133
(HEEY,TICKLE ME) ADD20 DB 4
DB FFH ;end
Tbll_M046:
;motor delay between steps
;SEQ13 fRONT AGE3
DB 10
DB 145,133,145.133,145,133
(NANNY,NANNY) ADD20
DB FFH ;end
Tbl1_M047:
;motor delay between steps
;SEQ13 fRONT AGE3 (RASBERRY, HE
DB 1
DB 125,0,130,0,0,90,133
HE HE ) ADD20
DB FFH ;end
Tbll_M043:
;motor delay between steps
;SEQ16 FRONT AGE3
DB 1
200,0,0,133
;end
DB
DB FFH
Tbll_M049:
;motor delay between steps
;SEQ16
DB 1
120,110,133,115,133
;end
DB
DB FFH
Tbll_M050:
;motor delay between steps
; SEQ2 (TICKLE) FRONT AGE4
DB 10
DB 140,150,133
A-257
----------------------- Page 259-----------------------

DB FFH ;end
;
Tbll_M051:
DB 10 ;motor delay between steps
125,100,133 ; SEQ2 (AGAIN) FRONT AGE4
;end
DB
DB FFH
;
Tbll_M052:
1 ;motor delay between steps
;SEQ3 (YOU) FRONT AGE4
DB
DB 120,133
DB FFH ;end
;
Tbll_M053:
;motor delay between steps
;SEQ3 (ME) FRONT AGE4
DB 10
DB 160,133
DB FFH ;end
Tbll_M054:
,- motor delay between steps
;SEQ4 (LOVE) FRONT AGE4 ADD45 74 71 20
DB 20
DB 150,133
DB FFH ;end
;
Tbl1_M055:
;motor delay between steps
;SEQ5 (HE HE HE) FRONT AGE4
DB 10
DB 135,133,150 nf0,133
ADD26
DB FFH ;end
Tbl1__M056:
DB 10 ;motor delay between steps
DB 154.132,115,0,0,0,0,0,0,133 ;SEQ5 (BIG FUN) FRONT
AGE4 ADD26
DB FFH ;end
Tbl1_M057:
;motor delay between steps
;SEQg (NO) FRONT AGE4
DB 10
DB 120,133
DB FFH ;end
;
Tbl1_M058:
;motor delay between steps
;SEQ8 (PLEASE) FRONT AGE4
DB 1
DB 100,133
DB FFH ;end
Tbll_M059:
•.
motor delay between steps
;SEQ9 (HEEY) FRONT AGE4 ADD71
DB 10
150,0,0,0,133
;end
DB
DB FFH
Tbll_M060:
*,
motor delay between steps
;SEQ14 (PARTY) AGE4 ADD45
DB 1
120.100,133
;end
DB
DB FFH
;
Tbl1_M061:
.- motor delay between steps
;SEQ15 (WA WA WA) FRONT AGE4 ADD22
DB 10
143,150,170,133
;end
DB
DB FFH
;END GEORGE 07/03/98
A-258
----------------------- Page 260-----------------------

* ;
(BOTTOM)
;GEORGE 07/04/98
Tbll_M062:
;motor delay between steps
;FORTUNE ASK
DB 20
150,0,0,0,133
;end
DB
DB FFH
;
Tbll_M063:
1 ;motor delay between steps
•.
FORTUNE ASK
DB
150.0.0,133
*,
end
DB
DB FFH
;
Tbl1 M064:
•.
motor delay between steps
•.
FORTUNE TELL (BIG)
DB 1
150,0,0,0,133
;end
DB
DB FFH
Tbl1_M065:
•.
motor
- . between steps
;FORTUI
DB 10
190 ,150,0,0,133
;end
DB (VERY,BIG)
DB FFH
Tbl1_M066:
•.
motor delay between steps
120,0,0,0.0,0,0,0,0,133 ;FORTUNE TELL (SEE)
;end
DB 1
DB
DB FFH
; danger always followed by 68: dmh
Tbl1_M067:
;motor delay between steps
;<- OK ;FORTUNE WHINE START
DB 10
30.10,30,10,30,10,70
;end
DB
DB FFH
Tbl1_M068:
;motor delay between steps
100,133,150,133,150,133 ;FORTUNE WHINE START
;end
DB 1
DB
DB FFH
Tbl1_M069:
;motor delay between steps
•.
FORTUNE TELL (NO)
DB 1
150,133
FFH ;end
DB
DB
;
Tbl1_M070:
;motor delay between steps
.•FORTUNE TELL (WORRY)
DB 1
125,100,133
;end
DB
DB FFH
;
Tbl1_M071:
;motor delay between steps
•.
FORTUNE (SOUND)
DB 10
110,120,133
FFH ;end
DB
DB
Tbll_M072:
;motor delay between steps
•.
FORTUNE (GOOD)
DB 1
150,133
FFH ;end
DB
DB
A-259
----------------------- Page 261-----------------------

Tbll_ M073:
DB 1 ;motor delay between steps
150,0,133 ;FORTUNE TELL (VERY)
FFH ;end
DB
DB
;
TbllJM074:
;motor delay between steps
;FORTUNE (WHOOPEE)
DB 1
145,133,150,0,0,0,0,0,133
;end
DB
DB FFH
Tbl1_M075:
;motor delay between steps
;FORTUNE (GOOD)
DB 1
115,133
FFH ;end
DB
DB
;
Tbl1_M076:
;motor delay between steps
;FORTUNE ( RASPBERRY)
DB 1
120,0,0,0,0,133
;end
DB
DE FFH
Tbl1_M077:
;motor delay between steps
•.
FORTUNE ( OH OH)
DB 1
150, 115, 133
;end
DB
DB FFH
Tbl1_M078:
;motor delay between steps
•.
FORTUNE (MAY BEE)
DB 1
DB 150, 115, 133
DB FFH ;end
END GEORGE 07 /04 /98
START HANGOUT
GEORGE 07/04 96
Tbl1_M079:
.- motor delay between steps
;SEQ1 HANGING(DE DE DE ,DUM
DB 1
DB 150,133,135,150,133 DUM
DUM DUM ) AGE1
DB FFH ;end
;
Tbl1_M080:
;motor delay between steps
;SEQ1 HANGING(DUM DUM DUM DUM )
DB 1
DB 190, 133
AGE1
DB FFH ;end
Tbl 1__M0S 1:
DB 1 ;motor delay between steps
120 , 100,133
120, 100 , 133
;end
DB
DB ;SEQ1 HANGING ( bEEDO)
DB FFH
Tbl1 _M082:
;motor delay between steos
;-133
;SEQ1 HANGING
DB 1
143,150,170,0,0,0,0,190
120 , 100.160,133
;end
DB
DB (YA DA DA )
DB FFH
;
Tbll M083:
DB 1 ;mot «lay between steps
A-260
----------------------- Page 262-----------------------

DB 190.120.133
DB 150.133.150.133 ;SEQ3 HANGING ( OMPAH bRUMM
BABABUM)
DB FFH ;end
TbllJM084:
DB 10 ;motor delay between steps
125,120,125,115,133 ;SEQ3 HANGING (bRUMM BABABUM)
;end
DB
DB FFH
Tbll_M085:
;motor delay between steps
115,125,110, 25,100,133 ;SEQ4 HANGING (LA LA)
;end
DB 1
DB
DB FFH
;
Tbll_ M086:
•.
motor delay between steps
;SEQ4 HANGING (LA LA)
DB 1
120,130,115
100,125,115,125.115,125,115,125,115,133
;end
DB
DB
DB FFH
;
Tbl1_M087:
;motor delay between steps
;SEQ5 HANGING ,HUMM BO DAH WAYDB 1
DB 120,0,0,0,0,0,0.0,133
LOH)
DB FFH ;end
Tbll_K088:
;motor delay between steps
115,133,139,155,160,133 ;SEQ5 HANGING (HUMM BO DAH WAYDB 10
DB
LOH)
DB FFH ;end
Tbll_M088:
•.
motor delay between steps
115,133,139,155.160,133 ;SEQ5 HANGING (HUMM BO DAH WAYDB 10
;DB
LOH)
115,133 ,160,133 ;SEQ5 HANGING (HUMM BO DAH WAY-LOH)
;end
DB
DB FFH
Tbll_M089:
•.
motor delay between steps
;SEQ6 HANGING (SNORE)
DB 60
190,170.150,133,0,0.0,0,0,0
;end
DB
DB FFH
;
Tbll_MQ90:
;motor delay between steps
.- SEQ6 HANGING (SHOUT)
DB 10
150,133
FFH ;end
DB
DB
Tbll_M091:
;motor delay between steps
;SEQ6 HANGING (OK KAH)
DB 1
143,150,140,0.150.0,0,133
;end
DB
DB FFH
Tbll_M092:
•.
motor delay between steps
;SEQ6 HANGING (U-TYE)
DB 5
110,133
FFH ;end
DB
DB
;
A-241
----------------------- Page 263-----------------------

Tbll_M093:
DB 60 ;motor delay between steps
DB 190,180,170,150,133 ;SEQ7 HANGING (SOFTER)
DB FFH ;end
; danger sleep
Tbll_M094:
DB 50 ;motor delay between steps
190,170,150,10 ;SEQ7 HANGING (SOFTER)
;end
DB
DB FFH
Tbll_M095:
DB 20 ;motor delay between steps
145,133,115,0.133 ;SEQ8 HANGING ADD 76
;end
DB
DB FFH
Tbll_M096: «r*
DB 1 ;motor delay between steps
150,115,150,133 ;SEQ9 HANGING (DO BE DOBE DO)
;end
DB
DB FFH
Tbll M097:
DB 46 ;motor delay between steps
DB 170,0.0,0.200,150,0.0,150,0,133 ;SEQ10 HANGING
(YAWN)
DB FFH ;end
;
Tbl1_M098:
DB 25! .•motor delay between steps
150,133 ;SEQ11 AND SEQ12 HANGING (SIGH)
FFH ;end
DB
DB
Tbl1_M099:
*.
DB 1 ;motor delay between steps
D3 144,133 ;SEQ13 SEQ14 HANGING (HA)
DB FFH ;end
;
Tbll M100:
DB 10 .•motor delay between steps
104.0,0,0,133
; end
DB
DB FFH
Tbll_M101:
20 ;motor delay between steps
;SEQ16
DB
100,133,0,0.0.100,133
;end
DB
DB FFH
-anger. USED IN ONE CASE. HANGING OUT, FOLLOWED BY 101
Tbll_M102:
DB 10 ;motor delay between steps
DB 0 ;SEQ16 HANGING (PAUSE) ADD20
DB FFH ;end
;
Tbll_M103:
1 .•motor delay between steps
;SEQ6 HANGING (UP)
DB
114,133
FFH ;end
DB
DB
Tbll_M104:
1 .•motor delay between ste
DB ^s
A-262
----------------------- Page 264-----------------------

DB 120,133
FFH ;end
;SEQ6 HANGING (ME)
DB
Tbll__M)05:
DB 1 ;motor de^ay between steps
DB 120,133 ;UP
DB FFH ;end
Tbll__M106;
DB 10 ;motor delay between steps
125,104,133 ;SEQ5 BORINvjr
FFH ;end
DB
DB
END HANGOUT
; danger, OK PAUSE FOR FORTUNE TELLING
Tbll__M107:
DB 1 ;motor delay between steps
DB r>
DB r'H ;end ;Fortune pause
;END GEORGE 07/04/98
;FEED
;GEORGE 07/05/98
Tbl1_M108:
10 ;motor delay between steps
115,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0.0.0,0.0,0,0,0.0.C ,0.0,0,0,0.0
133 ;SEQ1 FEED AGE1 (UUMKMMM)
;end
DB
DB
DB
DB
DB FFH
Tbll_JM109:
DB 1 ;motor delay between steps
; DB 140
DB 165,0,0,0,0,0,0,150.0,0,165.0,0.0,0,0,0.133 ;SEQl
FEED AGE1 (AAAAH)
DB FFH ;end
;
Tbll_M110:
;motor delay between steps
;SEQ2 FEED AGE1 (KOH KOH)
DB 1
120,130,110,133
;end
DB
DB FFH
;
Tbll_Mlll:
;motor delay between steps
;ME ME
DB 1
120.130,120,133
;end
DB
DB FFH
I
Tbll_M112:
;motor delay between steps
;E-DAY
DB 1
145,133,150,133
.end
DB
DB FFH
Tbll_M113:
;motor delay between steps
;DO MOH
DB 1
115,130,110,133
;end
DB
DB FFH
Thil_M114:
A 263
----------------------- Page 265-----------------------

DB 1 ;motor delay between steps
115,130,120,133 ;TOH DYE
;end
DB
DB FFH
;
Tbll_M115:
10 ;motor delay between steps
*,
BURP
DB
110,133
FFH ;end
DB
DB
Tbll_M116:
1 ;mc.^or delay between steps
;SIGH
DB
145,133
FFH ;end
DB
DB
;?
bll_M117:
DB 10 ;:..otor delay between steps
DB 150,133
DB FFH ;end
;
Tbl1_M118:
DB 10 ;motor delay between steps
120,0,0,0,133
;end
DB
DB FFH
;
Tbll__M119:
DB 1 ;inotor delay between steps
120,130,110,133 ;TOH LOO
;end
DB
DB FFH
Tbll M120:
DB 1 ;motor delay between steps
120,133 ,120,133
;end
DB
DB FFH
Tbll Ml21:
;motoi delay between steps
;HUNGRY
DB 1
145.130,120,133
;end
DB
DB FFH
Tbll M122:
;motor delay between steps
;LIKE
DB 1
150,133
FFH ;end
DB
DB
;
Tbl1_M123:
;motor delay between steps
;seq4 feed done
;end
DB 1
DB 150,0,0,133
DB FFH
END FEED
END GEORGE 07/05 98
;WAKE
;GEORGE 07/06/98
Tbll_M124: ;SG DONE
DB 255 ;motor delay between steps
DB 95,133
DB FFh
; danger
A-264
----------------------- Page 266-----------------------

Tbll_JU25: ;SG DONE
DB 1 ;motor delay between steps
DB 75,90 ;<- OK
DB Frh
Tbll_M126: ;SG DONE
DB ;motor delay between steps
DB 135,120,135
DB FFh
Tbl1_M127: ;SG DONE
DB 1 ;motor delay between steps
DB 80,133
DB FFh
; danger
Tbl2__M128: ;SG DONE
;motor del^y between steps
;<-OK
DB 1
DB 75,90
DB FFh
Tbl2__M129: ;SG DONE
DB 1 ;motor delay between steps
90
,110,133
90,110,70
DB
;DB
DB FFh
Tbl2_M130: ;SG DONE
DB 1 ;motor delay between steps
DB 115,133
DB FFh
; danger
Tbl2_Ml31: ;SG DONE
DB 1 ;motor dela/ b«rween steps
DB 90,70
DB FFh
Tbl2_M132: ;SG DONE
DB 1 ;motor delay between steps
DB 95,133
DB FFh
Tbl2_M133: ;SG DONE
DB 1 ;motor delay between steps
DB 115,133
DB FFh
; danger
Tbl2_M134: ;SO DONE
DB 1 ;motor delay between steps
DB 185
DB FFh
; danger
Tbl2_M135: ;SG DONE
DB 1 ;motor delay between steps
DB 133
DB FFh
; danger
Tbl2_>!136: ;SG DONE
DB 1 ;motor delay between steps
DB 133
DB FFh
; danger
A-26S
----------------------- Page 267-----------------------

Tbl2_J(137: ,-SG DONE
DB 1 ;motor delay between steps
DB 145
DB FFh
; danger
Tbl2_M138: ;SG DONE
;motor delay between steps
120,133,120,133,120,133,120,133,120,133,120,133,70,8*
0,0,70,0,0,0,0,0,0
DB 1
DB
DB
DB FFh
; danger
Tbl2_M139: ;SG DONE
DB 1 ;motor delay between steps
DB 82,70
DB FFh
; danger
Tbl2_M140: ;SG DONE
DB 1 ;motor delay between steps
120,115,130,120,70
;end
DB
DB FFH
; uanger
Tbl2_M141: ;SG DONE
Db 1 ;motor delay between steps
DB 133
DB FFH ;end
; danger
Tbl2_M142: ;S
- DONE
DB 1 ;motor delay between steps
DB 75
DB FFH ;end
;SG DONE
;motor delay between steps
Tbl2_M143:
DB 1
90,80,100,75
90,80,100,133
;end
; DB
DB
DB FFH
; danger
Tbl2_M144: ;SG DONE
DB 1 ;motor delay between steps
DB 120
DB FFH ;end
;;
danger
Tbl2_M145: ;SG DONE
DB 1 ;motor delay between steps
110,75
FFH ;end
DB
DB
;
;SG DONE
;motor delay between steps
Tbl2_M146:
DB 1
;DB 90,75
DB 90,133
DB FFH ;end
0 ;
danger
Tbl2_M147: ;SG DONE
DB 1 ;motor delay between steps
A-266
----------------------- Page 268-----------------------

70,90,75
FFH ;end
DB
DB
Tbl2_M148: ;SG DONE
;motor delay between steps
120,130,115,126,115,140,110,0,0,0,0,0,0,0,0,0,133
;end
DB 1
DB
DB FFH
; danger
Tbl2_M149: ;SG DONE
DB 1 ;motor delay between steps
DB 75
DB FFH ;end
;
Tbl2_M150: ;SG DONE
DB 1 ;motor delay between steps
146,135
FFH ;end
DB
DB
Tbl2_M151: ;SG DONE
DB 1 ;motor delay between steps
120,133,70,0,135
;end
DB
DB FFH
; danger
Tbl2_M152: ;SG DONE
DB 1 ;motor delay between steps
DB 75
DB FFH ;end
; danger
Tbl2_M153: ;SG DONE
DB 1 ;motor delay between steps
115,75
FFH ;end
DB
DB
; danger sleep
Tbl2_M154: ;SG DONE
DB 100 ;mctor delay between steps
DB
0,0,0,85,30,0,20,0,85,30,0,20,0,85,30,0,20,0,75,0,0,0,0,85
30,0,20,0,10
;end
DB
DB FFH
; danger
Tbl2_M155: /SG DONE
DB 1 / motor delay between steps
90,70
FFH / end
DB
DB
/ danger
Tbl2_
-M156: / SG DONE
DB 1 /motor delay between steps
115,75
FFH send
DB
DB
/ END WAKE
/ END GEORGE 07/06/98
/HUNGER
/GEORGE 07/06/98
Tbl2JMl57: ;SG DONE / HUNGER
A-267
----------------------- Page 269-----------------------

DB 50 ;motor delay between steps
120,120,133
120,0,133
;DB
DB
DB FFH ;end
Tbl2_M158: ;SG DONE
DB 1 ;motor delay between steps
180,133
FFH ;end
DB
DB
;
Tbl2_Ml59: ;SG DONE
DB 1 ;motor delay between steps
115,110,133
;end
DB
DB FFH
Tbl2_M160: ;SO DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DB
;
Tbl2__M161: ;SG DONE
D5 1 ;motor delay between steps
115,130,115,130
;end
DB
DB FFH
Tbl2_M162: ;SG DONE
DB 1 ;motor delay between steps
115,110,133
FFH
.
;end
DB
DB
Tbl2_M163: ;SG DONE
DB 50 ;motor delay between steps
190,133
FFH ;end
DB
DB
Tbl2_M164: ;SG DONE
•.
DB 50 motor delay between steps
;DB 148,148,133
DB 148 ,0,133
DB FFH ;end
Tbl2_M165: ;SG DONE
DB 50 ;motor delay between steps
;DB 150,150,150,133
150,0,0,133
;end
DB
DB FFH
;
Tbl2_Ml66: ;SG DONE
DB 1 ;motor delay between steps
120,133
FFH ;end
DB
DB
Tbl2_M167: ;SG DONE
DB 1 ;motor delay between steps
115,133
FFH ;end
DB
DB
Tbl2_M168: ;SG DONE
A-268
----------------------- Page 270-----------------------

DB 1 ;motor delay between steps
DB 115,133
DB FFh
;END GEORGE 07/06/98
;END HUNGER
;INVERT
;GEORGE 07/07/98
Tbl2__M169: ;SG DONE ;INVERT
DB 1 ;motor delay between steps
110, 122, 75,130,117,133
;end
DB
DB FFH
Tbl2_M170: ;SG DONE
DB 10 ;motor delay between steps
;DB 165,165,133
DB 165,0,133
DB FFH ;end
;
Tbl2_M171: • ;SG DONE
DB 10 ;motor delay between steps
105,133
FFH ;end
DB
DB
;
Tbl2__M172: ;SG DONE
DB 1 ;motor delay between steps
150,133
FFH ;end
DB
DB
;
Tbl2JM173: ;SG DONE
DB 1 ;motor delay between steps
155,190,133
FFH ;end
DB
DB
;
Tbl2_M174: ;SG DONE
DB 1 ;motor delay between steps
145,133
FFH ;end
DB
DB
;
Tbl2_M175: ;SG DONE
DB 1 ;motor delay between steps
150,135,145,133
;end
DB
DB FFH
Tbl2_M176: ;SG DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DP
;
Tbl2_M177: ;SG DONE
DB 1 ;motor delay between steps
110,133,115,133
;end
DB
DB FFH
;
Tbl2__M178: ;SG DONE
DB 1 ;motor delay between steps
115,133
FFH ;end
DB
DB
A-269
----------------------- Page 271-----------------------

;7
bl2_M179: ;SG DONE
DB 1 ;motor delay between steps
DB 115,133
DB FFH ;end
;
Tbl2_M180: ;SO DONE
DB 1 ;motor delay between steps
DB 110,125,115,133
DB FFH ;end
;
Tbl2_M181: ;SG DONE
DB 1 ;motor dt.ay between steps
150,133
FFH / end
DB
DB
Tbl2_M182: ;SG DONE
DB 1 / motor delay between steps
115,133
FFH ;end
DB
Db
;
Tbl2_Ml83: ;SG DONE
DB 1 / motor delay between steps
115,130,110, 133
z end
DB
DB FFH
;
Tbl2_K184: /SG DONE
DB 1 / motor delay between steps
75.133
FFH ;end
DB
DB
;
Tbl2_M185: /SG DONE
DB 1 / motor delay between steps
;DB 150, 150,133
DB 150, 0,133
DB FFH ;end
;
Tbl2_M186: ;SG DONE
DB 1 / motor delay between steps
115, 130,115, 133
;end
DB
DB FFH
Tbl2_M187: ;SG DONE
DB 1 / motor delay between steps
DB 115,130,115,133
DB FFH Z end
;
Tbl2_M188: /SG DONE
DB 1 / motor delay between steps
145,135,145,133
;end
DB
DB FFH
;
Tbl2_M189: / SG DONE
DB 1 / motor delay between steps
120,105,133
FFH / end
DB
DB
;
Tbl2__M190:
A-270
----------------------- Page 272-----------------------

DB 1 ;motor delay between steps
DB 155.190,133
DB FFH ;end
Tbl2_M191:
DB 1 ;motor delay between steps
DB 155,190,133
DB FFH ;end
2__M192:
DB 1 ;motor delay between steps
155,190,133
;end
DB
DB FFH
;END GEORGE 07/07/98
;END INVERT
•.
start at 202
Tbl2_M193: ;BACKSG ;SG DONE
DB 100 ;motor delay between steps
200,200,200,200,133
200,0.0,0,133
;DB
DB
DB FFH ;end
;
Tbl2__M194: ;SG DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DB
Tbl2_M195: ;SG DONE
DB 1 ;motor delay between steps
DB 115,125,115,133
DB FFH ;end
;
Tbl2_M196: ;SG DONE ••
•.
DB 10 motor delay between steps
148,133
FFH ;end
DB
DB
;
Tbl2__M197: ;SG DONE
•.
DB 1 motor delay between steps
115,125.115,133
;end
DB
DB FFH
Tbl2_J!198: ;SG DONE
DB 100 ;motor delay between steps
145,0,0,133
;end
DB
DB FFH
Tbl2_M199: ;SG DONE
•.
DB 10 motor delay between steps
DB 110,133
DB FFH ;end
Tbl2_M200: ;SG DONE
•.
DB 1 motor delay between steps
75,133
FFH ;end
DB
DB
;
Tbl2__M201: ;SG DONE
DB 10 ;mot^r delay between steps
A-271
----------------------- Page 273-----------------------

115,125,115,133
;end
DB
DB FFH
;
Tbl2__M202: ;SG DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DB
; danger
Tbl2_M203: , D O N E
;motor delay between steps
120,128,79,133,146,0,0,0,133,145
;end
DB 1
DB
DB FFH
Tbl2__M204: ;SG DONE
DB 10 ;motor delay between step-.
190,0,133
;end
DB
DB FFH
Tbl2_M205: ;SG DONE
DB 1 / mote- de ?y between step
115,133
FFH ;end
DB
DB
; danger
Tbl2_M206: ;SG DONE
DB 1 / motor delay between steps
DB 75
DB FFH ;end
; danger
Tbl2_M2G7: ;SG DONE
DB 10 ;motor delay between steps
DB 150
DB FFH / end
;
Tb12 M208: /SG DONE
DB 10 /motor delay between steps
75,133
FFH ;end
DB
DB
Tbl2_M209: ;SG DONE
DB 100 ,- motor delay between steps
150,0,0,0,133
;end
DB
DB FFH
Tbl2_M210: ;SG DONE
/ motor delay between steps
123,110,75,133,115.133
;end
DB 10
DB
DB FFH
; danger
Tbl2_M211: ;SG DONE
DB 1 / motor delay between steps
DB 75 X
DB FFH ;end
; danger
Tbl2_M212: /SG DONE
DB 1 / motor delay between steps
D3 133
DB FFH ;end
;
A-272
----------------------- Page 274-----------------------

Tbl2_M213: ;SG DONE
DB 10 ;motor delay between steps
DB 115,150,133
DB FFH ;end
;
Tbl2_JM214: ;SG DONE
DB 1 ;motor delay between steps
80
,133
FFH ;end
DB
DB
; danger
Tbl2_M215: ;SG DONE
DB 100 ;motor delay between steps
DB 138
DB FFH ;end
Tbl2_M216: ;SG DONE
DB 10 ;mctcr delay between steps
75.133
FFH ;end
DB
DB
Tbl2 M217: ;SG DONE
DB 1 ;motor delay between steps
115.130,115,133
;end
DB
DB FFH
Tbl2_ M218: ;SG DONE
DB 50 ;motor delay between steps
DB 114,133
DB FFH ;end
;
Tbl2 M219: ,*SG DONE
DB 10 ;motor delay between steps
DB
120,130,120,130 ,120,130.120,130,120,130,120,130.115,115,133
DB
120.130,120,130,120,130, 120,130,120.130 , 120 ,130,115,0,133
DB FFH ;end
Tbl2_M220: ;SG DONE
DB 10 ;motor delay between steps
;DB
120,130.120,130,120,130,120.130,120.130,120,130,115,115,133
DB
120,130,120,130,120,130.120,130,120,130,120,130,115.0,133
DB FFH ;end
Tbl2_M221: ;SG DONE
DB 10 ;motor delay between steps
145,133
FFH ;end
DB
DB
Tbl2__M222: ;SG DONE
DB 50 ;motor delay between steps
0,0,0,0,115,133
;er.3
DB
DB FFH
Tbl2_M223: ;SG DONE
•.
DB 1 motor delay between steps
DB 115.125,115,133
A-273
----------------------- Page 275-----------------------

DB FFH ;end
;
Tbl2_M224: ;SG DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DB
Tbl2_M225: ;SG DONE
DB 1 ;motor delay between steps
DB 110,133
DB FFH ;end
;
Tbl2_M226: ;SG DONE
DB 100 ;motor delay between steps
DB 120,133
DB FFH ;end
Tbl2_M227: ;SG DONE
;motor delay between steps
190
,120,125,120,125,120,125.133
;end
DB 30
DB
DB FFH
Tbl2_M228: ;SG DONE
DB 1 ;motor delay between steps
DB 115,130,110,130,115,133
DB FFH ;end
Tbl2_M229: ;SG DONE
DB 30 ;motor delay between steps
115.120,110,110,110,133
115,120,110,0,0,133
;DB
DE
DB FFH ;end
Tbl2__M230: ; SG DONE
DB 1 ;motor delay between steps
110,125 ,115,133
;end
DB
DB FFH
Tbl2_M231: ;SG DONE
DB 1 ;motor delay between steps
75,133
FFH ;end
DB
DE
;
Tbl2 M232: ;SG DONE
DB 1 ;motor delay between steps
DB 110,133
DB FFH ;end
; danger
Tbl2_M233: ;SG DONE
DB 1 ;motor delay between steps
DB 145
DB FFH ;end
;;
danger sleep
Tbl2_M234: ;SG DONE
DB 10 ;motor delay between steps
DB 10
DB FFH ;end
Tbl2_M235: ;SG DONE
A-274
----------------------- Page 276-----------------------

DB 10 ;motor delay between steps
115,125,110,133
;end
DB
DB FFH
;
Tbl2_M236:
DB 10 ;motor delay between steps
115,133
FFH ;end
DB
DB
Tbl2_#237: ;SG DONE ;SICK2
DB 100 ;motor delay between steps
133,140,140.150,150,180,133
133,140,0,150,0,180,133
;DB
DB
rs FFH ;end
;
Tbl2_M238: ;SG DONE
DB 1 ;motor delay between steps
120.110,133
;end
DB
DB FFH
;
Tbl2_M239: ;SG DONE
DB 1 ,- motor delay between steps
115,133
FFH ;end
DB
DB
;
Tbl2_J!240: ;SG DONE
DB 10 ; i.^tor delay between steps
115,0,0,0,0.133
;end
DB
DB FFH
Tbl2__M241: ; J DONE
.itor delay between steps
124,133,120,133,115,115,0,0.133
124,133,120,133,115,0,0,0,133
;end
DB 1
;DB
DB
DB FFH
Tbl2_M242: ;SG DONE
•.
DB 50 motor delay between steps
115,70,120,120,133
115,70,120,0,133
;end
;DB
DB
DB FFH
*;
danger
Tbl2_M243: ;SG DONE
DB 50 ,- motor delay between steps
DB 70
DB FFH ;end
;
Tbl2_M244: ;SG DONE
DB 5n ;motor delay between steps
120,133
FFH ;end
DB
DB
;
Tbl2_M245: ;SG DONE
DB 50 ?motor ’ " / between steps
DB 75,133
DB FFH ;end
Tbl2_J!246: ;SG DONE
DB 10 ;motor delay between steps
A-275
----------------------- Page 277-----------------------

70,133
FFH ;end
DB
DB
Tbl2_M247; ;SO DONE
DB lr ;motor delay between steps
DB 110,133,0,0
DB FFH ;end
Tbl2_M248: ;SG DONE
DB 10 ;motor delay between steps
145,0,0,0,133
;end
DB
DB FFH
Tbl2_M249: ;SG DONE
DB 1 ;motor delay between steps
DB 115,0,0,0,133
DB FFH ;end
Tbl2_M250: ;SG DONE
DB 10 ;motor delay between steps
;DB 150,150,150,190,0,133
150,0,0,190,0,133
;end
DB
DB FFH
GEORGE 07/08/98
LIGHT
Tbl2_M251:
DB 5 ;motor delay between steps SGTEST
DB 115,132.125,110,132
DB FFh
Tbl2_M252:
DB 1 .-motor delay between steps
DB 190,133
DB FFh
Tbl2 M253:
;motor delay between steps
10,152,133,160,0,133
DB 1
DB
DB FFh
Tbl2_M254:
1 .•motor delay between steps
3,137,150,133,155,133
DB
143,137.
143,137,143.137,150,0,0,0,133,155,133
DB
DB
DB FFh
Tbl2_M255:
DB 1 ;motor delay between steps
DB 60.90,60,85,90,60.90.133
DB FFh
Tbl3_M256:
DB 10 ;motor delay between st DONE RB
DB 180,165,165,133
DB FFh
Tbl3_M257:
10 ;motor delay between steps
;WOW
DB
DB 190,133,105,133,105,160,133 DONE
DB FFh
Tbl3_M258:
;mot jr delay between steps DONE
60,133,0,0,0.0,0,155,133,145,133
DB 4
DB
A-276
----------------------- Page 278-----------------------

DB FFh
Tbl3_M259:
DB 1 ;motor delay between steps DONE
DB 160
,133,180,133,147,160,133
DB FFh
Tbl3JC260:
DB 1 ;motor delay between steps
DB 160,133,90,133
DB FFh
Tbl3_M261:
DB 7 ;motor delay between steps
DB 190,133,100,133
DB FFh
Tbl3_M262:
DB 7 ;motor delay between steps
DB 60,133,140,153,0,0,133,150,133
DB FFh
Tbl3_M263:
DB 1 ;MOTOR DELAY BETWEEN STEPS
DB 155,133,160,133,120,110,133
DB FFh
Tbl3__M264:
DB 10 ;motor delay between steps
DB 190,133,0,0,0,0,110,0,0,0,133
DB FFh
Tbl3__M265:
DB 1 ;motor delay between steps
DB 60,133,180,133
DB FFh
;END LIGHT
;END GEORGE 0*V0h /98
;;
DARK
;GEORGE 07/08/98
Tbl3_M266:
;motor delay between steps
150,133,160,133,120,112,0,0,0,0,0,0,0,0,133
DB 1
DB
Dt FFh
Tbl3_M26'/ s
;motor delay between steps DONE RB
150,133,120,112,0,0,0,0,0,133,149,0,0,133
DB 1
DB
DB FFh
;
Tbl3_M268:
;motor delay between steps
150,133,112,133,120,133.148,133,118,0,0,0,133,146,133
147,0,0,0,0,0,0,133
;end DONE RB
DB 10
DB
DB
DB FFH
Tbl3_J4269:
;motor delay between steps DONE RB
10,20,123,115,123,115,123,115,133
jend
DB 1
DB
DB FFH
*
Tbl3_M270:
;motor delay between steps
190,133.120,133,112,0,0,0,0,0,0,130,112,133
;end
DB 1 DONE
DB
DB FFH
A-277
----------------------- Page 279-----------------------

;
Tbl3_M271:
DB 1 ;motor delay between steps
147,155,139.149
133,149,0,0,0,133
;end
DB
DB ;SEQ6 AGE4/SEQ14 AGE 4 LIGHT js
DB FFH
;
Tb:3_M272:
1 ;motor delay between steps
150,133,0,0,0,159,133,150,0,0,133
145,137,144,133,117,125,117,133
;end DONE
DB
DB
DB
DB FFH
Tbl3_M273:
;motor delay between steps
145,155,133,120,115,133.190,133
0,0.0,150,0,0,0,0,0,0,0.0,133
0
,0,0,0,0,0,0,0,0,0,115,133
;end
DB 1
DB
DB
DB
DB FFH
Tbl3 M274:
;motor delay between steps
150,133,150.0,0,0,133,0,0,0,0,120,115,0,0,0,0,0,0.133
;end
DB 1
DB
DB FFH
;
Tbl3_M275:
•.
DB 10 motor delay between steps
DB
150,133,0,0,0,150,0,0,0,133.0,120,133,120.133,155,0,0,0.0.133
DB FFH ;end
;
Tbl3 M276:
;motor delay between steps
190,0,0,0,0,133,0.0,0,0,0,148,133,118,133,0,‘6,0
146,133.147,0,0,0.0,0,0,133
;end
DB 1
DB
DB
DB FFH
i
Tbl3_M277:
;motor delay between steps
190,133,120,133,112,0,0,0,0,0.0,130,112,133
;end
DB 1
DB
DB FFH
;
Tbl3_M278:
•.
DB 1 motor delay between steps
60,133,60,133,146,154,133
;end
DB
DB FFH
Tbl3_M279:
•.
motor delay between steps
190,133,0,0,0,110,0,0,0,0,133
;end
DB 1
DB
DB FFH
;
Tbl3_J!280:
;motor delay between steps
157,133,0,0,0,116,0,0,0,133,190,155,0,0,0,133
;end
DB 10
DB
DB FFH
;
Tbl3__M281:
;motor delay between steps
190,155.0.0,0,133,119,0.0,0,0,0,0,133
DB 1
DB
A-27B
----------------------- Page 280-----------------------

DB 146,133,147,0,0,0,0,0,0,133
DB FFH ;end
;
Tbl3_M282:
DB 1 ;motor delay between steps
60,133,75,83,78.83,78,133
;end
DB
DB FFH
Tbl3jM283:
;motor delay between steps
145,155,133,120,115,133,72,0,0,0,0,0,92.133,190.133
;end
DB 1
DB
DB FFH
Tbl3_M284:
;motor delay between steps
190,133,0,0,0,110,0.0,0,0,133
;end
DB 1
DB
DB FFH
Tbl3_M285:
;motor delay between steps
150,133,0.0.0,116,0,0,0,133,190,155,0,0,0.133
;end
DB 10
DB
DB FFH
Tbl3_M286:
;motor delay between steps
190,155,0,0,0,133,119,0.0,0.0,0,0,133
147,0,0,0,0,0,0,0,0,0,133
;end
DB 1
DB
DB
DB FFH
;
Tbl3_>!287:
•.
motor delay between steps
190,133,110,0.0,0,0,0.133,112,0,0,0,133
;end
DB 1
DB
DB FFH
.*
;
Tbl|3_ i288 s
DB 1 ;motor delay between steps
110,0,0,0,133,115.133,147
133,190,133
;end
DB
DB ;SEQ7 AGE4/SEQ15 AGE 4 LIGHT js
DB FFH
;
Tbl3__M289:
;motor delay between steps
145,155,133,0,0,0,0,120,115,133,150,133
160,0,0,0,0,190,0,0,0,0,0,0,0,0,0.133
0,0,0,0,0,0,0,0,0.0,133
DB 1
DB
DB
DB ;SEQ8 AGE4/SEQ 16 AGE 4
INVERT js
DB FFH ;end
;END GEORGE 07/08/98
;END DARK
;;
SOUND
Tbl3_Jt290i
DB 1 ;motor delay between steps
155.133,0,0.0,0,125
115,145,155,133
;end
DB
;S1-A1/S9-A1/S1-A2 SOUND js
;S9-A2/S1-A3/S9-A3 SOUND js
DB
DB FFH
«
Tbl3_J1291:
•.
DB 1 motor delay between steps
DB 100,0,0,0,10
A-27P
----------------------- Page 281-----------------------

0,0,0,0,0,0,0
0,0,0,70,0,0,0,0
0,0,100,0.0,0,133
;end
DB
DB ;S2-A1/S10-A1/S2-A2 SOUND ja
;S10-A2/S2-A3/S10-A3 SOUND js
;S2-A4 SOUND js
DB
DB FFH
;
Tbl3_M292:
DB 1 ;motor delay between steps
110,0,0,133,0.0,0,0
0,0,155,0,0,0,0
133,120,0,112,0
148,0,0,0,0,0,133
;end
DB
DB
DB
DB ;S3-A1/S11-A1 SOUND js
DB FFH
Tbl3_M293:
DB 15 ;motor delay between steps
110,0,120,0,0,0,0,0
145,0,0,0,155,115
118,0.0,0,0,133
;end
DB
DB
DB ;S4-A1/S12-A1 SOUND js
DB FFH
Tbl3_M294:
DB 1 ;motor delay between steps
115,0,0,0,148
115,0,0,133
;end
DB
DB ;S5-A1/S13-A1 LIGHT (with say/m2) js
DB FFH
;
Tbl3_M295:
DB 1 ;motor delay between steps
;S6-A1/S14-£1/S6-A2 SOUND js
;S14-A2/S6-A3/S14-A3 SOUND js
155,133,122,0
115,145,120,0,0,133
;end
DB
DB
DB FFH
;
Tbl3_M296: *.
DB 1 ;motor delay between steps
14 150
125,115
0,0,0,0,133
;end
DB
DB
DB ;S7-A1/S15-A1 SOUND (with say/m2) js
DB FFH
;
Tbl3_M297:
DB 1 ;motor delay between steps
115,0,0,148,0,0.0,0
138,0,0,0,148,0,0,0
0,0,0,0,133
DB
DB
DB ;S8-A1/S16-A1/S8-A3/S16-A3 SOUND js
DB FFH ;end
;
Tbl3_M298:
DB 1 ;motor delay between steps
110,0,0,133,0,0.0,0
0,0,155,0,0,0,0
133,120,0,112,0
148,0,0,0,0,0.133
;end
DB
DB
DB
DB ;S3-A2/S11-A2 SOUND js
DB FFH
Tbl3_M299:
DB 1 ;motor delay between steps
110,0,120,0,0,0,0.0
145,0,0,0,155,190
0,0,0,0,0,0,160,0,133
;end
DB
DB
DB ;S4-A2/S12-A2 SOUND js
DB FFH
A-280
----------------------- Page 282-----------------------

Tbl3_M300:
DB 1 ;motor delay between steps
DB 165,0,0,0,190,0,0 ;S5-A2/S13-A2 SOUND (with
say/m2) js
DB 0,0,165,0,0,0,0,133 ;S5-A3/S13- A3 SOUND (with
say/xn2) js
DB FFH ;end ;S5-A4 SOUND (with say/m2) js
Tbl3_M301:
DB 1 ;motor delay between steps
DB 115,0,0,0.0,145,0,0,165 ;S7-A2/S15-A2 SOUND (with
say/m2) js
0,0,190,165,0,0,0.133
;end
DB
DB FFH
;
Tbl3__M302:
•.
DB 1 motor delay between steps
115,0,0,148,0,0,0
0,0,0.0.133
;end
DB
DB ;S8-A2/S16-A2 SOUND js
DB FFH
;
Tbl3_M303:
DB 1 ;motor delay between steps
DB 110,0,0,133,0,0,0,0
0,0.155,0,0
133,0,112,0
148,0,0,0,0,0,133
;end
DB
DB
DB ;S3-A3/S11-A3 SOUND js
DB FFH
;
Tbl3_M304:
DB 1 ;motor delay between steps
110,0,120.0,0,0,0,0
160,0,0,0,190
160,0,0,0,0,133
;end
DB
DB
.-S4-A3/S12-A3 SOUND js
;S4-A4 SOUND js
DB
DB FFH
Tbl3_M305:
DB 1 ;motor delay between steps
115,0,0,0,0,160
0,0,190,0,0,0,0
0,165,133
DB
DB
;S7-A3/S15/A3 SOUND (with say/m2) js
;S7-A4 SOUND (with say/m2) js
DB
DB FFH ;enc
J
Tbl3_M306:
•.
DB 1 motor delay between steps
157,0,0,0,133
0.0,120,0,0,0
133,150,0,0,0,0,133
;end
DB
DB
DB ;S1-A4 SOUND js
DB FFH
*
Tbl3JM307:
•.
DB 1 motor delay between steps
110,0,0,133,0,0.0,0
0,0,155,0,0
133,0,112,0,0,0
148,0,0,0,0,0,0,0,0,133
;end
DB
DB
DB
DB ;S3-A4 SOUND js
DB FFH
Tbl3JK308:
A-
281
----------------------- Page 283-----------------------

DB 1 ;motor delay between steps
157,0,0,0,133
0,0,120,0,0.0
133,150,0,0,0,0,0,0,133
;end
DB
DB
DB ?S6-A4 SOUND js
DB FFH
Tbl3_M309:
DB 1 ;motor delay between steps
115,0,0,148,0,0,0,0,0,0.0,0
138,0,0,0,0,0,148,0,0,0
0,0,0,0,133
;end
DP
DB
DB ;S8-A4 SOUND js
DB FFH
;END GEORGE
;END SOUND
;GEORGE 07/09/98
;TILT
Tbl3_M310:
DB 1 ;motor delay between steps
170,170,0,0,0
170,0,0,0,0
0
,0,0,0,133
;DB
DB
DB ;SI A1/S4 A1/S2 A4 TILT js
DB FFh
Tbl3_M311:
;motor delay between steps
;S2 A1 TILT js
DB 1
DB 125,0,0.0,133,120,145,110,133
DB FFH
Tbl3_M312:
;motor delay between steps
;S3 A1 TILT js
DB 1
DB 150,133,145,133,120,133
DB FFh
Tbl3_M313:
DB 1 ;motor delay between steps
100,0,0,0,0
0,0,0,0.133
DB
DB ;S5 A1/S4 A2/S2 A3/S2 A4 TILT js
DB FFh
Tbl3_M314:
DB 1 ;motor delay between steps
120,100,0,0,0.0.0,0,70,80,90
70,85,100.0,0,133
DB
DB ;S6 A1 TILT js
DB * Fh
Tbl3_M315:
DB 1 ;motor delay between steps
125,133,100,133,145,0,0,160
190,0,0,175,160,133
DB
DB ;S7 A1 TILT/S6 A2 TILT js
DB FFh
Tbl3_.M316:
DB 1 ;motor delay between steps
145,133,145,160,145,160
0,0,0,0,0,0,190,0,0,0,0,0
0,0,0,0,0,0,0,150,133
DB
DB
DB ;S8 A1 TILT (with say/m5)
js
DB FFh
Tbl3_M317:
;motor delay between steps
160,0,0,0,0,0,0,0,190,133
DB 10
DB ;S9 A1 TILT/S9 A2 TILT
js
DB FFh
Tbl3_M318:
DB 10 ;motor delay between steps
A-282
----------------------- Page 284-----------------------

DB 145,165,0,0,0.0,0,0,0,0,0,0
DB 190,0,0,180,190,133 ;S10 A1 TILT/S10 A2 TILT js
DB FFh
Tbl3_M319:
DB 1 ;motor delay between steps
0,120,0,0,133,141
133.120,0,0,0,133
DB
DB ;S11 A1 TILT (with say/m2) js
DB FFh
Tbl3_M320:
DB 1 ;motor delay between steps
150,133,123,0,0,133.142
0,0,150,0,0,0,0,0,133
DB
DB ;S12 A1 TILT js
DB FFh
Tbl3_M321:
DB 1 ;motor delay between steps
;DB 200,170,170,0,0,0,0,133 ;SI3 A1 / S15 A3 TILT js
DB 200,170,0,0,0,0,0.133 ;SI3 A1 / S15 A3 TILT js
DB FFh
Tbl3_M322:
1 .•motor delay between steps
170,0,0,0,0,133,126,130,118,133
DB
DB ;S15 A1 TILT js
DB FFh
Tbl3_>1323:
DB 1 ;motor delay betweer steps
155,0,0,0,0,185
160,0.0,133
DB
DB ;SI6 A1 / S15 A2 / S13 A3 TILT js
DB FFh
Tbl3__M324:
1 ;motor delay between steps
;SI A2/S3 A2/S1 A3/S1 A4 TILT
DB
DB 170,160,0,0,0,0,0,133
js
DB FFh
Tbl3__M325 s
DB 10 .•motor delay between steps
DB 120,145,110.133 ;S2 A2 TILT (with say/ml6) js
DB FFh
Tbl3_>!326:
10 ;motor delay between steps
120.100,0,0,0,0,0,0,133
148.133,142,115,0,0,133
DB
DB
DB ;S5 A2 TILT js
DB FFh
Tbl3_M327:
DB 1 ;motor delay between steps
145,133.145,160,145,160,0,0,0,0,0,0
190,0,0,0,0,0,0,0,0
150,133
DB
DB
DB ;S7 A2 TILT (with say/m5) js
DB FFh
Tbl3_M328:
DB 1 ;motor delay between steps
145,0,0,160,0,0,0,0
0,0,0,0,0,0,133
;end
DB
DB ;S8 A2 TILT (with say/m5) js
DB FFH
Tbl3_H329:
DB 1 /motor delay between steps
A-283
----------------------- Page 285-----------------------

0,120,133,143
118,0,0,0,133
;end
DB
DB ;S11 A2 TILT (with say/m2) js
DB FFH
Tbl3_M330:
DB 1 ;motor delay between steps
150,133,123,0,0,133.142
0,0.150,0,0,0,0,0,133
;end
DB
DB ;SI2 A2 TTLT js
DB FFH
J
Tbl3_M331:
1 .•motor delay between steps
;SI3 A2 TILT (with say/m5) js
DB
120.150,133
FFH ;end
DB
DB
Tbl3_M332:
DB 1 ;motor delay between steps
120,0,0,0,0,150,0,0,0
160,0,0,0,133,110,0,0,133
;end
DB
DB ;S14 A2 TILT js
DB FFH
;
Tbl3_M333:
10 ;motor delay between steps
155,0,0,0,0.190,0.0,183,0,0,0
175,0,0,0,162,0,0,0,0,0,0,0,133
0,0,120,115,110,115,105,133
145,155,165,0,0,0,0
0,0.0,0,0,133
;end
DP
DB
DB
DB
DB
DB ;SI6 A2/S14 A3/S14 A4 TILT js
DB FFH
;
Tbl3_M334:
10 .•motor delay between steps
120,100,0,0,0,0,0,0,133
;end
DB
DB ;S3 A3 TILT js
DB FFH
;
Tbl3_M335:
•.
DB 1 motor delay between steps
145,133,120,117
110,0,0,133
;end
DB
DB ;S4 A3/S4 A4 TILT (with say/m26) js
DB FFH
Tbl3_M336:
•.
motor delay between steps
145,165,0,0,0,0,0,0,0,0,0,0,133
120,133,145,155,0,0,0,133,115,0,0.0,133 ;S4 A3 TILT js
;end
DB 1
DB
DB
DB FFH
Tbl3_M337:
DB 1 ;motor delay between steps
145,133,122,147,139,160
190,0,0,0,0
0,0,0,0,155,133
;end
DB
DB
DB ;S6 A3 TILT (with say/m5) js
DB FFH
;
Tbl3_M338:
DB 1 ;motor delay between steps
145,165,0,0,0,0,0,0,0
0,0,0,0,0,0,133
;end
DB
DB ;S7 A3/S7 A4 TILT (with say/m5) js
DB FFH
;
A-284
----------------------- Page 286-----------------------

Tbl3_M339:
DB 1 ;motor delay between steps
145,
0,0,0,0,0,0,190,133,155,133
;end
DB 165,0,0,0,0,0,0,0
DB ;S8 A3/S8 A4 TILT js
DB FFH
Tbl3_M340:
DB 1 ;motor delay between steps
0,0,0,110.0,0
115,0,0,0,0,0,0,133
DB
DB ;S9 A3/S9 A4 TILT (with say/m9)
jB
DB FFH ;end
;
Tbl3_J*341:
DB 10 ;motor delay between steps
165,0,0,0,0,0,0,0.0
0,0,190,180,190,133
DB
DB ;S10 A3/S10 A4 TILT (with
say/ml6)js
DB FFH ;end
Tbl3_M342:
;motor delay between steps
;Sll A3/S15 A4 TILT (with
DB 1
DB 143,118,0,0,0,0,0,133
say/m2&34)js
DB FFH ;end
;
Tbl3_M343:
DB 1 ;motor delay between steps
DB 145,150,145,160,133 ;SI2 A3 TILT (with say/m5)
js
DB FFK ;end
;
Tbl3_M344:
DB 10 ;motor delay between steps
148,155,0,0,0,0,138,148,155
0,0.0,0,133,125.120,115,133
DB
DB ;S16 A3 TILT (with
say/m5)js
DB FFH ;end
Tbl3JM345:
DB 1 ;motor delay between stops
DB 155,0,0,120,0,0,0,0,133 ;S3 A4 TILT (with say/m26)
DB FFH ;end
Tbl3__M346:
;motor delay between steps
145,165,0,0,0,0,0,0,0,0,0,0,133
120,133,145,125,0,0,0
133,115,0,0,0,133
;end
DB 1
DB
DB
DB ?S5 A4 TILT js
DB FFH
J
Tbl3_X347:
DB 10 ;motor delay between steps
115,133,120,160
0,0,0,0,0,190.0,0,0,0
0,0,0,0,0,0,0,0,155,133
;end
DB
DB
DB ;S6 A4 TILT (with say/m5) js
DB FFH
;
Tbl3__M348:
A-285
----------------------- Page 287-----------------------

DB 1 ;motor delay between steps
DB 120,133,115,133,155
0,0,0,0,0,0.133
;end
t3 ;S11 A4 TILT (with say/m2) js
DB FFH
;
Tbl3_tf349:
DB 1 ;motor delay between steps
145,155,115,133 ;SI3 A4 TILT (with say/mS) js
;end
DB
DB FFH
Tbl3_M350:
DB 5 ;motor delay between steps
145,158,0,0,0.0,138,147,155
0,0,0,0,0,0,133
125,120,115,133
;end
DB
DB
DB ;SI6 A4 TILT (with say/m|5 js
DB FFH
/ END TILT
;END GEORGE
;GEORGE
jIR 07/09/98
Tbl3_M351:
DB 20 ;motor delay between steps SGTEST
DB 120,100,133 ;seql,seq2,seq3,seq4 IR age 1
DB FFh
Tbl3 M352:
DB 46 ;motor delay between steps SGTEST
DB 115,100,75,133 ;seq5 ir age 1
DB FFh
; DANGER
Tbl3_M353:
30 ;motor delay between steps
;SEQ6 (DANCE,WAH) ir AGE1
DB
DB 115,130,100,70 .*
DB FFh
Tbl3_M354:
/motor delay between steps
133,145,155,190,133,155,175,145,133 ;SEQ6 (DO DO DO) ir
DB 1
DB
AGE1
DB FFh
Tbl3_M355:
6 /motor delay between steps
145,115.145.133,145,115,145,133.0,0,0,0.0
125,110,133,0,160,0,0,0,133
;end
DB
DB
DB
DB FFH
Tbl3_M356:
DB 1 /motor delay between steps
DB 0
DB FFh / empty space
Tbl3_M357:
/ motor delay between steps
120,115,110,105,100,80.100,120,115,100,45,133
DB 1
DB /seq8
ir agel
DB FFh
Tbl3_M358:
10 /motor delay between steps
120,115,100,80,133,145,160,133
DB
DB /seq9 ir agel
DB FFh
Tbl3_M359:
A-286
----------------------- Page 288-----------------------

DB 1 ;motor delay between steps
DB 115,133,140,145,133,160,180
DB 173,167,160,180,173,167,160,140,145,133 ;seqlO,11 ir
agel
DB FFh
Tbl3_M360:
DB 1 ;motor delay between steps
120,107,122,113,100,75,90,80,88,100,0,0,133
120,107,122,113,100,75,90,80,88,100,0,133
146,140.155,133
DB
DB
DB ;seq!2 ir
agel
DB FFh
Tbl3_M361:
DB 5 ;motor delay between steps
DB
115,125,100.10,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,r.0,0,0
0,0,0,0,0,0.0,0,0,0,75,80,85,90,95,100,115
110.118.100,0,133
DB
DB ;seql3,14 ir
agel
DB FFh
Tbl3_M362:
DB 10
DB 160,0,0,190,160,0,0.133,100,0,0,0,133 ;seql 5 ir
agel
DB FFh
; DANGER SLEEP
Tbl3_M363:
DB 90 ;motor delay between steos
85,40.30,85,40.30.0,85,40,30,0,85,40,30,10 ;seq!6 ir
;10
DB
agel
.*
DB FFh
Tbl3_M364:
DB 1 ;motor delay between steps
DB 125,113,125,118,105,133 ;seql,2,3 ir age2
DB FFh
Tbl3_M365:
10 ;motor delay between steps
125,113,125,118,1C5,133 ;SEQ4,5 IR AGE2
DB
DB
DB FFh
Tbl3_M366:
;motor delay between steps
145,155,140,145,142 150,0,0,0,0,0,0,0,133
DB 10
DB ;seq6
ir age2
DB FFh
Tbl3_M367:
5
•.
motor delay between steps
10,40,10,40,133,143,140,145.143,145
DB
DB
;DB 133
DB 100.133
125.113.133
125,113,133
;seq7,8 ir age 2
;seq7,8 ir age 2
DB
DB
DB FFh
Tbl3_M368:
DB 10 ;motor delay between steps
A-287
----------------------- Page 289-----------------------

DB 125,115,105,0,0,133,145,143,155,133,100,133 ;seq9
ir age2
DB FFh
Tbl3_M369:
DB 1 ;motor delay between steps
125,120,115,113,110,105,123,108
123,115,110,100,100,100,100,0,0,0,0,0,0,0,0,133
DB
;DB
;seql0 ir age2
DB 123,115,110,100,0,0,0,0,0,0,0,0,0,0,0,133 ;seqlO ir
age2
DB FFH ;end
;
Tbl3_M370:
DB 1 ;motor delay between steps
DB 125,119,113,120,113.140,150,133 ;seqll
ir age2
DB FFH ;end
;
Tbl3_M371:
•.
motor delay between 9teps
150.0,0.0.100.0,0,10.0,0.0.0.0.0.0.0.0,0.0.0.0
0.0,0.0.0,0,0.0,0.0.0.0,0.0,0.0.0.0.0.0.0.0
;seq!3,14 ir age2
DB 1
DB
DB
115,90,110,100.133
;end
DB
DB FFH
Tbl3_M372:
43 .•motor delay between steps
100.0,0,150,0,0,100.0,0,0,0,133
;end
DB
DB ;seq!5 ir age2
DB FFH
*,
DANGER SLEEP
Tbl3_M373:
;motor delay between steps
;seql6 ir age2
DB 90
85,40,30,85,40,30,85.40,30,10
;end
DB
DB FFH
Tbl3_M374:
DB 1 .•motor delay between steps
DB 115,145,140,160.133 ;seql ,2,3 ,4,5 ir age3
DB FFH ;end
Tbl3_M375:
;motor delay between steps
120,0.0,145,138,150,120,105,133
;end
DB 1
DB ;seq6 ir age3
DB FFH
Tbl3_M376:
;rootor delay between steps
115.0,145.155,0,0,136.150,145,190.151,133,150
145,190,151,0,133
;end
DB 1
DB
DB ;seq7.8 ir age3
DB FFH
Tbl3_M377:
;motor delay between steps
;seq9 ir age3
DB 1
120,123,112,133,143.151,160.133
;end
DB
DB FFH
Tbl3_M378:
•.
DB 1 motor delay between steps
A-288
----------------------- Page 290-----------------------

120,122,115,125.112,150,0,0,0,133
;end
DB ;seqll ir age3
DB FFH
Tbl3_M379:
DB 1 ? motor delay between steps
115,10,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
145,110,0,0,0,0,0,0.133
;end
DB
DB
DB ;seql3,14 ir age3
DB FFH
;
Tbl3_M380:
DB 12 .• motor delay between steps
117,0,0,0,0,0,0,133.0,0.0,0,0,0,0,100,0,0.0.0.30
100,0,0,0,0,0.0.0,0,0,0,0,0,0,133
;end
DB
DB ;seql5 ir age3
DB FFH
Tbl3_M381:
DB 5 ;motor delay between steps
DB 120,150,110,0.0.0.133 ;seql,2,3.4,5 ir
age4
DB FFH ;end
Tbl3_>l382:
10 ;motor delay between steps
120.110,145,155,100,133
;end
DB
DB ;seq6 ir age4
DB FFH
J
Tbl3_M383:
DB 8 .•motor delay between steps
145,115,145,133,145,115.145.133,0.0,0.0,0
125,110,133,0,160,0,0,0,133
;end
DB
DB
DB FFH
;
Tbl4_M384 s
DB 1 .• motor delay between steps
115,133,143,148,136,160,180
173.167,160,180,173,167,160,140.145, 133
DB
DB ;seq9 ir
age4
DB FFH ;end
;
Tbl4_M385:
;motor delay between steps
118,0,0,155,0,0,133,0,0.118,0,133.0.0,0.0,110
0,0,0.133.120,107,122,113,100,75,90.80.88.100,133
SAY NUMBERS MODIFIED TO MATCH CORRECT
DB 1
DB
DB
DB FFH ;end
DIALOGUE
Tbl4_M386:
*,
motor delay between steps
120,123,112,133,143,151,160,133
;end
DB 1
DB
DB FFH
Tbl4_M387:
;motor delay between steps
120,0,0.145.110,145,110,0,0,0,0,0,133
;end
DB 1
DB
DB FFH
;
Tbl4JM388:
;motor delay between steps
;seql4 ir age4
DB 1
DB 120,110,133 jOK
A-289
----------------------- Page 291-----------------------

DB FFH ;end
;
Tbl4_M389:
DB 90 ;motor delay between steps
150,0,130,0,100,0,133 ;YAWN
;end
DB
DB FFH
; DANGER SLEEP
Tbl4_M390:
DB 90 ;motor delay between steps
0,0.0,85,30,0,20,0,85.30,0,20,0,85,30,0,20,0,85,10
;end
DB
DB FFH
;END GEORGE 07/09/98
;END IR
; FURBY SAYS: (LIGHT) DMH
Tbl4_M391:
DB 10 ;motor delay between steps
;LIGHT (furby says)
;LIGHT (furby says)
110.133
110.120.133
;end
DB
DB
DB FFH
Tbl4_M392: ; dmh no light
DB 1 ;motor delay between steps
150,0,0,0,115,0,0,0,0,133
;end
DB
DB FFH
;
Tbl4_M393: ; dmh loud sound
DB 30 ;motor delay between steps
150,0,0,0,115,0,0,0,0,133
;end
DB
DB FFH
;
Tbl4_M394: ; LISTEN DMH
DB 10 ;motor delay between steps
DB 140,150,0,0,133
DB FFH
;
Tbl4_M395:
;motor delay between steps
;(ME)
DB 10
DB 160,133
DB FFH ;end
;
Tbl4_M396:
DB 1 ;motor delay between steps
120,130,120,133 ;ME ME
;end
DB
DB FFH
;
Tbl4_M397:
;motor delay between steps
;DO MOH
DB 1
115,130.110,133
;end
DB
DB FFH
;
Tbl4_M398:
DB 1 .•motor delay between steps
120,130,110,133 ;TOH LOO
FFH ;end
DB
DB
?;
A
-290
----------------------- Page 292-----------------------

Tbl4j4399:
DB 1 ;motor u*ic.y between steps
DB FFH ;end
;;
» •^DB 400: 1 ;motor delay between steps
DB FFH ;end ; ste t diagnostic
Tbl4_M401:
DB 1 ;motor delay between steps
DB FFH ;end ; key press bee'
Tbl4_M402:
;ir "5tor delay between steps
; pass keep
DB 1
DB FFF ;end
;
Tbl4_M403:
DB 1 ;motor delay between steps
DB FFH ;end ; fail beep
Tbl4_M4C4:
DB 1 ;motor delay between steps
DB FFH ;end
Tbl4_M405:
;motor delay bet 'een steps
; motor cal
DB 1
10,200,10,134
;end
DB
DB FFH
;
Tbl4_M406:
1 ;motor delay between st ^>s
; feed 1
DB
DB 120
DB FFH ;end
Tbl4_M407:
255 ;motor delay between steps
; feed 2
DB
DB 0.134
DB FFH ;end
Tbl4_M408:
;motor delay between steps
; light pass
DB 1
DB 30
DB FFH ;end
;
Tbl4_M409:
DB 1 ;motor delay between steps
B 160 ; sound pass
DB FFH ;end
Tbl4__M410;
1 ;motoi delay between steps
; s1eep
DB
DB 10
DB FFH ;end
;
Tbl4_M411: ; PEEK-BOO (HIDE AND SEEK) DHM
DB 20 ;MOTOR DELAY BETWEEN STEPS
DB 155,133,0,0,147,133
DB FFh
;
A-291
----------------------- Page 293-----------------------

Tbl4_M412: ; feed dmh
;motor delay between steps
165,0,0,0,0,0,0,150,0,0,165,0,0,0,0,0,0,150 ;(AAAAK)
0,0,165,0,0,0,0,0,0,133 ;(AAAAH)
;end
DB 1
DB
DB
DB FFH
;
- DB FFH ;end
Tbl4__M413:
DB 1 ;motor delay between steps
DB FFH ;end
;
Tbl4_M414:
DB 1 ;motor delay between steps
DB FFH ;end
;
Tbl4_M415:
V B 1 ;motor delay between steps
DB FFH ;end
Tbl4_M416:
•,
DB 1 motor delay between steps
DB FFH ;end
;
Tbl4_M417:
DB 1 ;motor delay between steps
DB TH ;end
Tbl4_M418:
DB 1 ;motor delay between iteps
DB FFH ;end
Tbl4_M419:
DB 1 ;motor delay between steps
DB FFH ;end
;
Tbl4_M420:
DB 1 ;rr^*-,r delay between steps
DB FFH ;er.d
;
Tbl4_M421:
DB 1 ;motor delay between steps
DB F'- H ;end
;
Tbl4JM422:
DB 1 ;motor delay between steps
DB FFH ;end
Tbl4_JM423:
DB 1 ;motor delay between steps
DB FFH ;end
Tbl4_M424:
DB 1 ;motor delay between steps
DB FFH ;end
Tbl4JK425:
DB 1 ;motor delay between steps
A
-292
----------------------- Page 294-----------------------

DB FFH ;end
Tbl4_M426:
DB 1 ;motor delay between steps
DB FFH ;end
;"
^14^427 DB : 1 ;motor delay between steps
DB FFH ;end
Tbl4__M428:
DB 1 ;motor delay between steps
DB FFH ;end
Tbl4_M429:
DB 1 ;motor delay between steps
DB FFH ;end
;
Tbl4_M430:
DB 1 .•motor delay between steps
DB FFH ;end
;
Tbl4_M43‘:
Tbl4_M43*.:
Tbl4_M433:
Tbl4_M434:
DB 1 ;motor delay between steps
DB 0
DB FFH ;end
;
Tbl4_M435:
DB 1 ;motor delay between steps
DB 0
DP FFH ;end
;
Tbl4_M436:
DB 1 .•motor deley between steps
DB 0
DB FFH ;end
;
Tbl4_M437:
DB 1 .• motor delay between steps
DB 0
DB FFH ;end
;
Tbl4 M438:
DB 1 .• motor delay between steps
DB 0
DB FFH ;end
Tbl4_M439:
•.
DB 1 motor delay between steps
DB 0
DB FFH ;end
i
Tbl4_M443:
•.
DB 1 motor delay between steps
A-293
----------------------- Page 295-----------------------

DB 0
DB FFH ;end
Tbl4JK441:
;
Tbl4_M442:
;
Tbl4_M443;
;
Tbl4__M444:
Tbl4_M445:
;
Tbl4_M446:
Tbl4_M447:
Tbl4_M448:
;
Tbl4_M449
;
Tbl4_M450
Tbl4_M451
*
Tbl4_M452
;
Tbl4 M453
;
Tbl4__M454
J
Tbl4JM455
;
Tbl4__M456
Tbi4JM457
Tbl4__M458
;
Tbl4__M459
;
Tbl4_M460
;
Tbl4_M461
Tbl4_^462:
Tbl4_M463:
Tbl4_M464:
;
Tbl4__M465:
;
Tbl4_M466:
Tbl4_J4467:
Tbl4_M468:
Tbl4_M469:
A-294
----------------------- Page 296-----------------------

;
Tbl4_>1470 s
Tbl4_W471:
t
Tbl4_J4472:
!
Tbl4_M473:
;
Tbl4_M474:
Tbl4_M475:
;
Tbl4__M476:
Tbl4_M477
;
Tbl4_M478
Tbl4__M479
;
Tbl4_M480
;
Tbl4__MC81
Tbl4_M482
;
Tbl4_M483
;
Tbl4_.'484
Tbl4_M485
Tbl4_M486
;
Tbl4_M487
;
Tbl4_M48P:
Tbl4__M489:
;
Tbl4__M490:
;
Tbl4_M491:
;
Tbl4_M492:
;
Tbl4_M493:
;
Tbl4_M494:
;
Tbl4JM495:
Tbl4_M496:
;
Tbl4_M497:
»
;
Tbl4_M498:
;
Tbl4_M499:
A-29S
----------------------- Page 297-----------------------

Tbl4_M500:
;
Tbl4JM501:
Tbl4_M502
Tbl4_>!503:
;
Tbl4_M504:
;
Tbl4_M505:
;
Tbl4_M506:
;
Tbl4_M507:
;
Tbl4_M508:
;
Tbl4_M509:
;
Tbl4_M510:
DB 10 motor delay between steps
DB 10,200,134
DB FFH end
Tbl4__M511:
DB 10 ;motor delay between steps
DB 10.200,10
DB FFH ;end
••
A-296